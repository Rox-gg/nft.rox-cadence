// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../transactions/AdminAssignRox.cdc (865B)
// ../../../transactions/SetupUser.cdc (921B)
// ../../../transactions/TransferRox.cdc (788B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _adminassignroxCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xcd\xca\xdb\x30\x10\xbc\x07\xf2\x0e\x4b\x0e\xc5\x86\x60\x7a\x28\x3d\x98\x26\xc1\x38\x35\xe4\x50\x37\xc4\xee\x03\xc8\xf2\xc6\x11\x95\x25\x23\xaf\xdb\x94\x90\x77\x2f\xf2\x7f\xbe\xe4\x83\x4f\x07\xd9\x12\xb3\xa3\x9d\xd9\x11\x65\xa5\x0d\x41\xac\x55\xd4\xa8\x42\x64\x12\x53\xfd\x1b\x15\x9c\x8d\x2e\xe1\xf3\x35\x8e\xd2\x60\xbf\x3f\x7d\x4f\x92\xe5\xa2\x87\x9e\xf4\xf5\x40\x58\xd6\x33\x48\xf8\x33\x4e\x4f\x41\x38\x41\x97\x0b\x32\x4c\xd5\x8c\x93\xd0\xca\x31\xc8\x45\x25\x50\x91\x0f\x41\x9e\x1b\xac\xeb\x35\x70\x2d\x25\x72\xb2\x0f\x1e\x72\x1f\x12\x32\x42\x15\x6b\x20\x81\x66\x3a\x95\x42\x51\xdc\x94\x19\x1a\xf0\xe1\xd7\x41\xd1\xd7\x2f\x2e\xdc\x96\x0b\x00\x80\x6e\x97\x48\x2d\xca\x56\x7d\x1a\x3a\xf3\xe2\x28\xfd\xd1\x5e\xda\x4e\x2c\xac\x32\x58\x31\x83\x0e\xcb\x4b\xa1\x02\xce\x7d\x08\x1a\xba\x04\x9c\xeb\x46\x51\x4b\xd9\xe1\xec\xaa\x51\x9e\xbd\x8e\x13\x36\x30\x54\x78\x99\x36\x46\xff\xfd\xf6\xe2\x91\xad\x63\x9d\xf0\x47\x63\xbc\xee\x3a\x21\x6d\x58\x81\x47\x46\x17\x77\x62\xb7\x6b\xb7\x83\x8a\x29\xc1\x9d\x55\xa8\x1b\x99\x83\xd2\x04\x1d\x3d\x30\x30\x78\x46\x83\x8a\x23\x90\x06\xba\x20\xc4\x51\xda\x4b\x5c\xf5\x3c\xf7\xa1\x5d\xbc\x22\x6f\x08\x07\x4b\x06\x43\x46\xbf\x61\x03\x05\x52\x2f\x73\x1a\x83\x3b\x97\xdb\x17\xa0\xf8\xd3\xea\x1d\x41\x8f\x2d\x7b\x05\x52\xc8\x2a\x96\x09\x29\xe8\x9f\x33\x4a\x0d\xfb\x31\x6a\x75\x6c\x32\x29\xf8\x0b\xb5\xa3\x73\xb7\xb7\x21\x7b\xaa\xbe\x6f\x9d\x0f\x58\x55\xcc\x3b\x7e\x69\xd7\xc4\xbb\x72\xdf\x19\x6d\xfb\x89\xa3\x74\x1e\xce\x81\xf4\x29\x9d\x0f\xc7\x21\xa4\x76\x9f\x47\xd4\x9f\xfd\x4f\x83\xba\xff\x0f\x00\x00\xff\xff\xd7\x6e\x8c\xcb\x61\x03\x00\x00"

func adminassignroxCdcBytes() ([]byte, error) {
	return bindataRead(
		_adminassignroxCdc,
		"AdminAssignRox.cdc",
	)
}

func adminassignroxCdc() (*asset, error) {
	bytes, err := adminassignroxCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "AdminAssignRox.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x19, 0x2e, 0x3f, 0x22, 0x48, 0xf5, 0x40, 0xfb, 0xa7, 0xd, 0xbe, 0xa0, 0x4, 0x3f, 0x36, 0xe5, 0x24, 0x89, 0xfb, 0x3d, 0x9, 0x2a, 0x7e, 0x88, 0xca, 0x93, 0x68, 0xd7, 0x4a, 0xaa, 0xde, 0xf3}}
	return a, nil
}

var _setupuserCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xcf\x6e\x9b\x40\x10\xc6\xef\x48\xbc\xc3\xa7\x1c\x5a\x2c\x39\x49\xcf\x96\x13\xc9\x72\x12\xa9\x17\x37\xb2\xfd\x02\x0b\x0c\xb0\xca\xb2\x83\x86\x21\x89\x15\xf9\xdd\x2b\x30\x04\x1a\x5b\x6d\x6f\x96\xe7\x37\x7c\x7f\x76\x6c\x59\xb1\x28\x36\xec\x9f\x1a\x9f\xdb\xd8\xd1\x9e\x5f\xc8\x23\x13\x2e\xf1\xe3\x7d\xf3\xb4\x5f\x3d\x3c\x6c\x1f\x77\xbb\x30\xe8\xd1\x2d\xbf\xff\x54\x2a\xeb\x09\xb2\xfe\xb5\xd9\x6f\x57\xeb\x11\x0d\x03\x15\xe3\x6b\x93\xa8\x65\x8f\x8f\x30\x00\x80\x4a\xa8\x32\x42\x51\x6d\x73\x4f\xb2\xc0\xaa\xd1\x62\x95\x24\xdc\x78\x9d\x0d\x0c\x70\x7b\x0b\x9b\x41\x0b\x82\x39\xcd\x90\x32\xd5\xfe\xbb\xc2\x38\x21\x93\x1e\x50\x98\x57\x82\x41\xc2\xce\x51\x27\x30\xac\xda\x0c\xa7\x6f\xdf\xc4\x2c\xc2\x6f\xcb\x6f\x83\xd7\x9b\xf5\x27\xfc\x2c\xf6\xd5\x28\xdd\x47\xad\xfd\x05\x2e\x10\x3b\x65\x31\x39\x3d\x1b\x2d\x66\xb8\xbb\x83\xb7\x6e\xb4\x07\x38\xce\xa3\xab\x5d\xa7\x83\xc2\xd4\x48\xb8\xac\x1c\x29\xa5\xa8\x49\xd1\x54\x88\x29\x63\xa1\xab\xd9\xb8\x22\xa4\x8d\x7c\xda\x3c\x4e\xa2\x26\x42\x46\xdb\x34\x9e\xde\x40\x65\xa5\x87\x0b\xb9\x1c\xe9\xe4\x5f\x2c\xaf\x47\xd7\xa7\xfd\xc7\x76\x71\x0c\x10\x4d\xa4\x81\x89\x5a\xdd\x36\x67\x15\xca\xd3\x82\x07\xa0\xef\xae\x85\xa2\xe5\xf5\x28\x38\x87\xf2\x3f\x8b\x6a\xdf\xfc\x3c\x55\xd5\xc4\xce\x26\x48\x4c\x65\x62\xeb\xac\x1e\x90\xb1\x74\xda\xe7\x29\x7b\x79\x67\xfd\xcb\xdf\x1e\xee\xe3\xeb\xa9\x4e\x91\x4e\x6e\x3e\x7a\x1d\x7e\x7c\x45\x8e\xf7\xd1\x25\x85\x6e\xd6\xc6\x99\x43\x8d\xe4\xa4\xff\x11\xfb\xcf\x92\xbb\xe3\x58\x4f\x2f\xa2\xa9\xba\xcc\x7d\xd7\x8b\xf1\x2c\x5a\xb4\xcf\x6c\xd2\x54\xa8\xae\xfb\xd1\x31\x0c\x8e\x61\xf0\x3b\x00\x00\xff\xff\x7c\xc2\xc4\x36\x99\x03\x00\x00"

func setupuserCdcBytes() ([]byte, error) {
	return bindataRead(
		_setupuserCdc,
		"SetupUser.cdc",
	)
}

func setupuserCdc() (*asset, error) {
	bytes, err := setupuserCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "SetupUser.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe7, 0xfe, 0x7c, 0xd5, 0xab, 0xd2, 0x39, 0x34, 0xaf, 0xcf, 0x9a, 0xf2, 0x74, 0x68, 0x1b, 0xfc, 0xdd, 0x23, 0xce, 0x8b, 0x30, 0x8d, 0xe3, 0xb5, 0x6c, 0x8a, 0xf9, 0xa2, 0x83, 0x3b, 0xb8, 0x8d}}
	return a, nil
}

var _transferroxCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\xcf\x8e\xda\x40\x0c\xc6\xef\x48\xbc\x83\x97\x43\x3b\x91\xda\xa8\x87\xaa\x87\x68\xff\x34\x0a\x45\xe2\x92\xae\x20\x7d\x80\x61\xe2\x84\x51\xc3\x78\xe4\x71\x0a\xd5\x8a\x77\x5f\x05\x02\xc9\xb2\x9b\x4b\x7c\xf8\x3e\xfb\xf3\xcf\x63\x77\x9e\x58\x20\x27\xb7\x68\x5d\x6d\x37\x0d\x16\xf4\x17\x1d\x54\x4c\x3b\xf8\x76\xc8\x17\x45\x3a\x9f\xaf\x7e\xad\xd7\xd3\x49\x2f\x5d\xd1\x61\x29\xb8\x0b\x23\x49\xf6\x3b\x2f\x56\x69\x36\x48\xa7\x13\x61\xed\x82\x36\x62\xc9\x29\x46\x63\xbd\x45\x27\x09\xa4\x65\xc9\x18\xc2\x17\xd8\x5b\xd9\x96\xac\xf7\xcb\x79\x02\x7f\x96\x4e\x7e\x7c\x8f\xe0\xa5\x33\x02\x00\x34\x28\x20\xb8\xf3\xf9\xa2\x48\xe0\xe7\x6d\xb6\x38\x5f\x14\x17\xa5\x67\xf4\x9a\x51\x05\x5b\x3b\xe4\x04\xd2\x56\xb6\xa9\x31\xd4\x3a\x19\xf5\xbb\xf4\x34\xd4\x34\x78\xca\xb4\xc2\x0a\x1e\xe0\xec\x8a\x37\xc4\x4c\xfb\xfb\x4f\x97\xcd\xe2\xec\xaa\x7b\x66\xfb\x4f\x0b\x3e\xaa\x6e\xd9\x04\x3e\x50\xac\x85\x58\xd7\xf8\xac\x65\x1b\x0d\xd3\xba\xef\xe9\x09\xbc\x76\xd6\xa8\x59\x46\x6d\x53\x82\x23\x81\xf3\x28\xd0\xc0\x58\x21\xa3\x33\x08\x42\x20\x5b\x04\xda\x3b\xe4\xcf\x61\x94\x71\x16\x8d\xf3\x07\x6c\xaa\xb8\x87\x02\xf7\x5f\xdf\xee\x12\x5f\x70\xaa\x31\xd7\xa1\xee\x93\x1d\xcf\x3f\x3c\xa0\x69\x05\xdf\xf3\xb9\x1e\x0a\x1e\xa0\x46\xe9\x41\x0e\xf7\x8b\x6e\x0d\x25\x7a\x0a\x56\xce\x34\xaf\xb2\xb8\x46\xc9\xb4\xd7\x1b\xdb\x58\xf9\xaf\x3e\xc2\xda\x6e\x1a\x6b\x4e\xcc\xee\xae\xf8\x5f\xde\x1d\xfa\xd6\x70\x7c\x54\xd1\xdd\x38\xc3\x30\x3f\xee\x4b\x25\x9d\x33\xe9\x08\x8d\x89\xbd\x4d\x4e\xb5\x9a\x75\x18\x8b\xee\x91\x56\xc8\x8c\xe5\xec\x84\xe8\x38\x9d\x1c\xa7\x93\xd7\x00\x00\x00\xff\xff\x91\xe7\xc2\x25\x14\x03\x00\x00"

func transferroxCdcBytes() ([]byte, error) {
	return bindataRead(
		_transferroxCdc,
		"TransferRox.cdc",
	)
}

func transferroxCdc() (*asset, error) {
	bytes, err := transferroxCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "TransferRox.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf8, 0xa3, 0x18, 0x68, 0x4e, 0x36, 0x1a, 0xb0, 0x18, 0x3c, 0x77, 0x68, 0x56, 0xf3, 0x8f, 0xde, 0x1b, 0x5d, 0x10, 0x65, 0x3, 0x68, 0x9c, 0xc5, 0x78, 0x9a, 0x6d, 0x25, 0xfd, 0x50, 0x38, 0x9}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"AdminAssignRox.cdc": adminassignroxCdc,
	"SetupUser.cdc":      setupuserCdc,
	"TransferRox.cdc":    transferroxCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"AdminAssignRox.cdc": {adminassignroxCdc, map[string]*bintree{}},
	"SetupUser.cdc": {setupuserCdc, map[string]*bintree{}},
	"TransferRox.cdc": {transferroxCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
