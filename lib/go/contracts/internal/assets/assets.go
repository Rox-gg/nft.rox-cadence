// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../contracts/NonFungibleToken.cdc (1.537kB)
// ../../../contracts/RoxItems.cdc (5.672kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _nonfungibletokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x4d\x6f\xda\x40\x10\x3d\x27\x52\xfe\xc3\x24\x87\x0a\x24\x44\x7a\xa8\x7a\xb0\x84\x4a\x15\xd7\x92\x2f\x56\xd4\xba\xea\x21\xca\x61\xd9\x1d\xf0\xaa\xcb\x2e\xd9\x9d\x85\xa6\x11\xff\xbd\x5a\x1b\x7f\x80\x9d\x0a\x7c\x32\xec\xcc\x9b\xf7\xde\xbe\xf1\xc6\x2f\x80\x1b\x4d\x96\x71\x02\xa9\x09\xed\x92\x71\x84\xcc\xe8\xc4\xeb\x95\x5c\x28\xcc\xcd\x6f\xd4\xf0\x76\x73\x7d\x73\x0d\x00\x10\x1a\xb6\xcc\x02\x19\x62\xea\x87\xdf\x6c\xd4\x6b\x04\x3f\x53\x4d\x9f\x3f\x75\x4b\x70\x8b\x9a\xe0\xe1\x80\x9c\x6a\x49\x92\x29\xf9\x17\xc5\x68\xdc\x2f\xfb\x25\xa9\x10\x96\xed\x46\x52\xd4\x58\x13\x58\x5a\xb3\x8e\xe0\xab\x10\x16\x9d\xfb\x32\xd0\x15\xe3\xc6\x38\x49\x47\x4d\x64\xde\x69\xb1\xe8\x8c\xb7\x1c\x3b\x1a\xd3\x2c\xc9\x83\x2e\x38\x3c\xf7\xf7\x90\x17\x08\x5e\xcb\x17\x8f\x90\xc6\x40\x05\x23\x40\xc6\x0b\x08\x95\x05\x73\x6d\x6d\x80\x54\x48\xd0\xce\xae\xce\xf6\x83\x33\xb3\x24\x8f\x7a\xe3\x2e\x83\x68\x69\x3f\x5a\xb3\x95\x02\xed\x29\xd6\xd2\x6b\xd8\xd5\x46\xd6\x2f\x69\x5c\x83\x8f\x23\x98\x9f\x30\x28\x3b\x8d\xa3\xd3\xff\xc2\x63\xd1\x79\x45\x53\x29\x60\x36\x83\x2e\xda\x5d\xf0\x28\x8d\xc1\x2c\x81\x0a\x6c\x8e\x34\x50\x99\x93\xb5\x77\x04\x0b\x2c\xcf\x1c\x5b\x23\x30\x57\xbe\x5b\x7c\xf1\xe8\x08\x05\xa4\xf1\xdd\xf1\xb8\x7d\xfb\x73\x7f\x9e\x05\xdf\x91\xa3\xdc\x56\x16\x5c\x5d\xd5\xe2\xc5\x21\x0f\x25\x91\x4a\xed\xf8\x3c\xbc\x07\xa3\x14\x72\x92\x46\x3f\xfa\x85\x92\x7c\xc8\xda\xf7\xd1\xbb\x55\x2b\xa4\x34\x76\xa3\x71\x04\x4f\x95\xed\xcf\xfd\x9a\x85\xb1\xd6\xec\xb2\x24\xef\x24\x77\x1c\xc1\x87\x2c\xc9\xff\x47\xb7\x43\xd2\xca\x2d\x23\x8c\x9a\x28\x4c\x1a\x47\x26\x83\x5a\x8e\x39\x84\xed\x35\x3b\x8d\x22\x4b\x72\x17\xc1\xfc\xad\xa2\x10\x85\x98\xee\x4f\x8b\xcf\x4b\xd5\x50\xd7\xb0\x61\xe7\x59\x76\x91\x69\xbd\x48\x5b\x1c\x4a\xb4\x43\xb5\x9c\x36\xba\x9f\xa4\x78\x86\xdb\x19\x68\xa9\x22\xb8\x0b\x28\xc2\xa0\x03\x6d\x08\xf0\x8f\x74\xe1\x5b\x58\xe6\x96\x37\x76\xde\x5e\x16\xdb\x40\x9a\x5b\x64\x84\xdf\xd6\x1b\x7a\x6d\xaf\x25\x28\x9d\xf7\x2e\xf3\x28\x72\x03\x3b\x79\xd8\xc7\xda\xac\xa9\x42\xbd\xa2\x22\x2c\xe7\xc7\xc3\x4e\x56\xc3\x44\x87\x71\xb3\x8c\x18\x18\x74\xf9\xb7\x84\xf7\xff\x02\x00\x00\xff\xff\x71\x6f\x04\xe6\x01\x06\x00\x00"

func nonfungibletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_nonfungibletokenCdc,
		"NonFungibleToken.cdc",
	)
}

func nonfungibletokenCdc() (*asset, error) {
	bytes, err := nonfungibletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "NonFungibleToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8c, 0x76, 0x2d, 0x73, 0x79, 0xe3, 0xa8, 0x68, 0xb0, 0xfe, 0x2d, 0x62, 0xde, 0xff, 0x27, 0x6, 0x96, 0x4c, 0xd8, 0xb7, 0x84, 0x76, 0x2e, 0x1d, 0x36, 0xe3, 0x90, 0x33, 0xfe, 0x6a, 0x68, 0x1f}}
	return a, nil
}

var _roxitemsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x5f\x6f\xe3\xb8\x11\x7f\x4e\x80\x7c\x87\xd9\x3c\x24\x12\xea\x58\xdb\xa2\xe8\x83\x11\x37\xbb\x8d\xd7\x07\x3f\xd4\x58\xdc\xba\xb8\x87\xc3\xa1\xa0\xa5\x91\x4d\x44\x26\x0d\x92\xb2\xd7\xcd\xf9\xbb\x17\x43\xea\x0f\x29\xc9\x9b\xdb\x6d\xfd\x60\x88\x22\xe7\x37\xc3\x99\xe1\xfc\x86\xe2\xbb\xbd\x54\x06\x96\x52\xcc\x4b\xb1\xe1\xeb\x02\x57\xf2\x05\x05\xe4\x4a\xee\xe0\xfd\xd7\xf7\x7f\xb9\xb9\xbe\xb9\x4e\x12\xf8\x59\x7e\x5d\x18\xdc\x69\x3b\x58\xce\x57\xc0\x69\x04\xb9\x54\x34\xf5\x8e\x5e\xdf\x5c\xef\xcb\x35\xa4\x52\x18\xc5\x52\xd3\x48\x4c\xfa\xe0\xaf\x04\x0a\x00\x90\x24\xf0\xe9\x80\xc2\x68\x37\x24\x79\xa4\x31\x3c\x57\x28\x0b\xc1\x0d\x67\x05\xff\x0f\x66\x51\xdc\x5d\xf4\x0b\x37\xdb\x4c\xb1\x63\xc4\xb3\x09\xfc\x6b\x21\xcc\xdf\xfe\x3a\xb2\x86\x4f\xe0\x63\x96\x29\xd4\xfa\xa9\x27\x33\xc3\xbd\xd4\xdc\x04\x22\x46\x7e\x43\xe0\x9f\x5c\x18\xcc\x82\xf5\xa9\x2c\x0a\x4c\x0d\xed\x67\x91\x4d\xe0\x8b\x51\x5c\x6c\x62\x6f\x4f\x4b\xb6\xc3\x0c\x3e\x33\xb3\xf5\x36\x56\x20\x6d\xcb\x49\x4a\xf1\xc5\x48\xc5\x36\x48\x6b\x08\xa1\x19\x5c\x5a\xff\xb9\x5c\x17\x3c\x75\xcb\xdb\xe7\x70\xb5\x35\x55\x5d\x46\x6e\xec\x5b\x6d\x11\x8c\x34\xac\x00\x51\xee\xd6\xa8\x40\xe6\x4d\xb8\xc0\x6c\x99\x81\x2d\x3b\x20\xac\x11\x05\xec\xec\xfe\x5b\x45\x07\xa6\x9c\xec\x97\x72\xbf\x2f\x4e\xb5\x57\xfc\xdd\xcf\x57\xcd\xf3\x47\xc2\x05\x02\x06\xa6\x81\x89\x76\x92\xb0\x14\x6a\x59\xaa\x14\xe9\x6d\x3f\x4d\xc6\x0b\xca\xb3\x57\xb7\x3c\xb0\xfc\x05\xc5\xbd\x86\xc5\xac\x9d\xaa\x5d\xd0\x86\xa9\x3f\x67\x38\xaa\x3a\x5a\x84\x85\xa2\xdc\x01\x17\xf0\x8f\x4f\xfd\xb5\x83\x21\xee\x2f\x23\xe7\x2c\xad\x0b\x6b\xb5\x04\x3c\x93\xe2\xde\xc0\x8b\x90\x47\x38\x92\x33\xb9\x01\xae\x6b\x07\xd1\x8f\x0b\xca\x40\xc1\xcd\x62\xf6\x46\x56\x8d\x02\xab\x47\x03\x0a\x63\xdf\x43\xf4\xd3\x58\xe4\x63\x9e\xc1\x14\x9c\x86\x81\xd9\x40\x15\x4c\x43\xd5\x03\xeb\xc9\x06\x98\x5a\x53\x06\x66\x5b\x9b\x60\xea\x19\xd8\xae\x3c\xbb\xc7\x73\xed\x82\x20\xf4\x36\x67\x73\x96\x62\x93\x81\xdd\xa4\xf7\x37\x48\xa2\x79\x29\x20\xab\x8e\xb1\xcd\x85\x09\x7c\xe8\xe5\xce\x72\xbe\x8a\xfb\x62\x1b\x34\x8b\x99\x8e\xe2\x09\xfc\xea\xbc\xf7\x5b\x7f\xcd\x5a\x2a\x25\x8f\xcb\xf9\xca\x3b\xf3\xf1\x04\xee\x86\x54\x5c\x92\xae\xb6\xd2\x41\xa8\x37\x48\x92\x4f\xdd\xb0\x25\x09\x2c\x72\x30\x5b\x24\xd7\x94\x05\xa5\x0c\x65\x91\xe0\xc5\xc8\xbe\xe5\x19\x9d\x52\x37\x6f\x4a\x25\x30\x03\x85\x39\x2a\x14\x29\xf6\x90\xf4\x56\x96\x45\x06\x6b\xb4\x02\x9a\xed\x90\x8e\x1f\x3d\x33\xb5\x29\x77\x54\xd7\x8c\xb4\xe3\xbc\x14\xd6\xd5\x21\xc4\x5e\x6a\xd3\x35\x90\x7e\x51\x65\xdb\x74\x4a\x86\xc5\xf0\xfb\xef\xf5\xab\x27\x9b\x72\x53\xe0\x59\x3c\xe9\xcb\xd1\xef\xf6\x99\x09\x21\x4d\xe5\xa1\x3a\xda\xed\x26\x26\xf6\x70\x2f\x66\x97\xb7\x09\x5c\x03\x17\xa9\x54\x0a\x53\x73\x1b\x6a\x39\x0f\xa7\xdb\x40\xc2\x79\xe9\xa5\xf8\x81\x19\x9c\x5c\xcc\xbc\x51\xbf\x26\x7d\x56\xf2\xc0\x33\x54\x03\x53\x3f\x63\x8a\xfc\x30\x38\x35\x94\xd2\x61\xee\x50\x59\x95\x47\x81\xd9\x72\xbe\xd2\x13\xf8\xf0\xea\xd2\x66\xa0\x2a\x2e\xe7\xab\x73\x57\x9a\x32\xef\x58\xb3\x61\xfd\xd0\x16\x97\xf8\xc2\x09\xe9\x86\xd8\x56\x49\xcb\xd0\x8f\x0f\xee\x6c\x37\x26\x8d\x15\xee\xe4\x01\xa3\x17\x3c\x4d\xa0\xd5\x10\xc3\xd3\x13\xec\x99\xe0\x69\x74\xbb\xe3\x5a\x53\x69\x5d\xce\x57\xb7\xb1\x6f\x21\xfd\x70\xc7\x3b\x84\x6d\x15\x8d\x79\x56\x53\x76\xa3\x4f\x3d\x8d\x99\x63\xe3\x1e\x8a\xcb\x09\x78\x7c\xb0\xc2\x41\xc8\x7f\xb0\x46\x7c\xd3\x05\xee\x81\xe9\x77\xf0\xc1\x3f\xbb\x5d\xab\x42\xe2\xa1\x42\x59\x6d\xad\xbb\x30\x49\x80\x65\x99\xcd\x6e\x81\xc7\x0a\xbe\x3a\x88\x19\xb7\xf9\xc1\xd4\x09\x8e\x5b\x9e\x6e\xc1\x39\xdc\x9d\x5a\x59\x64\x20\x05\xf6\xd5\xca\x22\x5b\x0d\x07\xec\x57\x9e\xfd\xd6\xec\x61\x30\x1a\x7e\x2b\x44\x61\xa0\x36\xe8\x8f\x04\x21\x43\x6d\x94\x3c\x35\xba\xdf\x08\x43\xbf\xe6\x76\x7d\x5e\x45\xb5\x93\x70\x2f\x78\xd2\x17\xa0\x93\xa4\xad\xd2\xc1\xdb\x9f\xd0\x68\x60\x5e\xc5\x30\xb2\x6a\x3a\x88\xe8\xc9\x93\x69\x73\x12\x03\x41\x2d\x5d\xdf\x63\x97\xb0\xa2\x40\x05\x29\x13\xa0\x90\x65\xc0\x8d\x86\x1d\x1a\x96\x31\xc3\x80\x89\xcc\x2e\xa8\xdf\x6e\x65\xa6\xff\x37\x0e\xb9\xe0\x8d\xbb\x81\x70\x32\xfd\x16\x0d\x0d\xbb\xa9\x4a\xde\x1f\x76\x95\xed\xdd\xea\x2a\x39\x0a\x60\xf0\x2b\x25\x91\xd8\x00\xf9\x44\xe6\xd6\x2d\x39\xc7\x22\xd3\x10\x71\x91\x16\x65\x46\x93\x04\x67\x4e\x7b\x5c\xcc\xe2\x71\xa7\x9f\xa3\x9a\xae\x41\xb3\xbc\xa6\x28\x45\x24\x85\x20\x64\xc3\x4d\x55\x4f\x4a\x01\x59\x57\xe1\xa1\xe3\x60\x51\x2b\xa3\xc6\xff\x47\x26\xe6\xf9\xd0\x51\x7a\x67\x29\x6f\x88\x14\xe9\x1c\x2a\xcc\x61\x7a\x29\x66\xac\x34\xdb\xb7\x02\xd7\x89\x3e\xe1\x51\xdd\xb9\x0b\xeb\x8e\xbf\xf2\x0c\x58\x68\x1c\x32\xa8\xc2\x10\xbc\xf8\x16\x47\xb6\x83\xea\x40\x47\xbd\x62\x58\x9f\xf4\x70\x5b\x17\x50\xa8\xdb\x84\x3e\x46\x28\x4b\x15\xe9\xf5\x02\x57\xfb\xc1\x4b\x15\x32\x83\x9f\x76\x7b\x73\x6a\xb9\x33\x1a\xe4\xb1\x1e\x9f\xfb\x16\x34\x84\x51\x21\xf6\xd9\xbf\xbe\x56\x5a\x13\xae\xba\xb7\x12\x77\xa5\x72\x74\x7d\x75\x55\x5b\x67\x9b\xdc\xf9\x2a\x52\x98\xf2\x3d\x47\x61\x26\x70\xf7\xfa\x26\xe9\x9f\xbf\xbb\xc7\x87\xa0\xc9\x1f\x28\xe1\xde\xe5\xb4\x49\x14\xef\x72\xd6\x53\x18\x0c\x7b\x85\x3d\x49\x6a\xce\xb4\x57\x16\x51\xb5\x61\xd5\x1e\xef\x35\xb0\x34\x95\xa5\x30\x50\xea\xea\x50\x73\x75\xa9\x09\x6d\xc4\xc6\x1d\x1a\x7e\x7c\xa8\x22\xe1\x67\x76\x73\x19\xfa\xfe\x5d\xd4\xde\xa3\xff\xf0\x7e\xd4\x3e\xc7\xbd\xad\x0e\xe9\x81\xe9\xf0\xeb\x3f\x41\xf4\x67\x3a\xc6\x55\x28\x28\x11\xce\x37\xd7\x57\x67\xef\xca\x9b\xa3\x49\xb7\xcd\xe8\x27\x34\xbd\xca\xda\xf4\xbb\xf6\xc3\x0a\x13\xb5\x2f\xef\xb5\x97\x92\x23\xaa\x3d\xec\xc0\x78\xc1\xd6\x05\x8e\x1b\xc0\x45\xee\x49\x40\x26\x51\x03\x75\xd2\xf6\x92\xce\x5a\xa3\x7d\x20\xdb\x93\x05\x08\x9c\x04\xa8\x8e\x7b\x75\x7d\x5d\x7a\x70\xa9\x14\x86\x55\x51\xe7\x06\x77\xe4\xdb\xb6\x94\xbc\x89\x45\xcc\xe8\xea\x74\xfb\xae\x82\xd4\x43\x98\x1d\x0f\x91\x68\xa3\x23\x2c\x06\xd6\xbb\xd1\xbf\xc3\x4f\x3b\x23\x87\x37\xfb\x43\x65\xdd\xbf\xd2\x4b\x01\x53\x6a\x4a\x3e\x3a\x77\x46\x84\x1a\x87\xd9\x31\xde\xa0\x79\x66\x7b\xb6\xe6\x05\x37\xa7\x68\xc0\xc1\xed\x27\x98\xae\xa8\xa3\x9d\xc7\xbb\x21\x21\x57\x71\x5e\x9b\xa9\x4b\xf7\x8e\xf3\xdf\xa3\x0e\x6c\xdb\x65\x3f\xd3\xcd\x8e\x6e\x86\x9b\x60\x4f\xb7\x71\xc0\xab\xbf\x20\x18\x55\x6a\x33\x94\x1c\x64\x62\x43\x8c\xe4\x7a\x42\x72\x84\x6f\x6f\x56\x95\x63\x03\xbc\x88\x1b\x48\xb7\x98\xbe\x68\x8a\xfd\x1a\x73\xa9\xea\x1b\x1a\x95\x02\x6e\x7c\x5e\xaf\x02\x9c\x06\x1a\x3b\x5c\xec\x74\xc4\x9d\xf2\x9f\x24\x96\x46\xdc\x17\x3f\xd5\x66\xc3\x95\xfd\x62\x12\x70\x8b\xe5\x95\xc1\xef\x69\x30\x85\x44\xbb\x61\xd2\xf7\xf0\x45\x84\x36\xa4\x04\xb0\xb7\xa3\xb7\xe5\x7b\xdf\xdc\x86\xb4\xbb\x45\x7e\x0d\x72\x9f\x55\x82\xda\xf3\xde\x9f\xaf\x3f\x2e\xa1\xf2\xb8\xab\xe1\x23\x3f\x3b\x2c\x52\x55\x1a\xc6\x9a\x1d\x30\x7a\x7c\x70\x92\x5e\x47\xdf\xb3\x32\x28\x88\x96\x4a\x2e\x7c\x71\xa5\x32\x47\x24\xfd\xdf\x00\x00\x00\xff\xff\xc6\x71\x26\x35\x28\x16\x00\x00"

func roxitemsCdcBytes() ([]byte, error) {
	return bindataRead(
		_roxitemsCdc,
		"RoxItems.cdc",
	)
}

func roxitemsCdc() (*asset, error) {
	bytes, err := roxitemsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "RoxItems.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd3, 0x71, 0xfc, 0x58, 0x92, 0x4e, 0xa4, 0x7f, 0xec, 0xd2, 0xbe, 0xb9, 0x66, 0x2f, 0x49, 0xab, 0xc6, 0xcb, 0x92, 0x65, 0x7c, 0x77, 0xcc, 0x90, 0x39, 0x19, 0xcd, 0xe7, 0x80, 0xa3, 0x2b, 0xb9}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"NonFungibleToken.cdc": nonfungibletokenCdc,
	"RoxItems.cdc":         roxitemsCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"NonFungibleToken.cdc": {nonfungibletokenCdc, map[string]*bintree{}},
	"RoxItems.cdc": {roxitemsCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
