// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../contracts/NonFungibleToken.cdc (4.968kB)
// ../../../contracts/RoxContract.cdc (6.299kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _nonfungibletokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x41\x8f\xdb\xb8\x0e\x3e\x37\x40\xfe\x03\xdb\x02\xaf\x33\x45\x26\x79\x87\x87\x77\x08\x50\xbc\xbe\xed\x34\x40\x2e\xb3\xc5\x6c\x16\x7b\x28\x0a\x44\xb1\xe8\x44\xa8\x2c\xb9\x92\x9c\x34\x5b\xcc\x7f\x5f\x90\x92\x65\x3b\xc9\xcc\x4e\x4f\xbb\x87\xed\xc4\x96\xc8\x8f\x1f\xc9\x8f\xf4\xec\xed\xdb\xf1\x68\x3c\x7a\xfd\x1a\x56\x3b\x84\x85\xb6\x07\xb8\xb3\xe6\x66\xd1\x98\xad\xda\x68\x84\x95\xfd\x8a\x06\x7c\x10\x46\x0a\x27\xd3\xd1\xf5\x9d\x35\xed\x09\x3e\xb0\x86\xc2\x9a\xe0\x44\x11\x40\x99\x80\xae\x14\x05\xd2\x59\xb2\x99\x1f\x40\xd8\x89\x00\x42\x6b\x30\xd6\xdc\x94\xad\x87\xc0\x1e\xda\xfb\x1e\x0a\xdb\x68\x49\xbf\x4b\xeb\x2a\x08\x76\x3a\x1e\x2d\x4b\x10\xd0\x78\x74\x70\x10\x26\x78\x08\x16\x24\xd6\xda\x1e\x41\x80\xc1\x03\x98\x32\x64\x03\x13\x08\x3b\x54\xae\x03\x74\x60\x7b\x06\x51\x8e\x47\xc1\x82\xaa\x6a\x8d\x15\x9a\x40\xe7\xe0\x34\x90\x0e\xed\x34\xe1\x3f\x37\xb5\x13\x7b\x42\x0d\xa5\xd5\x44\x17\x05\x44\xa6\x5c\xa3\xd1\x83\x30\x12\x8c\xa8\x94\xd9\x8e\x47\x1c\x6f\x18\x50\xe0\x6b\x2c\x54\xa9\xd0\x4f\x33\x95\x8b\xd5\x1a\x1c\x7a\xdb\xb8\x8e\xb3\xc2\x3a\xcc\x0f\x21\x1c\xeb\x44\x9e\xc3\xda\xa1\x47\xe2\x40\x18\xb8\x5b\xac\x40\x19\xf6\xe0\x2b\xe1\x3a\x0e\xb2\xf1\x0f\x56\x6b\x2c\x82\xb2\x66\x0d\xf7\x27\x3e\x3a\xf3\x64\xd9\x07\xeb\x08\x3e\xd3\xfc\xc6\xb3\xed\x22\xdf\xa6\x1c\x50\x6a\x0b\xdd\x48\x3e\x55\xe2\x01\xca\xc6\xf0\x4b\xce\x87\x60\x2e\x08\x8a\x3d\x18\x74\xf4\x08\x85\x57\xfa\x38\x1e\x55\x76\x9f\xb2\xec\x09\x2e\x31\x64\x9b\x00\xb6\xe4\xe3\x03\x27\x11\xf5\x27\x67\xf7\x4a\xa2\x5b\xf3\xd9\xf5\x3d\x16\xa8\xf6\xf4\x33\x43\xce\x84\xfa\x14\x8d\xef\x3f\x03\x89\x85\x16\x0e\x7b\x08\x0f\x2a\xec\xc0\xdb\x0a\xa1\x76\xc8\x66\x6b\xeb\x99\x30\xa9\xf8\x44\xca\x96\xc3\x6f\x8d\x72\xc8\xc8\x3a\xf2\x7a\xd9\x2e\xd0\x05\xa1\x4c\xca\x31\x5b\xda\xe0\x4e\xec\x95\x75\xb9\x4b\x7c\x5b\x3b\x47\x20\x14\x1e\x6b\xe1\x44\x40\xd8\x60\x21\x1a\x42\x1a\x60\xab\xf6\xe8\xd9\x0b\x97\x35\xfd\x21\x36\x4a\xab\x70\x24\x5f\x7e\x47\xf7\x04\x38\x2c\xd1\xa1\xa1\x9c\x05\x9b\xea\xba\x8f\x8a\x10\x5b\xa3\x8f\x80\xdf\x6b\xeb\x93\xc1\x52\xa1\x96\xb1\x10\xbb\xf8\x95\x01\x6b\x10\xac\x83\xca\x3a\x1c\x8f\x12\xf9\x1d\x67\x53\x58\x52\x6f\x7a\x9b\xa0\x11\x2c\x7f\x8a\xab\x12\x5f\x11\x8a\xc6\x07\x5b\xe5\x5c\xb4\xcc\x0d\xfa\x6a\x98\x0e\x6a\x57\x0b\x7b\xe1\x94\x6d\xc8\xa6\x32\xdb\x94\x11\xb2\x1f\x2b\x83\x29\xfb\xe5\x08\x8d\x27\x5a\xb3\x71\x0e\xa3\x33\x35\x49\xb8\x6c\xc9\x05\x3a\xac\x7a\x0f\x85\x30\xe0\xd1\xc8\xf1\x88\xae\xb9\x58\x37\x6d\xe9\xd5\x88\xee\x26\xd8\x1b\xfa\x77\xc2\xee\xa9\x0a\x29\x75\x66\x4b\x10\xd9\x0b\x77\x39\x21\x13\x50\x20\x99\xd5\xa0\x51\x6e\xd1\x8d\x47\x17\x5a\x6c\x65\xd9\x5d\xdb\x8b\xd4\x06\xc6\x86\x1d\x3a\x86\x39\xc9\xa2\xc5\xb2\xe1\x89\xa1\x23\x5b\x97\x4e\xc4\x5e\xb9\x5b\xac\xc6\xa3\xd2\xd9\xea\x2c\xb9\x2c\x63\x06\x8a\x56\x5d\x24\xd6\xd6\xab\x90\x53\x0a\xd6\x0c\x9c\xbd\xf1\xe3\xd1\xb0\x60\x0b\x4b\x19\x09\xb1\x96\x83\x13\xc6\x97\xe8\x18\xf6\xdb\x19\xfd\x7f\x36\x63\xc9\xaf\xa8\x9a\x63\xb7\x9f\x2a\xf8\x14\x7e\x65\xfb\xfd\xb7\x94\x38\xad\xf9\xb6\xaa\x6a\xeb\x42\xcc\x50\x2f\xf9\xca\xf7\x67\xc0\x6c\x36\x1e\xd5\xcd\xe6\x82\xf5\x73\xed\xfd\x41\xb0\x00\x00\x12\xb4\x60\x83\xd0\x60\x9a\x6a\x83\x8e\xe5\x22\x26\x92\x6b\x57\xf9\x28\x8b\xca\x00\x7e\x57\x3e\xc4\x2e\xa1\xcb\xe4\x6d\x2f\x5c\xbc\xfd\x5b\x53\xd7\xfa\x38\x87\xdf\x97\x26\xfc\xf7\x3f\x3d\xfb\x1f\xf7\x11\xad\x08\x80\x95\x0a\x01\x25\x1c\x88\xf0\x94\x95\x1e\x5e\x0a\x47\x05\x25\xb4\xfa\x93\x46\x48\xbc\xdf\xb9\x42\x36\xf4\x21\x1d\x5f\x76\x47\xaf\xae\x2f\xbb\x53\x7e\xe8\x51\xa4\x09\xa8\x7c\xae\x0d\x33\xc9\x17\x95\x91\xaa\x10\x81\x6b\x34\x8b\xeb\x99\x74\x26\xcb\x01\x0e\xa2\x67\x05\xa8\xb2\xa6\x43\xc8\xb3\x19\x2c\xcf\x6e\x2b\x0f\xc6\x86\x28\xce\x20\x8a\xc2\x36\x26\xbc\xf1\x3c\x13\xc4\x16\x27\xb0\x26\x43\x6b\xce\x3c\x6c\x10\xd6\x46\xe9\xf5\xf4\x31\x2a\xfe\x48\xee\xaf\x94\x6c\x79\x9f\x30\x92\x39\xfc\x5f\x4a\x87\xde\xff\xef\x11\x66\x1e\xa3\x25\xd5\x3e\x4a\xee\xb0\xe1\xc4\x38\x8d\x2d\xb4\x8c\x25\x35\x7c\x0e\x61\x7d\xfb\x8f\x86\x75\x1b\x0f\x0d\xa2\x0a\xf6\x72\x4c\xcb\xe1\xca\x93\x6a\xca\xe7\xcd\xa1\x5b\x6e\xce\xbd\x9d\xcf\x38\x58\x52\x41\xfe\x88\x47\x7a\xed\xd1\x18\xf5\xad\x41\x58\xde\x26\xf6\x44\xb1\xe3\xd2\xdd\x09\xdf\x9d\x25\x93\x1a\x03\x74\xb0\xe3\xbb\x87\x1e\xdc\xfb\x38\xf4\xaa\x9c\x08\x12\x9d\x84\x91\x0a\xef\x92\xd4\x52\x28\xd9\x00\xef\x63\xa5\x32\x71\x66\x25\xfc\x24\x5d\x28\xa3\x30\x92\xd1\x64\x90\xc7\xc1\x92\x85\xef\x2c\xe4\xbb\xc5\x6a\x7e\x16\xed\x73\x22\xe8\x11\x6e\xa1\x42\xa9\x68\xdc\xb6\x7d\xe0\xa1\x55\xd8\x9e\xbe\x3e\x8b\xf8\x76\x11\x39\x21\x3f\x4b\xb8\x43\xda\x6d\xf2\x2e\x96\xdd\xf4\xea\x8c\xd4\x31\x1e\x52\x01\xe2\x10\x8f\xcc\xb8\x61\x84\x65\x63\xb2\xdd\xab\xf6\x8f\xe5\x6d\x1b\xf2\xf5\x1c\xde\x9f\xf0\xc2\x37\x69\x89\x39\x79\x46\xff\x39\xf4\x8d\x0e\x53\x25\xe1\xdd\x3b\xe8\x5b\x7b\x45\x85\xb3\xbc\x6d\x1b\xa2\x93\x8a\xd8\x6c\x55\xe3\x03\x75\x38\xaf\x94\xa2\x42\x10\xb1\x8b\x68\x2d\x42\x4f\x1d\xb2\xbc\x7d\x35\x74\xf7\xd0\xfd\x7c\x78\x66\x62\x52\xbf\xf9\x96\x8f\x9f\xcc\x4a\xbb\x0f\x76\xf3\x22\x39\x6b\x67\x64\x10\x5f\xbb\xa4\x08\xfe\x4b\xb8\x6d\xc3\xf5\x4d\xf9\x10\x52\xf6\xd3\x71\xea\xbe\x85\xf0\xe2\x45\x9b\x98\x64\xf8\x8a\x49\x8a\x99\xb8\x7e\x32\x56\x6e\xa2\x2c\xa5\x69\x01\x28\x6c\x55\xf1\xb6\x96\x6f\xd4\xcd\x46\x2b\xbf\x83\xd2\xba\xfc\xd5\x32\xc4\xf2\x08\x05\x1d\xe4\x4f\x64\xa2\x38\xed\x97\xa7\x41\xf7\x4f\x6d\x31\x2c\x6f\xfd\xd5\xf5\x1c\x3e\xc7\x4a\xfb\x72\x7e\x66\x63\x9d\xb3\x87\xbb\xc5\xaa\x27\x7e\xd7\x73\xf8\x57\x6e\xe2\xc7\xc4\x24\xc5\x95\x7a\xc2\x14\x8e\xd6\x91\xc1\x67\x4d\x5f\x42\x36\xd8\x2e\xee\xb2\xfd\xac\xc9\x7b\x05\xc9\x50\x2b\x3e\x4f\x14\x49\xc7\xcb\x3c\x37\xef\x24\x17\xcc\xe4\x22\x6f\x83\x12\xba\x55\xfc\x56\x38\xde\x77\x77\x56\xcb\x4e\xbd\x13\xa6\x4b\xe5\xd2\xee\x1c\x34\x6d\x24\x1d\x9e\xc3\xfb\x1f\x91\xa8\x39\x5d\x7e\x38\x71\xf3\xcf\x29\xc8\xd3\x2d\x13\x3b\xe6\xbc\x45\x3a\x38\x1e\x64\xa6\x68\x60\x29\xdf\x0a\x51\x61\xd2\x4d\x25\x41\x38\x27\x8e\xcf\xad\xcf\x81\xcd\x58\x9c\xe0\x30\x34\xce\xa4\x3e\x76\xe2\xd8\xaa\x17\xbd\x8b\xad\xe6\xb0\xcd\xce\x69\x03\xfd\x5d\xad\x0f\xfc\xdd\xb7\x8e\x52\xc9\xa3\xec\x3e\xc1\xe2\x76\xdf\xff\xe6\xbe\xe4\x6a\x36\x03\x6f\xbb\xa9\x1f\xf3\xc4\xdf\x25\x0e\x85\x04\x29\x82\x60\xa6\x78\xaf\xaf\x30\xec\xac\x4c\xe3\x49\x85\x9f\x6a\xbc\xb3\x49\xe0\xf0\xd2\x20\xf0\xa8\xcb\x69\xae\xca\xcf\x4a\x7e\x81\x97\xef\xc0\x28\x3d\x87\x57\x64\x45\x5a\x8c\xbb\x1f\x2f\xd1\xe7\x91\xbd\xfc\x29\xb5\x2f\x1c\x8a\x80\x1f\xab\x3a\x1c\x7b\xdf\x22\xf1\x29\xa7\x0f\xe9\xd5\x05\xbd\x87\xf8\xbd\x16\xd9\x3f\x2d\xf3\x3e\xa3\x47\xe6\xd2\x1e\x38\x11\xbe\x53\x00\x62\xeb\xa2\x77\xca\xf6\xfb\x1e\x98\xbe\x50\x5e\x18\x9e\x69\x70\xb6\x95\x32\xd5\x68\xb6\x61\x47\x53\xf4\xdf\x69\x78\x46\x2f\xb2\xdf\xa1\xed\xd4\xe4\xe8\xfa\x8c\x75\x14\x3d\xfc\x15\x00\x00\xff\xff\xd5\xbe\x00\xcf\x68\x13\x00\x00"

func nonfungibletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_nonfungibletokenCdc,
		"NonFungibleToken.cdc",
	)
}

func nonfungibletokenCdc() (*asset, error) {
	bytes, err := nonfungibletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "NonFungibleToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdb, 0xf, 0xd7, 0xfa, 0xf8, 0x7, 0xd8, 0xf7, 0xa, 0xb6, 0x12, 0xce, 0x79, 0x51, 0x18, 0xed, 0xc5, 0x9e, 0x39, 0xb8, 0xfc, 0x2c, 0x47, 0x69, 0x56, 0xfc, 0x55, 0x77, 0xfb, 0x35, 0xcf, 0x74}}
	return a, nil
}

var _roxcontractCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x5b\x6f\x1b\xb9\x15\x7e\x4e\x80\xfc\x87\x13\x3f\x24\x33\xa8\x2c\x6d\x77\x8b\x3e\x08\x56\x9d\x20\x5e\x2d\xf4\x50\x21\x48\x54\xec\x43\x10\x14\xd4\xf0\x8c\x44\x78\x44\x0a\x24\x47\xb6\xea\xf5\x7f\x2f\x0e\x39\x17\x72\x2e\xb6\x9b\xae\x10\xc4\x33\x43\x9e\xef\xdc\x2f\xa4\x38\x1c\x95\xb6\xb0\x56\x72\x59\xca\x9d\xd8\x16\xb8\x51\xb7\x28\x21\xd7\xea\x00\x17\xdd\xcf\xd3\x8c\x67\x17\x6f\x5e\xbf\x79\x7d\x2c\xb7\x90\x29\x69\x35\xcb\x2c\x7c\x51\xf7\x9f\xaa\xe7\x79\x1f\xe9\x81\xf6\x03\x00\xcc\x66\xf0\xeb\x09\xa5\x35\xfe\x95\x20\x90\xde\xa1\x26\x5e\x49\x61\x05\x2b\xc4\x7f\x90\x27\x69\x77\xd3\xef\xc2\xee\xb9\x66\x77\x89\xe0\x73\xf8\xd7\x4a\xda\xbf\xff\x6d\xe2\xa4\x9c\xc3\x47\xce\x35\x1a\x73\xdd\xa3\xb9\xc1\xa3\x32\xc2\x46\x24\x56\x3d\x41\xf0\x4f\x21\x2d\xf2\x68\xbf\x56\xf7\x2b\x3e\x87\xaf\x56\x0b\xb9\x4b\x03\x5d\xd6\xec\x80\x1c\x3e\x33\xbb\x0f\x14\x2a\x90\xd4\x29\x0a\xcc\xac\x50\xf2\xab\x55\x9a\xed\x90\xf6\x10\x42\xf3\x32\xb6\xff\x73\xb9\x2d\x44\xe6\xb7\xb7\xcf\xf1\x6e\x27\xa2\x1e\x47\x6e\xe4\xdb\xec\x11\xac\xb2\xac\x00\x59\x1e\xb6\xa8\x41\xe5\xb0\x5e\x6e\xc0\xee\x99\x85\x3d\x3b\x21\x6c\x11\x25\x1c\x9c\xca\x2d\x8f\x13\xd3\x9e\xec\x6b\x79\x3c\x16\xe7\xda\x10\x7e\x43\xbc\xcd\xe3\x7a\x9b\x7d\x46\x5d\xeb\xb1\x2d\x70\x0e\x0f\xde\x60\x9e\xfc\x97\x9f\x1f\x43\xc3\x2d\x37\xcd\xf3\x47\x0a\x1e\x58\x59\x3c\x00\x33\xc0\x64\xbb\x48\x4c\x34\x1a\x55\xea\x0c\xe9\x6b\x3f\xb2\xa6\x2b\x52\xe7\xc1\x6f\x8f\x94\xbe\x45\xf9\xde\xc0\xea\xa6\x5d\xaa\xad\xd7\x7a\xb6\xbf\x16\x79\xba\xbf\x6c\x05\xea\xf1\x55\x32\xe3\xda\xd9\xa3\x56\xb9\xd6\x98\x7e\x42\x52\x14\x4a\x61\x57\x37\x23\x91\x35\x89\xf0\x27\x03\x78\x69\xa8\x2a\xfd\x0c\x16\xf9\x54\x70\x58\x80\x47\x1e\x58\x75\x2c\x60\xe1\x59\x0d\xac\x13\x4f\x58\x38\xd6\x03\xab\xad\x0c\xb0\x08\x04\x6a\x77\x3e\xfa\xc7\xc6\xb9\x91\xcf\x5c\x9c\xe6\x2c\xc3\x20\xc0\xbf\xa8\x7b\x1f\xd7\xa1\x2e\x44\x95\x97\x12\x78\x95\xad\xce\x7f\x73\xf8\xd0\xf3\xf7\x7a\xb9\x49\xfb\x64\x3b\xb4\xab\x1b\x93\xa4\x73\xf8\xe6\x2d\xfb\xbd\xbf\x67\xab\xb4\x56\x77\xeb\xe5\x26\x48\xed\x74\x0e\xef\x86\x58\x8c\x51\x7f\x51\xf7\xeb\xdc\x76\x00\x82\xd2\x47\xb4\xd7\x5d\x1f\xcd\x66\xb0\xca\xc1\xee\x91\xec\x52\x16\x16\x84\x91\xef\x2d\x48\x51\x4c\xdc\x57\xc1\x29\x2d\xfd\xba\x2d\xb5\x44\x0e\x1a\x73\xd4\x28\x33\xec\x21\x99\xbd\x2a\x0b\x0e\x5b\x74\x04\x86\x1d\x90\x92\x86\x9e\x99\xde\x95\x07\x2a\x60\x56\xb9\xf7\xbc\x94\xce\xde\x31\xc4\x51\x19\xdb\x15\x90\x7e\x49\x25\xdb\x62\x41\x82\xa5\xf0\xc7\x1f\xf5\xa7\x6b\x17\x5f\x0b\x10\x3c\x9d\xf7\xe9\xe8\x77\xf1\x89\x49\xa9\x6c\x65\x23\x97\xcd\x8d\x02\x73\x97\x8e\xab\x9b\x71\x15\x41\x18\x10\x32\x53\x5a\x63\x66\x2f\x62\x0e\x8f\xc3\x71\x36\x10\x69\x6d\x7c\xcd\x87\x62\x6d\xd2\xaf\x1c\x9f\xb5\x3a\x09\x8e\x7a\x60\xe9\x0b\x66\x28\x4e\x83\x4b\xdd\x42\xdd\xb6\x36\x08\xaa\xa2\xba\x93\xc8\xd7\xcb\x8d\x99\xc3\x87\x07\x1f\x29\x03\xb5\x6b\xbd\xdc\x3c\x76\xa9\x29\xd6\xee\xea\x36\x57\x3f\xb4\x15\x23\x1d\xc9\x89\xae\x4b\x5d\xb1\x72\xad\xf7\xea\xd2\x27\x72\x23\xd2\x54\xe3\x41\x9d\x30\xb9\xc5\xf3\x1c\x5a\x0e\x29\x5c\x5f\xc3\x91\x49\x91\x25\x17\x07\x61\x8c\x90\x3b\x2a\xb9\x17\x69\x28\x21\xfd\xf0\x20\x3a\x9d\xd8\x31\x9a\x0a\x5e\xf7\xe2\x86\x9f\xbe\x9e\x32\xdf\x66\x7b\x28\x3e\x0e\xe0\xea\xd2\x11\x47\x6e\xfe\xc1\xaa\xf0\xa4\x09\xfc\x03\x33\x6f\xe1\x43\x27\x5d\xbb\x82\xc5\x1d\x82\x0a\x63\xa5\x5d\x77\xe3\x6c\x06\x8c\x73\x17\xd4\x12\xef\x2a\x0e\x55\xee\x71\xe1\x42\x84\xe9\x33\xdc\xed\x45\xb6\x07\x6f\x73\x9f\xa8\xaa\xe0\xa0\x24\xf6\xd9\xaa\x82\x6f\x86\x7d\xf6\x4d\xf0\xef\x8d\x1a\x83\x0e\x09\xc7\x1c\xf2\x04\x8d\x38\x2f\xf1\x03\x47\x63\xb5\x3a\x37\xbc\x9f\xf1\x44\xbf\xd0\x76\xcd\x5e\x39\xb6\x13\x73\xb7\x78\x36\x23\xd0\xb3\x59\x5b\x9a\xa3\xaf\xbf\xa1\x35\xc0\x82\x42\x61\x55\x35\x1d\x80\x90\xce\x92\x59\x93\x8c\x11\xa1\x51\x7e\xc0\x71\x5b\x58\x51\xa0\x86\x8c\x49\xd0\xc8\x38\x08\x6b\xe0\x80\x96\x71\x66\x19\x30\xc9\xdd\x86\xfa\xeb\x5e\x71\xf3\xff\x35\x8e\x11\x6b\xbc\x1b\x70\x27\x33\xcf\xf5\x9e\x61\x33\xf9\x1e\xf4\xc3\x96\x72\x33\x16\x78\x90\x49\x84\x82\xf7\x14\x42\x72\x07\x64\x11\x95\x3b\xa3\xe4\x02\x0b\x6e\x20\x11\x32\x2b\x4a\x4e\x8b\x84\x66\xcf\x47\x5c\xdd\xa4\xd3\xce\xd8\x45\x85\xdc\x80\x61\x79\xdd\x93\x34\x75\x25\x04\xa9\x9a\x66\x64\xbc\x67\xc8\x1d\xdb\xca\x39\x94\x0c\x0e\xd5\xcb\x34\xfd\x53\x7b\xaf\xc8\x87\x32\xe9\xad\x6b\x72\x43\x6d\xd0\xcd\x80\x98\xc3\x62\xcc\x65\xac\xb4\xfb\xe7\xfc\xd6\x71\x3e\xe1\x51\xe5\xe9\x0a\xdb\x69\x75\x80\x85\xc1\x21\x99\x2a\x18\x29\x8a\xa7\x9a\x63\xfb\x52\xa5\x74\xd2\xab\x88\x75\xae\xc7\x9a\x8d\xa0\xd0\x3c\x09\x7d\x8c\x98\x96\x6a\xd2\xc3\x48\x93\x0e\x3d\x98\x69\x64\x16\x7f\x3d\x1c\xed\xb9\x6d\xa0\xc9\x60\x33\x6b\xd7\x43\xd6\x4d\xbb\xa8\xa0\x20\x84\x09\x98\xbe\xea\x1e\x19\xfc\x51\xc9\x77\xe9\x57\xaf\x6a\x79\xdc\x20\xbb\xdc\x24\x1a\x33\x71\x14\x28\xed\x1c\xde\x3d\x3c\xdb\xeb\x1f\x9f\x9c\xd7\xd3\x78\x14\x80\xba\x32\x07\xe7\xc9\x30\x00\x82\xf3\x55\x03\xeb\xfe\xf4\x4a\x74\x7b\xcc\x8a\x0f\x58\xb0\x88\x00\xc7\x4f\x62\xdf\x1c\xee\xf7\x5e\x66\x24\xc3\xa8\x7e\x02\x1c\x08\xc4\x11\x21\x7e\xea\xef\xfc\x9f\xe4\x82\xc5\x20\x72\x2f\xd8\x7b\xed\xb7\x1a\x0b\x80\xfe\xc9\x6a\xba\xac\xfc\xf9\xde\x00\xcb\x32\x55\x4a\x0b\xa5\xa9\xca\x96\xd0\x63\x73\x75\x43\x36\xed\x4c\x1a\x57\x97\x55\xb8\x75\x52\xb7\x39\xc7\xbd\xc8\xa3\x75\x9c\xd0\xff\xf1\xa9\x6e\x48\xef\xb7\x69\x2f\x02\x46\xb8\x74\x02\x20\x5c\xf9\x0b\x24\x7f\xa5\x72\x55\x55\xca\x71\xb8\x1f\xf5\xce\xdb\x88\xc5\x2f\x3f\xa7\x94\x5e\x8f\x6f\x5e\xbf\x0a\x4f\xf9\x39\xda\x6c\xdf\xbc\xfd\x86\xb6\xd7\xa4\xaa\xa2\xef\xaf\x9a\x98\xac\x9d\xf6\xde\x04\x09\x3e\xa1\x58\x65\x27\x26\x0a\xb6\x2d\x70\xda\xe0\xad\xf2\x80\x02\xb8\x42\x03\x74\x0a\x71\xd7\x1a\x2c\x52\x32\xc4\x72\x23\x6e\x04\x22\x88\x86\x9a\x62\xd0\x24\xb7\x65\x80\x98\x29\x69\x59\x15\x61\xc2\xe2\x81\x3c\xda\x16\xe5\x67\xb1\x68\xca\xf0\x5d\xaf\xfd\x56\x41\x9a\x21\xcc\x8e\x8d\x88\xb4\xe1\x11\x97\x55\x67\xdf\xe4\xdf\xf1\x15\xd8\xc4\xe3\xdd\xbc\xb4\x4d\x52\xcb\x0b\x24\x5b\xd0\x8c\xf7\xd1\x1b\x35\x21\xe0\x4e\xf0\x4c\x77\x68\x3f\xb1\x23\xdb\x8a\x42\xd8\x73\x32\x6c\xe6\xf6\xe2\xaa\x4b\xed\x7b\xf9\xd5\xbb\x61\xba\x87\xe1\xcf\xcd\x31\xee\xf1\x1f\x49\x07\xb0\x3d\xb4\x7c\xa2\x83\x31\x1d\xac\x77\x91\x42\x17\x69\x34\xa5\xfc\x8e\x60\x75\x69\xec\x48\x7c\x90\x7c\x6e\xd4\x70\xd7\x51\x56\x39\x30\x3f\x40\xb9\xf3\x69\x65\xdb\x08\x32\x11\x16\xb2\x3d\x66\xb7\x86\xdc\xbf\xc5\x5c\xe9\xfa\x9c\x4b\x95\x47\xd8\x70\x50\xaa\x7c\x9c\x45\x1c\xe3\xe9\xc6\xb3\x88\xba\x9a\xbb\x3b\x8a\x7a\xb1\xeb\xc3\x83\xb7\x8c\xb0\x80\x99\xf1\xaf\x33\xa7\x64\x7f\x46\xee\x10\xb7\xde\x22\xda\xa3\x7b\x7b\x92\xb4\x77\xff\xd8\xe1\xe9\xd7\xc3\x2a\xe6\x6f\x9a\xa2\xd2\xf5\x53\x67\x75\xbc\x12\xc1\xc2\x0d\x19\x71\xc8\x1e\x7c\x63\x6f\x27\x82\xa6\xd9\x87\x21\xe2\x90\xab\x12\x31\x35\xec\x84\xc9\xd5\xa5\xa7\x0c\x8e\x48\x3d\x75\xd2\x2e\xb3\x20\x3f\xae\x2e\xa3\xd0\x19\x99\x6c\x9e\x96\x20\x0b\xea\x11\x49\x31\x1c\x8b\xb1\x40\x83\x78\x85\x90\xb7\xa3\xb9\xf4\xec\x3c\x33\x19\x61\x1c\xa6\xdb\x73\xf9\x3d\x01\xcb\xf4\x0e\xed\xcb\x94\x68\xd5\x70\xa3\xd1\xc8\xa5\x3f\xf5\x10\x9a\x24\xdf\xbc\x86\xff\x06\x00\x00\xff\xff\xd6\x17\x80\x8e\x9b\x18\x00\x00"

func roxcontractCdcBytes() ([]byte, error) {
	return bindataRead(
		_roxcontractCdc,
		"RoxContract.cdc",
	)
}

func roxcontractCdc() (*asset, error) {
	bytes, err := roxcontractCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "RoxContract.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb0, 0xed, 0xde, 0x64, 0x57, 0xba, 0xbd, 0x6b, 0x55, 0xa7, 0xfc, 0xf0, 0xd3, 0xab, 0x7, 0xaf, 0xe5, 0x51, 0x77, 0x4f, 0xcc, 0xe5, 0xe1, 0x2, 0xb9, 0xa2, 0x26, 0x4, 0xc4, 0x6, 0x67, 0xf1}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"NonFungibleToken.cdc": nonfungibletokenCdc,
	"RoxContract.cdc":      roxcontractCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"NonFungibleToken.cdc": {nonfungibletokenCdc, map[string]*bintree{}},
	"RoxContract.cdc": {roxcontractCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
