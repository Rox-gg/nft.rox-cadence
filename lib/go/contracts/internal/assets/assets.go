// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../contracts/NonFungibleToken.cdc (4.968kB)
// ../../../contracts/RoxContract.cdc (8.497kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _nonfungibletokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x41\x8f\xdb\xb8\x0e\x3e\x37\x40\xfe\x03\xdb\x02\xaf\x33\x45\x26\x79\x87\x87\x77\x08\x50\xbc\xbe\xed\x34\x40\x2e\xb3\xc5\x6c\x16\x7b\x28\x0a\x44\xb1\xe8\x44\xa8\x2c\xb9\x92\x9c\x34\x5b\xcc\x7f\x5f\x90\x92\x65\x3b\xc9\xcc\x4e\x4f\xbb\x87\xed\xc4\x96\xc8\x8f\x1f\xc9\x8f\xf4\xec\xed\xdb\xf1\x68\x3c\x7a\xfd\x1a\x56\x3b\x84\x85\xb6\x07\xb8\xb3\xe6\x66\xd1\x98\xad\xda\x68\x84\x95\xfd\x8a\x06\x7c\x10\x46\x0a\x27\xd3\xd1\xf5\x9d\x35\xed\x09\x3e\xb0\x86\xc2\x9a\xe0\x44\x11\x40\x99\x80\xae\x14\x05\xd2\x59\xb2\x99\x1f\x40\xd8\x89\x00\x42\x6b\x30\xd6\xdc\x94\xad\x87\xc0\x1e\xda\xfb\x1e\x0a\xdb\x68\x49\xbf\x4b\xeb\x2a\x08\x76\x3a\x1e\x2d\x4b\x10\xd0\x78\x74\x70\x10\x26\x78\x08\x16\x24\xd6\xda\x1e\x41\x80\xc1\x03\x98\x32\x64\x03\x13\x08\x3b\x54\xae\x03\x74\x60\x7b\x06\x51\x8e\x47\xc1\x82\xaa\x6a\x8d\x15\x9a\x40\xe7\xe0\x34\x90\x0e\xed\x34\xe1\x3f\x37\xb5\x13\x7b\x42\x0d\xa5\xd5\x44\x17\x05\x44\xa6\x5c\xa3\xd1\x83\x30\x12\x8c\xa8\x94\xd9\x8e\x47\x1c\x6f\x18\x50\xe0\x6b\x2c\x54\xa9\xd0\x4f\x33\x95\x8b\xd5\x1a\x1c\x7a\xdb\xb8\x8e\xb3\xc2\x3a\xcc\x0f\x21\x1c\xeb\x44\x9e\xc3\xda\xa1\x47\xe2\x40\x18\xb8\x5b\xac\x40\x19\xf6\xe0\x2b\xe1\x3a\x0e\xb2\xf1\x0f\x56\x6b\x2c\x82\xb2\x66\x0d\xf7\x27\x3e\x3a\xf3\x64\xd9\x07\xeb\x08\x3e\xd3\xfc\xc6\xb3\xed\x22\xdf\xa6\x1c\x50\x6a\x0b\xdd\x48\x3e\x55\xe2\x01\xca\xc6\xf0\x4b\xce\x87\x60\x2e\x08\x8a\x3d\x18\x74\xf4\x08\x85\x57\xfa\x38\x1e\x55\x76\x9f\xb2\xec\x09\x2e\x31\x64\x9b\x00\xb6\xe4\xe3\x03\x27\x11\xf5\x27\x67\xf7\x4a\xa2\x5b\xf3\xd9\xf5\x3d\x16\xa8\xf6\xf4\x33\x43\xce\x84\xfa\x14\x8d\xef\x3f\x03\x89\x85\x16\x0e\x7b\x08\x0f\x2a\xec\xc0\xdb\x0a\xa1\x76\xc8\x66\x6b\xeb\x99\x30\xa9\xf8\x44\xca\x96\xc3\x6f\x8d\x72\xc8\xc8\x3a\xf2\x7a\xd9\x2e\xd0\x05\xa1\x4c\xca\x31\x5b\xda\xe0\x4e\xec\x95\x75\xb9\x4b\x7c\x5b\x3b\x47\x20\x14\x1e\x6b\xe1\x44\x40\xd8\x60\x21\x1a\x42\x1a\x60\xab\xf6\xe8\xd9\x0b\x97\x35\xfd\x21\x36\x4a\xab\x70\x24\x5f\x7e\x47\xf7\x04\x38\x2c\xd1\xa1\xa1\x9c\x05\x9b\xea\xba\x8f\x8a\x10\x5b\xa3\x8f\x80\xdf\x6b\xeb\x93\xc1\x52\xa1\x96\xb1\x10\xbb\xf8\x95\x01\x6b\x10\xac\x83\xca\x3a\x1c\x8f\x12\xf9\x1d\x67\x53\x58\x52\x6f\x7a\x9b\xa0\x11\x2c\x7f\x8a\xab\x12\x5f\x11\x8a\xc6\x07\x5b\xe5\x5c\xb4\xcc\x0d\xfa\x6a\x98\x0e\x6a\x57\x0b\x7b\xe1\x94\x6d\xc8\xa6\x32\xdb\x94\x11\xb2\x1f\x2b\x83\x29\xfb\xe5\x08\x8d\x27\x5a\xb3\x71\x0e\xa3\x33\x35\x49\xb8\x6c\xc9\x05\x3a\xac\x7a\x0f\x85\x30\xe0\xd1\xc8\xf1\x88\xae\xb9\x58\x37\x6d\xe9\xd5\x88\xee\x26\xd8\x1b\xfa\x77\xc2\xee\xa9\x0a\x29\x75\x66\x4b\x10\xd9\x0b\x77\x39\x21\x13\x50\x20\x99\xd5\xa0\x51\x6e\xd1\x8d\x47\x17\x5a\x6c\x65\xd9\x5d\xdb\x8b\xd4\x06\xc6\x86\x1d\x3a\x86\x39\xc9\xa2\xc5\xb2\xe1\x89\xa1\x23\x5b\x97\x4e\xc4\x5e\xb9\x5b\xac\xc6\xa3\xd2\xd9\xea\x2c\xb9\x2c\x63\x06\x8a\x56\x5d\x24\xd6\xd6\xab\x90\x53\x0a\xd6\x0c\x9c\xbd\xf1\xe3\xd1\xb0\x60\x0b\x4b\x19\x09\xb1\x96\x83\x13\xc6\x97\xe8\x18\xf6\xdb\x19\xfd\x7f\x36\x63\xc9\xaf\xa8\x9a\x63\xb7\x9f\x2a\xf8\x14\x7e\x65\xfb\xfd\xb7\x94\x38\xad\xf9\xb6\xaa\x6a\xeb\x42\xcc\x50\x2f\xf9\xca\xf7\x67\xc0\x6c\x36\x1e\xd5\xcd\xe6\x82\xf5\x73\xed\xfd\x41\xb0\x00\x00\x12\xb4\x60\x83\xd0\x60\x9a\x6a\x83\x8e\xe5\x22\x26\x92\x6b\x57\xf9\x28\x8b\xca\x00\x7e\x57\x3e\xc4\x2e\xa1\xcb\xe4\x6d\x2f\x5c\xbc\xfd\x5b\x53\xd7\xfa\x38\x87\xdf\x97\x26\xfc\xf7\x3f\x3d\xfb\x1f\xf7\x11\xad\x08\x80\x95\x0a\x01\x25\x1c\x88\xf0\x94\x95\x1e\x5e\x0a\x47\x05\x25\xb4\xfa\x93\x46\x48\xbc\xdf\xb9\x42\x36\xf4\x21\x1d\x5f\x76\x47\xaf\xae\x2f\xbb\x53\x7e\xe8\x51\xa4\x09\xa8\x7c\xae\x0d\x33\xc9\x17\x95\x91\xaa\x10\x81\x6b\x34\x8b\xeb\x99\x74\x26\xcb\x01\x0e\xa2\x67\x05\xa8\xb2\xa6\x43\xc8\xb3\x19\x2c\xcf\x6e\x2b\x0f\xc6\x86\x28\xce\x20\x8a\xc2\x36\x26\xbc\xf1\x3c\x13\xc4\x16\x27\xb0\x26\x43\x6b\xce\x3c\x6c\x10\xd6\x46\xe9\xf5\xf4\x31\x2a\xfe\x48\xee\xaf\x94\x6c\x79\x9f\x30\x92\x39\xfc\x5f\x4a\x87\xde\xff\xef\x11\x66\x1e\xa3\x25\xd5\x3e\x4a\xee\xb0\xe1\xc4\x38\x8d\x2d\xb4\x8c\x25\x35\x7c\x0e\x61\x7d\xfb\x8f\x86\x75\x1b\x0f\x0d\xa2\x0a\xf6\x72\x4c\xcb\xe1\xca\x93\x6a\xca\xe7\xcd\xa1\x5b\x6e\xce\xbd\x9d\xcf\x38\x58\x52\x41\xfe\x88\x47\x7a\xed\xd1\x18\xf5\xad\x41\x58\xde\x26\xf6\x44\xb1\xe3\xd2\xdd\x09\xdf\x9d\x25\x93\x1a\x03\x74\xb0\xe3\xbb\x87\x1e\xdc\xfb\x38\xf4\xaa\x9c\x08\x12\x9d\x84\x91\x0a\xef\x92\xd4\x52\x28\xd9\x00\xef\x63\xa5\x32\x71\x66\x25\xfc\x24\x5d\x28\xa3\x30\x92\xd1\x64\x90\xc7\xc1\x92\x85\xef\x2c\xe4\xbb\xc5\x6a\x7e\x16\xed\x73\x22\xe8\x11\x6e\xa1\x42\xa9\x68\xdc\xb6\x7d\xe0\xa1\x55\xd8\x9e\xbe\x3e\x8b\xf8\x76\x11\x39\x21\x3f\x4b\xb8\x43\xda\x6d\xf2\x2e\x96\xdd\xf4\xea\x8c\xd4\x31\x1e\x52\x01\xe2\x10\x8f\xcc\xb8\x61\x84\x65\x63\xb2\xdd\xab\xf6\x8f\xe5\x6d\x1b\xf2\xf5\x1c\xde\x9f\xf0\xc2\x37\x69\x89\x39\x79\x46\xff\x39\xf4\x8d\x0e\x53\x25\xe1\xdd\x3b\xe8\x5b\x7b\x45\x85\xb3\xbc\x6d\x1b\xa2\x93\x8a\xd8\x6c\x55\xe3\x03\x75\x38\xaf\x94\xa2\x42\x10\xb1\x8b\x68\x2d\x42\x4f\x1d\xb2\xbc\x7d\x35\x74\xf7\xd0\xfd\x7c\x78\x66\x62\x52\xbf\xf9\x96\x8f\x9f\xcc\x4a\xbb\x0f\x76\xf3\x22\x39\x6b\x67\x64\x10\x5f\xbb\xa4\x08\xfe\x4b\xb8\x6d\xc3\xf5\x4d\xf9\x10\x52\xf6\xd3\x71\xea\xbe\x85\xf0\xe2\x45\x9b\x98\x64\xf8\x8a\x49\x8a\x99\xb8\x7e\x32\x56\x6e\xa2\x2c\xa5\x69\x01\x28\x6c\x55\xf1\xb6\x96\x6f\xd4\xcd\x46\x2b\xbf\x83\xd2\xba\xfc\xd5\x32\xc4\xf2\x08\x05\x1d\xe4\x4f\x64\xa2\x38\xed\x97\xa7\x41\xf7\x4f\x6d\x31\x2c\x6f\xfd\xd5\xf5\x1c\x3e\xc7\x4a\xfb\x72\x7e\x66\x63\x9d\xb3\x87\xbb\xc5\xaa\x27\x7e\xd7\x73\xf8\x57\x6e\xe2\xc7\xc4\x24\xc5\x95\x7a\xc2\x14\x8e\xd6\x91\xc1\x67\x4d\x5f\x42\x36\xd8\x2e\xee\xb2\xfd\xac\xc9\x7b\x05\xc9\x50\x2b\x3e\x4f\x14\x49\xc7\xcb\x3c\x37\xef\x24\x17\xcc\xe4\x22\x6f\x83\x12\xba\x55\xfc\x56\x38\xde\x77\x77\x56\xcb\x4e\xbd\x13\xa6\x4b\xe5\xd2\xee\x1c\x34\x6d\x24\x1d\x9e\xc3\xfb\x1f\x91\xa8\x39\x5d\x7e\x38\x71\xf3\xcf\x29\xc8\xd3\x2d\x13\x3b\xe6\xbc\x45\x3a\x38\x1e\x64\xa6\x68\x60\x29\xdf\x0a\x51\x61\xd2\x4d\x25\x41\x38\x27\x8e\xcf\xad\xcf\x81\xcd\x58\x9c\xe0\x30\x34\xce\xa4\x3e\x76\xe2\xd8\xaa\x17\xbd\x8b\xad\xe6\xb0\xcd\xce\x69\x03\xfd\x5d\xad\x0f\xfc\xdd\xb7\x8e\x52\xc9\xa3\xec\x3e\xc1\xe2\x76\xdf\xff\xe6\xbe\xe4\x6a\x36\x03\x6f\xbb\xa9\x1f\xf3\xc4\xdf\x25\x0e\x85\x04\x29\x82\x60\xa6\x78\xaf\xaf\x30\xec\xac\x4c\xe3\x49\x85\x9f\x6a\xbc\xb3\x49\xe0\xf0\xd2\x20\xf0\xa8\xcb\x69\xae\xca\xcf\x4a\x7e\x81\x97\xef\xc0\x28\x3d\x87\x57\x64\x45\x5a\x8c\xbb\x1f\x2f\xd1\xe7\x91\xbd\xfc\x29\xb5\x2f\x1c\x8a\x80\x1f\xab\x3a\x1c\x7b\xdf\x22\xf1\x29\xa7\x0f\xe9\xd5\x05\xbd\x87\xf8\xbd\x16\xd9\x3f\x2d\xf3\x3e\xa3\x47\xe6\xd2\x1e\x38\x11\xbe\x53\x00\x62\xeb\xa2\x77\xca\xf6\xfb\x1e\x98\xbe\x50\x5e\x18\x9e\x69\x70\xb6\x95\x32\xd5\x68\xb6\x61\x47\x53\xf4\xdf\x69\x78\x46\x2f\xb2\xdf\xa1\xed\xd4\xe4\xe8\xfa\x8c\x75\x14\x3d\xfc\x15\x00\x00\xff\xff\xd5\xbe\x00\xcf\x68\x13\x00\x00"

func nonfungibletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_nonfungibletokenCdc,
		"NonFungibleToken.cdc",
	)
}

func nonfungibletokenCdc() (*asset, error) {
	bytes, err := nonfungibletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "NonFungibleToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdb, 0xf, 0xd7, 0xfa, 0xf8, 0x7, 0xd8, 0xf7, 0xa, 0xb6, 0x12, 0xce, 0x79, 0x51, 0x18, 0xed, 0xc5, 0x9e, 0x39, 0xb8, 0xfc, 0x2c, 0x47, 0x69, 0x56, 0xfc, 0x55, 0x77, 0xfb, 0x35, 0xcf, 0x74}}
	return a, nil
}

var _roxcontractCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x5a\x4b\x6f\x1b\x39\x12\x3e\xc7\x80\xff\x43\xd9\x07\xa7\x85\x91\xe5\xcc\xee\x60\x0e\x0d\x6b\x9c\xd8\x1e\x2f\x04\xec\x0a\x81\xa3\xc1\x1e\x8c\x60\x41\x75\x97\x24\xc2\x2d\x52\x4b\x52\xb6\xbc\x8e\xff\xfb\x82\x64\x3f\xf8\x6a\xcb\x09\xa2\x43\xac\x16\x59\x55\x64\x3d\xbe\x7a\x74\xe8\x7a\xc3\x85\x82\x29\x67\x37\x5b\xb6\xa4\xf3\x0a\x67\xfc\x1e\x19\x2c\x04\x5f\xc3\x71\xf8\xf3\xa8\x28\x8b\xe3\xc3\x83\xc3\x83\xcd\x76\x0e\x05\x67\x4a\x90\x42\xc1\x2d\xdf\x5d\xd5\xdf\xf3\x98\xd3\xb3\xde\x0f\x00\x70\x76\x06\x7f\x3e\x20\x53\xd2\x3e\x6a\x16\xa8\x9f\xa1\x21\x9e\x30\xaa\x28\xa9\xe8\xff\xb0\xcc\x06\x0d\x55\xb7\xed\xdf\x54\xad\x4a\x41\x1e\x33\x5a\xe6\xf0\xd7\x84\xa9\xdf\x7f\x1b\x9a\x73\xe6\xf0\xa9\x2c\x05\x4a\x79\x31\x08\x69\xae\x71\xc3\x25\x55\x1e\x89\xe2\xaf\x10\xfc\x8b\x32\x85\xa5\xb7\x5f\xf0\xdd\xa4\xcc\xe1\x8b\x12\x94\x2d\x13\xe7\xba\xe4\xbb\x2b\x81\x44\x93\xcd\xed\x56\x4d\xf9\xf7\xbf\x0d\xba\x6b\xaf\xa9\x52\x58\xc2\xe3\x0a\x19\x10\x4d\x00\x54\x42\xc5\x8b\x7b\x2c\x87\xb0\x46\xc2\x28\x5b\x6a\x35\xc2\x74\xa1\x24\x14\x84\x31\xae\x60\x8e\x40\xca\x12\xcb\x84\xbc\x7f\x1a\xd2\xa4\xb8\x6e\xdf\x2d\xdf\x5d\xa3\x54\x82\x3f\x79\x17\x1a\x38\xf6\x98\x92\x35\x96\xf0\x99\xa8\x95\x63\x94\x0a\xb5\x49\xaa\x0a\x0b\x45\x39\xfb\xa2\xb8\x20\x4b\xd4\x7b\xb4\x0e\xda\x87\xbe\xfd\x9f\xb7\xf3\x8a\x16\x76\x7b\xf7\xdd\xdf\xfd\xa9\x5c\xd3\x57\x18\xdb\xcd\xa4\x28\x50\xca\x4c\x62\xb5\x18\xc0\x03\x11\x30\xe7\x3b\x94\x39\x7c\x7c\xb6\xf7\xcd\xb5\x22\x5e\x7a\xf6\xb2\xed\x7a\x8e\xc2\x1a\xf3\x33\x8a\x4b\xbe\xcb\xa1\xa5\xb3\x7f\x5f\x5c\x4b\x1a\x1a\xdc\xa9\x4b\x57\xa3\x8e\xa2\x66\x2b\x04\xc5\x15\xa9\x6a\xce\xc0\x17\xd6\x5e\x37\x33\x09\x6a\x45\x14\xac\xc8\x03\xc2\x1c\x91\xc1\xda\x48\xf5\x79\x1b\xda\x2f\xdb\xcd\xa6\x7a\x6a\xec\xe0\x8a\x17\x28\xf9\x56\x14\x68\x5c\xa3\x0d\x98\x5a\xf6\x5f\x8c\xfe\x77\x8b\x30\xb9\x86\x05\x17\xa0\x56\xa8\x35\xd1\xed\x68\x94\x3a\xf7\x8f\x1e\x2e\x33\xb2\xc6\xc6\x89\xfd\x55\x7d\x3e\xeb\x8b\x5a\xa5\xbc\x8a\x57\x03\x6d\xde\x1a\x6d\x5a\x56\x91\x36\xf5\x87\x32\xaa\x32\x57\xe0\x40\x5f\x0a\x9c\xcf\x46\x60\xf8\x93\xfe\x68\x9a\x51\x85\x6c\xa9\x56\xf0\x07\x7c\xc8\xe1\x78\x8a\x8f\x46\x29\x7a\xc5\x09\x0c\x5c\x6f\xd4\xd3\xb1\xcf\xe0\xc5\x7f\xd4\xce\x30\x32\x4a\x81\xb1\x0b\x51\xa3\xd6\xce\x89\xfd\x46\xcc\xd8\x4a\x4b\x2c\x5b\x35\xc1\x18\x16\xa4\x92\x98\xa2\x8f\x34\x05\x63\x78\xf6\x94\x53\x5b\x75\xc2\x0a\x81\x6b\x1d\xa7\xb5\x45\x27\xd7\x20\xb9\xf5\x25\xaa\x80\x4a\xf6\x5e\xc1\x56\x62\x09\x64\x49\x28\xf3\xe9\x93\xd7\xe9\xbb\x26\xfc\x02\xd9\xaf\x40\xa4\x8f\x13\x49\x56\x51\xd4\xdc\x75\x5a\xfc\x0a\x63\xf8\x10\x5e\x04\xd7\x34\x05\x80\x1d\x95\x23\xed\x25\xf0\x6b\xad\x4c\x69\x6e\xaf\x0d\xdc\xdc\x9d\x71\x58\x73\x81\x1e\x1a\xb6\x50\x08\x8a\x03\x55\xbe\x83\x2e\xb6\xcc\xb0\xca\x22\x27\xa3\x0b\x38\x72\xcd\x96\x70\x38\xdf\xaa\x4a\x6c\x31\xde\xd3\xdc\xd1\x07\xdd\xe4\x15\xc1\x77\x43\xef\xc6\xcd\x59\x35\x3c\xdc\xf2\x5d\x26\xb0\xa0\x1b\x8a\x4c\xe5\x70\xf2\x1c\x25\xda\x10\x50\x5f\x86\x7e\x80\x07\x69\x69\x08\x8a\xa2\xf8\xde\x70\x73\xb5\x93\xc3\xf1\x95\x0d\x2f\x7d\x40\x63\x16\xa1\xe3\x7c\xb6\xa2\x52\x8b\xee\x32\x56\x1c\x76\xfe\x0f\x1a\x31\x2c\x06\x4e\x2d\x56\x8e\xfb\x62\xe3\xce\xdc\xe1\x6b\x64\xb5\xcc\x27\x1f\x03\xa3\xd5\x20\x71\xfe\x40\xca\x87\xfd\x78\xd0\x7b\x06\x18\x7b\xdc\x8e\x7e\x62\xd0\xec\xd9\x6c\xf7\x25\x04\x46\x90\x51\xda\x62\xc6\xc0\x03\xb3\x16\x6a\x7c\xe8\xbd\xd4\x39\x90\x6f\x99\xc6\x0c\x5d\x4c\xa8\x15\x52\x01\x02\x17\x28\x90\x15\x81\x57\xb7\x64\xa3\x9a\x65\xa6\xb4\xd3\xe5\x70\x7e\x5a\x98\x40\xd6\x79\xad\x71\x74\xf3\x67\x18\x2b\x7f\xff\xa7\xf6\x50\xf1\xc3\x0c\xac\x4f\xeb\x7f\x7f\x88\x5c\x1b\xd4\x9a\x33\xdf\x63\xfd\xa3\x81\xd1\x77\x02\xdb\x9c\x7a\xd0\xb5\xa3\x93\xcf\x87\xde\x3d\x07\x87\x07\xef\xde\xd5\x9e\xf7\xe2\x56\x5a\x37\xb3\xf6\xfb\x27\x03\x6e\x45\x1d\xe1\xf3\x0a\xb5\xd9\x09\xeb\xf6\x78\x25\xc1\xf4\x66\x16\x57\xd5\xa3\xc9\xf4\x66\xe6\x86\x74\x5b\xa3\xdc\x23\x7b\x2f\x61\x72\x1d\x57\x00\x5d\x09\x18\xc2\xd2\x1b\xca\x07\x0f\x6d\xe2\x65\x17\x7d\xe2\x55\xd7\x10\x7e\x69\x05\x4d\xb5\xf0\x76\x70\x1b\x26\xd8\x45\x80\xd7\x1f\xae\x8e\xe5\x82\xd8\x74\x57\x7e\x81\x36\x16\xb5\xba\xfa\x59\x1b\xbf\xa2\x61\xee\x75\x58\x85\x5e\xe5\x95\x25\xf3\x9e\x32\x44\xd4\xeb\xa2\x67\x5d\xeb\x43\xe7\x2b\x8a\x22\xb1\xda\xe9\xa7\x46\x35\xfb\xd0\x93\x97\x4a\xdb\x23\xc4\xe9\xd3\xf8\x7f\xd4\x44\xd4\x17\xf6\xf3\xba\xc7\xd4\xf3\x5e\x1d\x3e\x62\x41\x0a\xb4\xfa\xf1\x93\x9a\x2b\xb1\x49\x8f\x01\x22\x7d\x8c\x3c\x7f\x7a\x33\x1b\xc4\x64\x4b\x54\x93\x6b\x99\x0d\x72\xb8\xb3\x46\xfb\x1a\xef\x99\x73\x21\xf8\xa3\x86\x36\xa7\x1b\xca\xe1\x24\x25\xa2\x8f\xfa\x96\xef\xa6\x0b\x15\x30\x70\x4d\x3f\xbd\x99\x5d\x84\x9a\xd4\xe5\xde\xa2\x06\x6c\xb9\xad\x9a\xea\x8e\xd1\x6a\x68\x7e\xa5\xa5\xee\x27\xec\xba\xda\x0a\x86\x65\x1f\x72\x9f\x9d\x81\x5c\xf1\x6d\x55\xea\x92\x48\x13\x48\x5d\xa9\x12\x5b\x46\x11\xb1\xdc\xda\x8a\x92\x9b\xe7\xc5\x96\x19\x65\x07\xb5\x00\x97\x2a\x55\x0c\x64\xf5\xd9\xea\x74\x0b\xdf\xbe\x35\x3f\x5d\x18\x07\x1f\x03\x2d\x07\x79\x1a\x87\x9b\xd2\xc1\xea\xc8\xc0\x5b\x7b\x81\xdc\x00\xd3\xe4\xba\xff\x8a\xba\xb4\xa0\xac\xe0\x42\x60\xa1\xfa\x8b\x7a\xd7\xcf\x12\x9e\xd6\x39\x57\x9e\xf2\xb5\x61\x8c\xa1\x9f\x05\x7f\xa0\x25\x8a\xc4\xd2\x2d\x16\x48\x1f\x92\x4b\x29\x27\x8e\x5b\x26\xfe\xc8\xb0\xd4\xdd\x61\xd3\xb0\xfe\xfe\x5b\x02\xc5\xa7\x37\xb3\xb8\x71\x8a\x02\xd1\x84\x5c\xcb\x10\xce\x4f\x4d\x47\xe1\xa8\x25\x76\xd6\xc7\x66\x56\xd2\x7c\x99\x5c\x3b\x0e\x9b\x0c\xaa\x50\xaa\x81\x75\x33\xc1\x39\x3f\x0d\x8e\x30\x12\xb8\xe6\x0f\x98\xdd\xe3\x53\x0e\x9d\x84\x01\x5c\x5c\xc0\x86\x30\x5a\x64\xc7\x6b\x2a\x4d\x1d\x32\xbd\x99\x1d\x47\xb5\x8c\x41\x16\x6f\x9c\x63\x04\x8d\x68\xd9\x0c\x74\x5a\x79\xe2\x62\x44\xec\xac\x26\xe2\x62\x1d\x09\xce\x4f\x0d\xf1\x1e\x85\xbc\x09\x56\x5e\x55\x81\xfd\x42\xe4\x11\x7c\x0c\xe2\x3d\x3c\x98\x9f\x6c\x35\x4e\xd7\xb7\x4b\x6d\xe4\x55\x39\x4b\x6b\xf9\x8e\x96\x5f\x5b\xc1\x49\x15\xba\xd3\x2d\xad\x3b\xc5\xdf\xa6\xb9\x1a\xf2\x5b\xd9\x7b\x74\x17\x63\x6b\xa8\xa8\xda\x14\x81\x97\xdc\xe3\x93\xdc\xc3\xfa\x7b\x20\xb9\x47\xe8\x49\x42\x6b\x44\xee\x43\xf5\x57\x4e\xf3\x43\x10\x4f\x17\x29\xeb\x1d\x19\x2c\x4d\xa1\xad\xa9\xa9\x70\x01\xe3\xbe\xf3\x93\xad\x5a\xed\xbb\x44\xa0\x09\xcd\x4f\xfb\x67\x78\xd8\x00\x51\x01\x2b\x99\x6c\x07\x6b\x36\x8c\x56\x6f\xeb\x68\x7b\x2b\x87\xc6\xbf\xfc\x9b\xbd\x5e\x31\x68\xfd\xdb\xe6\xe3\xcf\xf5\x46\x3d\x75\x28\x9b\x25\x01\xab\x5b\x77\x85\xb7\x90\x50\xb3\xf2\x8a\x32\x97\x65\x5c\xa0\x2f\x50\x15\xab\xf6\xe9\x1f\xa8\x80\x38\x19\x4a\x71\x20\x60\x1d\xc3\x8e\xc6\x09\x6b\x1a\xae\xf7\xd2\x49\x3d\x43\xed\x08\xe4\x81\xd0\x8a\xcc\x2b\x1c\xb5\xfc\x26\x0b\x87\x02\x4a\x8e\x12\x74\xbe\x34\x43\x43\xd2\x73\xca\xa1\xc5\x52\x8f\x09\xd5\x34\x12\x48\xdb\x3d\x70\x06\xf3\xad\xc3\xb1\xe0\x4c\x91\xba\x3b\xa4\x0a\xd7\x93\x72\xe8\xd8\x75\x2f\x2f\xc2\x4a\x3b\x86\x71\x7e\xab\x59\xca\x14\xcf\x40\x47\x9a\x74\xe4\xdb\xd4\xe8\x35\xfb\x8f\x3f\xa8\x1f\x5a\x3e\xd7\x6f\x8d\x30\x1d\x2d\xce\x89\xc6\x1a\x92\x3e\x59\x65\x66\x9a\x71\xd0\x9e\x8f\x96\xa8\xae\xc8\x86\xcc\x69\x45\xd5\x53\x96\x56\x6f\x37\x9c\x0e\xa9\x2d\x0c\x9c\x9f\xa4\xe9\x9e\xdd\x9f\x13\x85\xc6\xcb\x1f\x59\xc0\xb0\xcb\x8a\x57\xba\x74\xd3\xa5\xdf\xd2\xbb\xd0\xf1\x20\x72\xe1\x6e\x71\x14\xa1\x92\xd5\x5d\xe8\xc3\x5e\x31\x64\x26\xec\x71\x65\xd2\x05\xd9\x25\xdf\xbd\x3e\xa1\xb5\x13\xf1\xc7\x4b\xbe\x73\xc2\xa9\xa3\xd2\xff\xbe\x32\x14\x31\xb3\xfa\x3b\x4b\xdf\x4c\x42\xce\x4f\x8f\x6a\x8e\x6f\x82\x61\x2d\xcb\x7f\xc1\x91\xc3\x49\x3d\x1f\x77\xc5\xf6\xcc\xb6\xe2\xd3\xd4\xc7\xb0\x98\x9c\x87\x35\xeb\xa5\x1d\x76\xd9\x61\xa4\x0e\x27\x6d\x26\xdc\x51\xf9\x4a\x45\x0a\x51\x3b\xd8\xe4\xa4\x5e\xe9\x3a\x33\xed\xd7\x80\x55\xf7\x14\x1f\x8d\x1d\x0d\x02\xb6\x16\x4d\x88\x6b\xc7\x36\xf5\xf6\xfd\x48\xbb\x44\x75\xc9\x77\x53\xb2\xc6\x48\xc7\xd6\x1f\x2e\x12\xb0\xda\x77\xa9\x0b\x33\x36\xef\x91\x44\x65\xdf\xfb\x2a\xfb\xb6\xe1\xfb\x04\xd9\x09\x64\xff\xa5\xa6\xce\x84\xe7\x96\xef\x26\x2c\xe5\x45\xf6\xcb\x3e\xc1\xbd\xa3\xba\x38\x77\x9c\xfe\x9c\x4f\xcb\xcf\x39\x86\x69\x09\xcc\x4b\x51\x62\xa0\xcf\xef\xe9\x7e\xbe\xec\xc3\x83\x77\x71\x13\x62\xf2\x78\xf2\x95\x20\x8c\xe1\x4c\xda\xc7\x33\x0f\x0b\x7b\x89\x3b\xd8\xd5\xb4\x1b\xf3\xf4\x2a\x69\xf8\xb2\x30\x10\x69\x96\xdd\x18\xb2\x03\x12\x6f\xca\xf3\x21\x58\x75\x5f\x99\xfc\x1a\xac\x19\x7f\x0b\x7b\xac\xd4\xf4\xf0\x32\xf1\x6e\x27\xc8\x53\xe7\xa7\x9e\x47\xf5\x94\x37\x81\x98\xba\x48\x18\x49\xf2\x80\xd9\xf9\x69\xe1\xd4\x03\xba\xbe\x4f\x27\x25\x47\x3f\x7d\xfc\x2a\xca\xee\x7b\x73\xda\xde\x2e\x77\x08\xfb\xd3\xde\xbe\x3c\x3b\x04\x45\xc4\x12\xd5\xdb\x2e\xe1\x6b\x95\x18\xf8\xeb\x32\x51\x84\x74\x29\xdd\x19\x22\xa7\x2d\x0a\x5d\xc9\x93\x62\x3a\xaa\x9e\xff\x8a\xf0\xee\xe5\xf0\x40\xbb\xc3\xe1\x01\xfc\x3f\x00\x00\xff\xff\x59\x47\x2a\xd5\x31\x21\x00\x00"

func roxcontractCdcBytes() ([]byte, error) {
	return bindataRead(
		_roxcontractCdc,
		"RoxContract.cdc",
	)
}

func roxcontractCdc() (*asset, error) {
	bytes, err := roxcontractCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "RoxContract.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x80, 0x86, 0xf6, 0x76, 0x2b, 0x6d, 0x40, 0x3d, 0xbd, 0xb5, 0x4e, 0xa4, 0x7e, 0x7, 0x83, 0x8a, 0x85, 0xd3, 0x67, 0xdf, 0x9a, 0x20, 0x57, 0x37, 0x17, 0x48, 0xfe, 0xf6, 0x58, 0x22, 0x19, 0x62}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"NonFungibleToken.cdc": nonfungibletokenCdc,
	"RoxContract.cdc":      roxcontractCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"NonFungibleToken.cdc": {nonfungibletokenCdc, map[string]*bintree{}},
	"RoxContract.cdc": {roxcontractCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
