// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../contracts/NonFungibleToken.cdc (4.968kB)
// ../../../contracts/RoxContract.cdc (6.42kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _nonfungibletokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x41\x8f\xdb\xb8\x0e\x3e\x37\x40\xfe\x03\xdb\x02\xaf\x33\x45\x26\x79\x87\x87\x77\x08\x50\xbc\xbe\xed\x34\x40\x2e\xb3\xc5\x6c\x16\x7b\x28\x0a\x44\xb1\xe8\x44\xa8\x2c\xb9\x92\x9c\x34\x5b\xcc\x7f\x5f\x90\x92\x65\x3b\xc9\xcc\x4e\x4f\xbb\x87\xed\xc4\x96\xc8\x8f\x1f\xc9\x8f\xf4\xec\xed\xdb\xf1\x68\x3c\x7a\xfd\x1a\x56\x3b\x84\x85\xb6\x07\xb8\xb3\xe6\x66\xd1\x98\xad\xda\x68\x84\x95\xfd\x8a\x06\x7c\x10\x46\x0a\x27\xd3\xd1\xf5\x9d\x35\xed\x09\x3e\xb0\x86\xc2\x9a\xe0\x44\x11\x40\x99\x80\xae\x14\x05\xd2\x59\xb2\x99\x1f\x40\xd8\x89\x00\x42\x6b\x30\xd6\xdc\x94\xad\x87\xc0\x1e\xda\xfb\x1e\x0a\xdb\x68\x49\xbf\x4b\xeb\x2a\x08\x76\x3a\x1e\x2d\x4b\x10\xd0\x78\x74\x70\x10\x26\x78\x08\x16\x24\xd6\xda\x1e\x41\x80\xc1\x03\x98\x32\x64\x03\x13\x08\x3b\x54\xae\x03\x74\x60\x7b\x06\x51\x8e\x47\xc1\x82\xaa\x6a\x8d\x15\x9a\x40\xe7\xe0\x34\x90\x0e\xed\x34\xe1\x3f\x37\xb5\x13\x7b\x42\x0d\xa5\xd5\x44\x17\x05\x44\xa6\x5c\xa3\xd1\x83\x30\x12\x8c\xa8\x94\xd9\x8e\x47\x1c\x6f\x18\x50\xe0\x6b\x2c\x54\xa9\xd0\x4f\x33\x95\x8b\xd5\x1a\x1c\x7a\xdb\xb8\x8e\xb3\xc2\x3a\xcc\x0f\x21\x1c\xeb\x44\x9e\xc3\xda\xa1\x47\xe2\x40\x18\xb8\x5b\xac\x40\x19\xf6\xe0\x2b\xe1\x3a\x0e\xb2\xf1\x0f\x56\x6b\x2c\x82\xb2\x66\x0d\xf7\x27\x3e\x3a\xf3\x64\xd9\x07\xeb\x08\x3e\xd3\xfc\xc6\xb3\xed\x22\xdf\xa6\x1c\x50\x6a\x0b\xdd\x48\x3e\x55\xe2\x01\xca\xc6\xf0\x4b\xce\x87\x60\x2e\x08\x8a\x3d\x18\x74\xf4\x08\x85\x57\xfa\x38\x1e\x55\x76\x9f\xb2\xec\x09\x2e\x31\x64\x9b\x00\xb6\xe4\xe3\x03\x27\x11\xf5\x27\x67\xf7\x4a\xa2\x5b\xf3\xd9\xf5\x3d\x16\xa8\xf6\xf4\x33\x43\xce\x84\xfa\x14\x8d\xef\x3f\x03\x89\x85\x16\x0e\x7b\x08\x0f\x2a\xec\xc0\xdb\x0a\xa1\x76\xc8\x66\x6b\xeb\x99\x30\xa9\xf8\x44\xca\x96\xc3\x6f\x8d\x72\xc8\xc8\x3a\xf2\x7a\xd9\x2e\xd0\x05\xa1\x4c\xca\x31\x5b\xda\xe0\x4e\xec\x95\x75\xb9\x4b\x7c\x5b\x3b\x47\x20\x14\x1e\x6b\xe1\x44\x40\xd8\x60\x21\x1a\x42\x1a\x60\xab\xf6\xe8\xd9\x0b\x97\x35\xfd\x21\x36\x4a\xab\x70\x24\x5f\x7e\x47\xf7\x04\x38\x2c\xd1\xa1\xa1\x9c\x05\x9b\xea\xba\x8f\x8a\x10\x5b\xa3\x8f\x80\xdf\x6b\xeb\x93\xc1\x52\xa1\x96\xb1\x10\xbb\xf8\x95\x01\x6b\x10\xac\x83\xca\x3a\x1c\x8f\x12\xf9\x1d\x67\x53\x58\x52\x6f\x7a\x9b\xa0\x11\x2c\x7f\x8a\xab\x12\x5f\x11\x8a\xc6\x07\x5b\xe5\x5c\xb4\xcc\x0d\xfa\x6a\x98\x0e\x6a\x57\x0b\x7b\xe1\x94\x6d\xc8\xa6\x32\xdb\x94\x11\xb2\x1f\x2b\x83\x29\xfb\xe5\x08\x8d\x27\x5a\xb3\x71\x0e\xa3\x33\x35\x49\xb8\x6c\xc9\x05\x3a\xac\x7a\x0f\x85\x30\xe0\xd1\xc8\xf1\x88\xae\xb9\x58\x37\x6d\xe9\xd5\x88\xee\x26\xd8\x1b\xfa\x77\xc2\xee\xa9\x0a\x29\x75\x66\x4b\x10\xd9\x0b\x77\x39\x21\x13\x50\x20\x99\xd5\xa0\x51\x6e\xd1\x8d\x47\x17\x5a\x6c\x65\xd9\x5d\xdb\x8b\xd4\x06\xc6\x86\x1d\x3a\x86\x39\xc9\xa2\xc5\xb2\xe1\x89\xa1\x23\x5b\x97\x4e\xc4\x5e\xb9\x5b\xac\xc6\xa3\xd2\xd9\xea\x2c\xb9\x2c\x63\x06\x8a\x56\x5d\x24\xd6\xd6\xab\x90\x53\x0a\xd6\x0c\x9c\xbd\xf1\xe3\xd1\xb0\x60\x0b\x4b\x19\x09\xb1\x96\x83\x13\xc6\x97\xe8\x18\xf6\xdb\x19\xfd\x7f\x36\x63\xc9\xaf\xa8\x9a\x63\xb7\x9f\x2a\xf8\x14\x7e\x65\xfb\xfd\xb7\x94\x38\xad\xf9\xb6\xaa\x6a\xeb\x42\xcc\x50\x2f\xf9\xca\xf7\x67\xc0\x6c\x36\x1e\xd5\xcd\xe6\x82\xf5\x73\xed\xfd\x41\xb0\x00\x00\x12\xb4\x60\x83\xd0\x60\x9a\x6a\x83\x8e\xe5\x22\x26\x92\x6b\x57\xf9\x28\x8b\xca\x00\x7e\x57\x3e\xc4\x2e\xa1\xcb\xe4\x6d\x2f\x5c\xbc\xfd\x5b\x53\xd7\xfa\x38\x87\xdf\x97\x26\xfc\xf7\x3f\x3d\xfb\x1f\xf7\x11\xad\x08\x80\x95\x0a\x01\x25\x1c\x88\xf0\x94\x95\x1e\x5e\x0a\x47\x05\x25\xb4\xfa\x93\x46\x48\xbc\xdf\xb9\x42\x36\xf4\x21\x1d\x5f\x76\x47\xaf\xae\x2f\xbb\x53\x7e\xe8\x51\xa4\x09\xa8\x7c\xae\x0d\x33\xc9\x17\x95\x91\xaa\x10\x81\x6b\x34\x8b\xeb\x99\x74\x26\xcb\x01\x0e\xa2\x67\x05\xa8\xb2\xa6\x43\xc8\xb3\x19\x2c\xcf\x6e\x2b\x0f\xc6\x86\x28\xce\x20\x8a\xc2\x36\x26\xbc\xf1\x3c\x13\xc4\x16\x27\xb0\x26\x43\x6b\xce\x3c\x6c\x10\xd6\x46\xe9\xf5\xf4\x31\x2a\xfe\x48\xee\xaf\x94\x6c\x79\x9f\x30\x92\x39\xfc\x5f\x4a\x87\xde\xff\xef\x11\x66\x1e\xa3\x25\xd5\x3e\x4a\xee\xb0\xe1\xc4\x38\x8d\x2d\xb4\x8c\x25\x35\x7c\x0e\x61\x7d\xfb\x8f\x86\x75\x1b\x0f\x0d\xa2\x0a\xf6\x72\x4c\xcb\xe1\xca\x93\x6a\xca\xe7\xcd\xa1\x5b\x6e\xce\xbd\x9d\xcf\x38\x58\x52\x41\xfe\x88\x47\x7a\xed\xd1\x18\xf5\xad\x41\x58\xde\x26\xf6\x44\xb1\xe3\xd2\xdd\x09\xdf\x9d\x25\x93\x1a\x03\x74\xb0\xe3\xbb\x87\x1e\xdc\xfb\x38\xf4\xaa\x9c\x08\x12\x9d\x84\x91\x0a\xef\x92\xd4\x52\x28\xd9\x00\xef\x63\xa5\x32\x71\x66\x25\xfc\x24\x5d\x28\xa3\x30\x92\xd1\x64\x90\xc7\xc1\x92\x85\xef\x2c\xe4\xbb\xc5\x6a\x7e\x16\xed\x73\x22\xe8\x11\x6e\xa1\x42\xa9\x68\xdc\xb6\x7d\xe0\xa1\x55\xd8\x9e\xbe\x3e\x8b\xf8\x76\x11\x39\x21\x3f\x4b\xb8\x43\xda\x6d\xf2\x2e\x96\xdd\xf4\xea\x8c\xd4\x31\x1e\x52\x01\xe2\x10\x8f\xcc\xb8\x61\x84\x65\x63\xb2\xdd\xab\xf6\x8f\xe5\x6d\x1b\xf2\xf5\x1c\xde\x9f\xf0\xc2\x37\x69\x89\x39\x79\x46\xff\x39\xf4\x8d\x0e\x53\x25\xe1\xdd\x3b\xe8\x5b\x7b\x45\x85\xb3\xbc\x6d\x1b\xa2\x93\x8a\xd8\x6c\x55\xe3\x03\x75\x38\xaf\x94\xa2\x42\x10\xb1\x8b\x68\x2d\x42\x4f\x1d\xb2\xbc\x7d\x35\x74\xf7\xd0\xfd\x7c\x78\x66\x62\x52\xbf\xf9\x96\x8f\x9f\xcc\x4a\xbb\x0f\x76\xf3\x22\x39\x6b\x67\x64\x10\x5f\xbb\xa4\x08\xfe\x4b\xb8\x6d\xc3\xf5\x4d\xf9\x10\x52\xf6\xd3\x71\xea\xbe\x85\xf0\xe2\x45\x9b\x98\x64\xf8\x8a\x49\x8a\x99\xb8\x7e\x32\x56\x6e\xa2\x2c\xa5\x69\x01\x28\x6c\x55\xf1\xb6\x96\x6f\xd4\xcd\x46\x2b\xbf\x83\xd2\xba\xfc\xd5\x32\xc4\xf2\x08\x05\x1d\xe4\x4f\x64\xa2\x38\xed\x97\xa7\x41\xf7\x4f\x6d\x31\x2c\x6f\xfd\xd5\xf5\x1c\x3e\xc7\x4a\xfb\x72\x7e\x66\x63\x9d\xb3\x87\xbb\xc5\xaa\x27\x7e\xd7\x73\xf8\x57\x6e\xe2\xc7\xc4\x24\xc5\x95\x7a\xc2\x14\x8e\xd6\x91\xc1\x67\x4d\x5f\x42\x36\xd8\x2e\xee\xb2\xfd\xac\xc9\x7b\x05\xc9\x50\x2b\x3e\x4f\x14\x49\xc7\xcb\x3c\x37\xef\x24\x17\xcc\xe4\x22\x6f\x83\x12\xba\x55\xfc\x56\x38\xde\x77\x77\x56\xcb\x4e\xbd\x13\xa6\x4b\xe5\xd2\xee\x1c\x34\x6d\x24\x1d\x9e\xc3\xfb\x1f\x91\xa8\x39\x5d\x7e\x38\x71\xf3\xcf\x29\xc8\xd3\x2d\x13\x3b\xe6\xbc\x45\x3a\x38\x1e\x64\xa6\x68\x60\x29\xdf\x0a\x51\x61\xd2\x4d\x25\x41\x38\x27\x8e\xcf\xad\xcf\x81\xcd\x58\x9c\xe0\x30\x34\xce\xa4\x3e\x76\xe2\xd8\xaa\x17\xbd\x8b\xad\xe6\xb0\xcd\xce\x69\x03\xfd\x5d\xad\x0f\xfc\xdd\xb7\x8e\x52\xc9\xa3\xec\x3e\xc1\xe2\x76\xdf\xff\xe6\xbe\xe4\x6a\x36\x03\x6f\xbb\xa9\x1f\xf3\xc4\xdf\x25\x0e\x85\x04\x29\x82\x60\xa6\x78\xaf\xaf\x30\xec\xac\x4c\xe3\x49\x85\x9f\x6a\xbc\xb3\x49\xe0\xf0\xd2\x20\xf0\xa8\xcb\x69\xae\xca\xcf\x4a\x7e\x81\x97\xef\xc0\x28\x3d\x87\x57\x64\x45\x5a\x8c\xbb\x1f\x2f\xd1\xe7\x91\xbd\xfc\x29\xb5\x2f\x1c\x8a\x80\x1f\xab\x3a\x1c\x7b\xdf\x22\xf1\x29\xa7\x0f\xe9\xd5\x05\xbd\x87\xf8\xbd\x16\xd9\x3f\x2d\xf3\x3e\xa3\x47\xe6\xd2\x1e\x38\x11\xbe\x53\x00\x62\xeb\xa2\x77\xca\xf6\xfb\x1e\x98\xbe\x50\x5e\x18\x9e\x69\x70\xb6\x95\x32\xd5\x68\xb6\x61\x47\x53\xf4\xdf\x69\x78\x46\x2f\xb2\xdf\xa1\xed\xd4\xe4\xe8\xfa\x8c\x75\x14\x3d\xfc\x15\x00\x00\xff\xff\xd5\xbe\x00\xcf\x68\x13\x00\x00"

func nonfungibletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_nonfungibletokenCdc,
		"NonFungibleToken.cdc",
	)
}

func nonfungibletokenCdc() (*asset, error) {
	bytes, err := nonfungibletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "NonFungibleToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdb, 0xf, 0xd7, 0xfa, 0xf8, 0x7, 0xd8, 0xf7, 0xa, 0xb6, 0x12, 0xce, 0x79, 0x51, 0x18, 0xed, 0xc5, 0x9e, 0x39, 0xb8, 0xfc, 0x2c, 0x47, 0x69, 0x56, 0xfc, 0x55, 0x77, 0xfb, 0x35, 0xcf, 0x74}}
	return a, nil
}

var _roxcontractCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x59\xcd\x6f\xdb\x3a\x12\x3f\xb7\x40\xff\x87\x69\x0e\xad\x84\x75\xec\x6e\xdf\x62\x0f\x46\xbc\x69\x37\xa9\x1f\x7c\x58\xa3\x68\xbd\x78\x87\xa2\x58\xd0\xd2\xc8\x26\x22\x93\x06\x49\xe5\x63\xf3\xf2\xbf\x2f\x86\xd4\x07\x29\x51\x71\xd1\xae\x0f\x81\x24\x72\x7e\x33\x9c\xef\x61\xf8\xe1\x28\x95\x81\xb5\x14\xcb\x4a\xec\xf8\xb6\xc4\x8d\xbc\x41\x01\x85\x92\x07\x78\x77\xff\xee\xfd\xab\x97\xaf\x5e\x1e\xab\x2d\x64\x52\x18\xc5\x32\x03\x5f\xe4\xfd\x55\xfd\x3c\x1f\xd2\x3d\xd2\x7e\x00\x80\xd9\x0c\x3e\xdd\xa2\x30\xda\xbd\x12\x04\xd2\x3b\x34\xc4\x2b\xc1\x0d\x67\x25\xff\x2f\xe6\x49\xda\xdf\xf4\x07\x37\xfb\x5c\xb1\xbb\x84\xe7\x73\xf8\xf7\x4a\x98\xbf\xff\x6d\x62\x65\x9a\xc3\xc7\x3c\x57\xa8\xf5\xe5\x80\xe6\x1a\x8f\x52\x73\x13\x90\x18\xf9\x0c\xc1\xbf\xb8\x30\x98\x07\xfb\x33\x59\x96\x98\x19\x3a\xcf\x2a\x9f\xc3\x57\xa3\xb8\xd8\xa5\xde\x99\xd6\xec\x80\x39\x7c\x66\x66\xef\x1d\xac\x44\x3a\x96\xa3\x94\xe2\xab\x91\x8a\xed\x90\xf6\x10\x42\xfb\x32\xb6\xff\x73\xb5\x2d\x79\xe6\xb6\x77\xcf\xe1\x6e\x2b\xaa\x1a\x47\x6e\xe5\xdb\xec\x11\x8c\x34\xac\x04\x51\x1d\xb6\xa8\x40\x16\xb0\x5e\x6e\xc0\xec\x99\x81\x3d\xbb\x45\xd8\x22\x0a\x38\xd8\xa3\x77\x3c\x6e\x99\x72\x64\x5f\xab\xe3\xb1\x7c\x68\x14\x12\x6e\x70\x88\x4e\x6b\x9f\x51\x5d\x75\xba\x9a\xc3\xa3\x53\x95\x23\xfc\xed\xfd\x93\xaf\xb2\xe5\xa6\x7d\xfe\x48\xee\x03\x2b\x83\x07\x60\x1a\x98\xe8\x16\x89\x89\x42\x2d\x2b\x95\x21\x7d\x1d\xfa\xd6\x74\x45\x07\x79\x74\xdb\x83\xe3\xde\xa0\x78\xab\x61\x75\xdd\x2d\x35\x7a\xeb\x6c\x3b\x5c\x33\x1c\x55\x63\x62\xc2\x42\x51\x1d\x80\x0b\xf8\xe7\xa7\xe1\xde\xa8\x5f\x0c\xb7\x91\x5a\xd7\x56\x4b\x8d\x22\x08\xf8\x5a\x8a\xb7\x06\x6e\x84\xbc\x83\x3b\x32\x03\x37\xc0\x75\xa3\x20\xfa\x71\x41\x6e\x2b\xb8\x59\x5d\x9f\x70\xc5\x49\x20\xf5\x24\xc2\x30\xf5\x35\x44\x3f\x8d\x65\x31\xe5\x39\x2c\xc0\x71\x88\xac\x06\xac\x60\x11\xb2\x8e\xec\x27\x19\x60\x61\x45\x89\xac\x76\x32\xc1\xc2\x13\xb0\xdb\xf9\xe4\x1e\x5b\x1f\x09\x4c\x6f\x1d\xbd\x60\x19\x7a\x11\xf2\x45\xde\xbb\xc0\xf0\xcf\x46\x54\x45\x25\x20\xaf\xc3\xde\xba\xc1\x1c\x3e\x0c\xdc\x66\xbd\xdc\xa4\x43\xb2\x1d\x9a\xd5\xb5\x4e\xd2\x39\x7c\x73\x1a\xff\x3e\xdc\xb3\x95\x4a\xc9\xbb\xf5\x72\xe3\xe5\x88\x74\x0e\x6f\x62\x2c\xc6\xa8\xbf\xc8\xfb\x75\x61\x7a\x00\x5e\x0e\x25\xda\xcb\xbe\xcd\x66\x33\x58\x15\x60\xf6\x48\x7a\xa9\x4a\xf2\x17\x72\x21\xc1\xcb\x89\xfd\xca\x73\x8a\x6b\xb7\x6e\x2a\x25\x30\x07\x85\x05\x2a\x14\x19\x0e\x90\xf4\x5e\x56\x65\x0e\x5b\xb4\x04\x9a\x1d\x90\x62\x8f\x9e\x99\xda\x55\x07\xca\x84\x46\xda\xf7\xa2\x12\x56\xdf\x21\xc4\x51\x6a\xd3\x17\x90\x7e\x49\x2d\xdb\x62\x41\x82\xa5\xf0\xe7\x9f\xcd\xa7\x4b\xeb\x6f\x0b\xe0\x79\x3a\x1f\xd2\xd1\xef\xec\x8a\x09\x21\x4d\xad\x23\x4a\x0a\x36\x27\xb4\x87\x98\xdb\xc8\x5e\x5d\x8f\x1f\x13\xb8\x06\x2e\x32\xa9\x14\x66\xe6\x2c\xe4\xf2\x14\xf7\xb5\x88\xb7\x75\x3e\x36\x8f\xf9\xdb\x64\x98\x84\x3e\x2b\x79\xcb\x73\x54\x91\xa5\x2f\x98\x21\xbf\x8d\x2e\xf5\xb3\x7d\x57\x27\xc1\x4b\xb0\xf2\x4e\x60\xbe\x5e\x6e\xf4\x1c\x3e\x3c\x3a\x6f\x89\xa4\xc1\xf5\x72\xf3\xd4\xa7\x26\x7f\xbb\x6b\x6a\x66\xf3\xd0\x65\x93\x74\x24\x2e\xfa\x66\xb5\x69\xd1\xd6\xf1\x8b\x73\x17\xcc\xad\x48\x53\x85\x07\x79\x8b\xc9\x0d\x3e\xcc\xa1\xe3\x90\xc2\xe5\x25\x1c\x99\xe0\x59\x72\x76\xe0\x5a\x53\x2e\x5d\x2f\x37\x67\xa9\x2f\x21\xfd\xf0\xc0\x7b\x65\xdd\x32\x9a\xf2\xbc\x29\xec\x2d\x3f\x75\x39\x65\xae\x66\x0f\x50\x9c\x1f\xc0\xc5\xb9\x25\x0e\xcc\xfc\x93\x99\xe1\x59\x15\xb8\x07\xa6\x5f\xc3\x87\x5e\xc8\xf6\x05\x0b\x8b\x0d\x25\xc7\xfa\x74\xfd\x8d\xb3\x19\xb0\x3c\xb7\x4e\x2d\xf0\xae\xe6\x50\xc7\x5f\xce\xad\x8b\x30\xf5\x00\x77\x7b\x9e\xed\xc1\xe9\xdc\x05\xab\x2c\x73\x90\x02\x87\x6c\x65\x99\x6f\xe2\x36\xfb\xc6\xf3\xef\xed\x31\xa2\x06\xf1\x7b\x26\xb2\x04\xf5\x4b\x3f\x62\x87\x1c\xb5\x51\xf2\xa1\xe5\x7d\xc2\x12\xc3\x64\xdb\x57\x7b\x6d\xd8\x9e\xcf\xdd\xe0\x83\x1e\x81\x9e\xcd\xba\xf4\x1c\x7c\xfd\x1d\x8d\x06\xe6\x25\x0a\x23\xeb\x46\x83\x8a\x3b\x69\x32\x6b\x83\x31\x20\xd4\xd2\x75\x49\x76\x0b\x2b\x4b\x54\x90\x31\x01\x0a\x59\x0e\xdc\x68\x38\xa0\x61\x39\x33\x0c\x98\xc8\xed\x86\xe6\xeb\x5e\xe6\xfa\xd7\x8a\xc7\x88\x36\xde\x44\xcc\xc9\xf4\xa9\xfa\x13\x57\x53\x9d\x62\x7f\x5a\x55\xb6\x5f\x6b\x12\xf5\x24\x80\xc1\x7b\x72\x22\xb1\x03\xd2\x89\x2c\xac\x5a\x0a\x8e\x65\xae\x21\xe1\x22\x2b\xab\x9c\x16\x09\xce\x3c\x1c\x71\x75\x9d\x4e\x7b\x3d\x1c\xa5\x72\x0d\x9a\x15\x4d\x65\x52\x54\x9b\x10\x84\x6c\x4b\x92\x76\xb6\x21\x83\x6c\x6b\xf3\x50\x38\x58\xd4\x5a\xa8\xe9\xff\xb5\x04\xf3\x22\x16\x4c\xaf\x6d\xad\x8b\x55\x43\x8a\x44\x85\x05\x2c\xc6\xac\xc6\x2a\xb3\x3f\x65\xba\x9e\xfd\x09\x8f\x92\x4f\x5f\xd8\x5e\xb5\x03\x2c\x35\xc6\x64\xaa\x61\x04\x2f\x9f\xab\x8f\xdd\x4b\x1d\xd5\xc9\x20\x29\x36\xe1\x1e\x9e\x6c\x04\x85\xda\x4c\x18\x62\x84\xb4\x94\x96\x1e\x47\xea\xb4\x6f\xc1\x4c\x21\x33\xf8\xe9\x70\x34\x0f\x5d\x0d\x4d\xa2\xf5\xac\x5b\xf7\x59\xb7\x15\xa3\x86\x02\x1f\xc6\x63\xfa\xa2\x3f\x80\xb8\x91\xcb\x15\xea\x17\x2f\x1a\x79\x6c\x3f\xbb\xdc\x24\x0a\x33\x7e\xe4\x28\xcc\x1c\xde\x3c\x9e\x2c\xf7\x4f\x3f\xd4\xce\xa7\x61\x57\x00\x4d\x92\xf6\xe6\x54\xdf\x11\xbc\x79\x6d\x00\x1f\xbc\x0e\xb2\x77\x37\xcc\x85\x63\x1c\x2c\x02\x06\xe3\xf3\xde\xb7\x00\xff\xfb\x20\x72\x92\x38\xba\x6b\x14\x23\x8e\x3a\x22\xcc\xbb\xe1\xce\x9f\x92\x0f\x16\x51\x0e\x83\xa0\x18\x54\xea\xba\x83\xb0\x13\x9b\xa8\x1b\xd1\xda\xee\x6f\x35\xb0\x2c\x93\x95\x30\x50\xe9\x3a\xbf\x71\x35\xd6\x86\xb7\x64\xd3\x5e\x53\x72\x71\x5e\xbb\x65\x2f\xc4\xdb\x71\xf0\xa7\x2c\xde\xf8\x15\xfd\x0d\x87\xc4\x98\x1e\x5e\xa7\x03\x0f\x19\xe1\xda\x73\x10\x7f\xe5\x2f\x90\xfc\x95\xd2\x5c\x9d\x61\xc7\xe1\x7e\xd5\x6a\xaf\x03\x56\xbf\xbd\x4f\x29\x3c\x9f\x5e\xbd\x7c\xe1\xdf\x39\x14\x68\xb2\x7d\xfb\xf6\x3b\x9a\x41\x99\x6b\x67\x0e\x7b\xd3\xc5\x44\x63\xcd\xb7\xda\xcb\x10\x13\x72\x66\x76\xcb\x78\xc9\xb6\x25\x4e\x5b\xc0\x55\xe1\x51\x40\x2e\x51\x03\x4d\x33\xf6\x7e\xa5\x45\xd6\x53\x1f\xc8\xf6\xc8\x01\x02\x27\x02\x2a\xaa\x5e\x91\xdd\x56\x1e\x5c\x26\x85\x61\xb5\xdf\x71\x83\x07\xb2\x6b\x97\xd2\x4f\x62\x51\x9b\xe2\x8a\x66\xf7\xad\x86\xd4\x31\xcc\x9e\x86\x88\xb4\xe5\x11\x26\x65\xab\xdd\xe4\x3f\xe1\x85\xdc\xc4\xe1\x5d\xff\x68\x91\xf5\xaf\x55\xa4\x80\x05\x35\x89\x1f\x9d\x46\x13\x02\xee\xb9\xd0\x74\x87\xe6\x8a\x1d\xd9\x96\x97\xdc\x3c\x24\x3e\x72\xec\x2a\xad\x4f\xed\x3a\x81\x8b\x37\x71\xba\xc7\xf8\xe7\x76\x0e\x7c\xfa\x47\xd2\x03\xec\xa6\x9e\x2b\x9a\xae\x69\x3a\xdf\x05\x07\x3a\x4b\x83\x26\xe7\x0f\x04\xa3\x2a\x6d\x62\xce\x41\xc2\xb5\x0d\x1a\xa9\x9e\x90\x5c\xf7\x65\xa7\xdb\x5a\xb1\x01\x5e\xc2\x0d\x64\x7b\xcc\x6e\x34\xd9\x7e\x8b\x85\x54\xcd\x94\x4c\xc9\x88\x1b\xbf\xc9\xaa\x0d\x9c\x05\x1c\xc3\xc6\xc8\xb1\x08\x0a\xa2\xbd\x95\x0a\xca\xb8\x2d\xe1\xd1\x8b\x4e\x58\xc0\x4c\xbb\xd7\x99\xd5\xe5\xb0\xc3\xee\x11\x77\xa6\x22\xda\xa3\x7d\x7b\x96\x74\x70\x05\xda\xe3\xe9\xd6\xfd\x44\xe6\xee\xaa\x82\xec\xf5\xae\xb7\x3a\x9e\x8c\x60\x61\xfb\x93\xd0\x5f\x0f\xae\x27\xe8\x9a\x89\xb6\x4f\xf0\xfd\xc3\x22\xd7\xc9\x61\xaa\xd9\x2d\x26\x17\xe7\x8e\xd2\x1b\xb0\x06\xc7\x49\xfb\xcc\xbc\xe0\xb8\x38\x0f\x52\xe8\x48\x53\xf4\xbc\x04\x99\x97\x8c\x48\x8a\xb8\xcb\x87\x02\x45\xf1\x4a\x2e\x6e\x46\x03\xe9\x64\x2b\x34\x19\x61\xec\xc7\xda\xa9\xe0\x9e\x80\x61\x6a\x87\xe6\xc7\x0e\xd1\x1d\xc3\x76\x53\x23\xff\x7f\xa0\xf2\x41\x4d\xe8\xab\x97\xf0\xbf\x00\x00\x00\xff\xff\x2f\x60\x46\x34\x14\x19\x00\x00"

func roxcontractCdcBytes() ([]byte, error) {
	return bindataRead(
		_roxcontractCdc,
		"RoxContract.cdc",
	)
}

func roxcontractCdc() (*asset, error) {
	bytes, err := roxcontractCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "RoxContract.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x51, 0x5b, 0xae, 0x1, 0x84, 0x8a, 0x86, 0x88, 0x31, 0x7e, 0x6, 0x78, 0xdf, 0x6, 0x67, 0x5c, 0x62, 0x55, 0xcd, 0x1a, 0xa5, 0xe0, 0xbb, 0x68, 0xe5, 0x84, 0xc6, 0x8, 0xe4, 0x18, 0x6f, 0x8e}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"NonFungibleToken.cdc": nonfungibletokenCdc,
	"RoxContract.cdc":      roxcontractCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"NonFungibleToken.cdc": {nonfungibletokenCdc, map[string]*bintree{}},
	"RoxContract.cdc": {roxcontractCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
