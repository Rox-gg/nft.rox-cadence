// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../contracts/NonFungibleToken.cdc (4.968kB)
// ../../../contracts/RoxContract.cdc (8.653kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _nonfungibletokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x41\x8f\xdb\xb8\x0e\x3e\x37\x40\xfe\x03\xdb\x02\xaf\x33\x45\x26\x79\x87\x87\x77\x08\x50\xbc\xbe\xed\x34\x40\x2e\xb3\xc5\x6c\x16\x7b\x28\x0a\x44\xb1\xe8\x44\xa8\x2c\xb9\x92\x9c\x34\x5b\xcc\x7f\x5f\x90\x92\x65\x3b\xc9\xcc\x4e\x4f\xbb\x87\xed\xc4\x96\xc8\x8f\x1f\xc9\x8f\xf4\xec\xed\xdb\xf1\x68\x3c\x7a\xfd\x1a\x56\x3b\x84\x85\xb6\x07\xb8\xb3\xe6\x66\xd1\x98\xad\xda\x68\x84\x95\xfd\x8a\x06\x7c\x10\x46\x0a\x27\xd3\xd1\xf5\x9d\x35\xed\x09\x3e\xb0\x86\xc2\x9a\xe0\x44\x11\x40\x99\x80\xae\x14\x05\xd2\x59\xb2\x99\x1f\x40\xd8\x89\x00\x42\x6b\x30\xd6\xdc\x94\xad\x87\xc0\x1e\xda\xfb\x1e\x0a\xdb\x68\x49\xbf\x4b\xeb\x2a\x08\x76\x3a\x1e\x2d\x4b\x10\xd0\x78\x74\x70\x10\x26\x78\x08\x16\x24\xd6\xda\x1e\x41\x80\xc1\x03\x98\x32\x64\x03\x13\x08\x3b\x54\xae\x03\x74\x60\x7b\x06\x51\x8e\x47\xc1\x82\xaa\x6a\x8d\x15\x9a\x40\xe7\xe0\x34\x90\x0e\xed\x34\xe1\x3f\x37\xb5\x13\x7b\x42\x0d\xa5\xd5\x44\x17\x05\x44\xa6\x5c\xa3\xd1\x83\x30\x12\x8c\xa8\x94\xd9\x8e\x47\x1c\x6f\x18\x50\xe0\x6b\x2c\x54\xa9\xd0\x4f\x33\x95\x8b\xd5\x1a\x1c\x7a\xdb\xb8\x8e\xb3\xc2\x3a\xcc\x0f\x21\x1c\xeb\x44\x9e\xc3\xda\xa1\x47\xe2\x40\x18\xb8\x5b\xac\x40\x19\xf6\xe0\x2b\xe1\x3a\x0e\xb2\xf1\x0f\x56\x6b\x2c\x82\xb2\x66\x0d\xf7\x27\x3e\x3a\xf3\x64\xd9\x07\xeb\x08\x3e\xd3\xfc\xc6\xb3\xed\x22\xdf\xa6\x1c\x50\x6a\x0b\xdd\x48\x3e\x55\xe2\x01\xca\xc6\xf0\x4b\xce\x87\x60\x2e\x08\x8a\x3d\x18\x74\xf4\x08\x85\x57\xfa\x38\x1e\x55\x76\x9f\xb2\xec\x09\x2e\x31\x64\x9b\x00\xb6\xe4\xe3\x03\x27\x11\xf5\x27\x67\xf7\x4a\xa2\x5b\xf3\xd9\xf5\x3d\x16\xa8\xf6\xf4\x33\x43\xce\x84\xfa\x14\x8d\xef\x3f\x03\x89\x85\x16\x0e\x7b\x08\x0f\x2a\xec\xc0\xdb\x0a\xa1\x76\xc8\x66\x6b\xeb\x99\x30\xa9\xf8\x44\xca\x96\xc3\x6f\x8d\x72\xc8\xc8\x3a\xf2\x7a\xd9\x2e\xd0\x05\xa1\x4c\xca\x31\x5b\xda\xe0\x4e\xec\x95\x75\xb9\x4b\x7c\x5b\x3b\x47\x20\x14\x1e\x6b\xe1\x44\x40\xd8\x60\x21\x1a\x42\x1a\x60\xab\xf6\xe8\xd9\x0b\x97\x35\xfd\x21\x36\x4a\xab\x70\x24\x5f\x7e\x47\xf7\x04\x38\x2c\xd1\xa1\xa1\x9c\x05\x9b\xea\xba\x8f\x8a\x10\x5b\xa3\x8f\x80\xdf\x6b\xeb\x93\xc1\x52\xa1\x96\xb1\x10\xbb\xf8\x95\x01\x6b\x10\xac\x83\xca\x3a\x1c\x8f\x12\xf9\x1d\x67\x53\x58\x52\x6f\x7a\x9b\xa0\x11\x2c\x7f\x8a\xab\x12\x5f\x11\x8a\xc6\x07\x5b\xe5\x5c\xb4\xcc\x0d\xfa\x6a\x98\x0e\x6a\x57\x0b\x7b\xe1\x94\x6d\xc8\xa6\x32\xdb\x94\x11\xb2\x1f\x2b\x83\x29\xfb\xe5\x08\x8d\x27\x5a\xb3\x71\x0e\xa3\x33\x35\x49\xb8\x6c\xc9\x05\x3a\xac\x7a\x0f\x85\x30\xe0\xd1\xc8\xf1\x88\xae\xb9\x58\x37\x6d\xe9\xd5\x88\xee\x26\xd8\x1b\xfa\x77\xc2\xee\xa9\x0a\x29\x75\x66\x4b\x10\xd9\x0b\x77\x39\x21\x13\x50\x20\x99\xd5\xa0\x51\x6e\xd1\x8d\x47\x17\x5a\x6c\x65\xd9\x5d\xdb\x8b\xd4\x06\xc6\x86\x1d\x3a\x86\x39\xc9\xa2\xc5\xb2\xe1\x89\xa1\x23\x5b\x97\x4e\xc4\x5e\xb9\x5b\xac\xc6\xa3\xd2\xd9\xea\x2c\xb9\x2c\x63\x06\x8a\x56\x5d\x24\xd6\xd6\xab\x90\x53\x0a\xd6\x0c\x9c\xbd\xf1\xe3\xd1\xb0\x60\x0b\x4b\x19\x09\xb1\x96\x83\x13\xc6\x97\xe8\x18\xf6\xdb\x19\xfd\x7f\x36\x63\xc9\xaf\xa8\x9a\x63\xb7\x9f\x2a\xf8\x14\x7e\x65\xfb\xfd\xb7\x94\x38\xad\xf9\xb6\xaa\x6a\xeb\x42\xcc\x50\x2f\xf9\xca\xf7\x67\xc0\x6c\x36\x1e\xd5\xcd\xe6\x82\xf5\x73\xed\xfd\x41\xb0\x00\x00\x12\xb4\x60\x83\xd0\x60\x9a\x6a\x83\x8e\xe5\x22\x26\x92\x6b\x57\xf9\x28\x8b\xca\x00\x7e\x57\x3e\xc4\x2e\xa1\xcb\xe4\x6d\x2f\x5c\xbc\xfd\x5b\x53\xd7\xfa\x38\x87\xdf\x97\x26\xfc\xf7\x3f\x3d\xfb\x1f\xf7\x11\xad\x08\x80\x95\x0a\x01\x25\x1c\x88\xf0\x94\x95\x1e\x5e\x0a\x47\x05\x25\xb4\xfa\x93\x46\x48\xbc\xdf\xb9\x42\x36\xf4\x21\x1d\x5f\x76\x47\xaf\xae\x2f\xbb\x53\x7e\xe8\x51\xa4\x09\xa8\x7c\xae\x0d\x33\xc9\x17\x95\x91\xaa\x10\x81\x6b\x34\x8b\xeb\x99\x74\x26\xcb\x01\x0e\xa2\x67\x05\xa8\xb2\xa6\x43\xc8\xb3\x19\x2c\xcf\x6e\x2b\x0f\xc6\x86\x28\xce\x20\x8a\xc2\x36\x26\xbc\xf1\x3c\x13\xc4\x16\x27\xb0\x26\x43\x6b\xce\x3c\x6c\x10\xd6\x46\xe9\xf5\xf4\x31\x2a\xfe\x48\xee\xaf\x94\x6c\x79\x9f\x30\x92\x39\xfc\x5f\x4a\x87\xde\xff\xef\x11\x66\x1e\xa3\x25\xd5\x3e\x4a\xee\xb0\xe1\xc4\x38\x8d\x2d\xb4\x8c\x25\x35\x7c\x0e\x61\x7d\xfb\x8f\x86\x75\x1b\x0f\x0d\xa2\x0a\xf6\x72\x4c\xcb\xe1\xca\x93\x6a\xca\xe7\xcd\xa1\x5b\x6e\xce\xbd\x9d\xcf\x38\x58\x52\x41\xfe\x88\x47\x7a\xed\xd1\x18\xf5\xad\x41\x58\xde\x26\xf6\x44\xb1\xe3\xd2\xdd\x09\xdf\x9d\x25\x93\x1a\x03\x74\xb0\xe3\xbb\x87\x1e\xdc\xfb\x38\xf4\xaa\x9c\x08\x12\x9d\x84\x91\x0a\xef\x92\xd4\x52\x28\xd9\x00\xef\x63\xa5\x32\x71\x66\x25\xfc\x24\x5d\x28\xa3\x30\x92\xd1\x64\x90\xc7\xc1\x92\x85\xef\x2c\xe4\xbb\xc5\x6a\x7e\x16\xed\x73\x22\xe8\x11\x6e\xa1\x42\xa9\x68\xdc\xb6\x7d\xe0\xa1\x55\xd8\x9e\xbe\x3e\x8b\xf8\x76\x11\x39\x21\x3f\x4b\xb8\x43\xda\x6d\xf2\x2e\x96\xdd\xf4\xea\x8c\xd4\x31\x1e\x52\x01\xe2\x10\x8f\xcc\xb8\x61\x84\x65\x63\xb2\xdd\xab\xf6\x8f\xe5\x6d\x1b\xf2\xf5\x1c\xde\x9f\xf0\xc2\x37\x69\x89\x39\x79\x46\xff\x39\xf4\x8d\x0e\x53\x25\xe1\xdd\x3b\xe8\x5b\x7b\x45\x85\xb3\xbc\x6d\x1b\xa2\x93\x8a\xd8\x6c\x55\xe3\x03\x75\x38\xaf\x94\xa2\x42\x10\xb1\x8b\x68\x2d\x42\x4f\x1d\xb2\xbc\x7d\x35\x74\xf7\xd0\xfd\x7c\x78\x66\x62\x52\xbf\xf9\x96\x8f\x9f\xcc\x4a\xbb\x0f\x76\xf3\x22\x39\x6b\x67\x64\x10\x5f\xbb\xa4\x08\xfe\x4b\xb8\x6d\xc3\xf5\x4d\xf9\x10\x52\xf6\xd3\x71\xea\xbe\x85\xf0\xe2\x45\x9b\x98\x64\xf8\x8a\x49\x8a\x99\xb8\x7e\x32\x56\x6e\xa2\x2c\xa5\x69\x01\x28\x6c\x55\xf1\xb6\x96\x6f\xd4\xcd\x46\x2b\xbf\x83\xd2\xba\xfc\xd5\x32\xc4\xf2\x08\x05\x1d\xe4\x4f\x64\xa2\x38\xed\x97\xa7\x41\xf7\x4f\x6d\x31\x2c\x6f\xfd\xd5\xf5\x1c\x3e\xc7\x4a\xfb\x72\x7e\x66\x63\x9d\xb3\x87\xbb\xc5\xaa\x27\x7e\xd7\x73\xf8\x57\x6e\xe2\xc7\xc4\x24\xc5\x95\x7a\xc2\x14\x8e\xd6\x91\xc1\x67\x4d\x5f\x42\x36\xd8\x2e\xee\xb2\xfd\xac\xc9\x7b\x05\xc9\x50\x2b\x3e\x4f\x14\x49\xc7\xcb\x3c\x37\xef\x24\x17\xcc\xe4\x22\x6f\x83\x12\xba\x55\xfc\x56\x38\xde\x77\x77\x56\xcb\x4e\xbd\x13\xa6\x4b\xe5\xd2\xee\x1c\x34\x6d\x24\x1d\x9e\xc3\xfb\x1f\x91\xa8\x39\x5d\x7e\x38\x71\xf3\xcf\x29\xc8\xd3\x2d\x13\x3b\xe6\xbc\x45\x3a\x38\x1e\x64\xa6\x68\x60\x29\xdf\x0a\x51\x61\xd2\x4d\x25\x41\x38\x27\x8e\xcf\xad\xcf\x81\xcd\x58\x9c\xe0\x30\x34\xce\xa4\x3e\x76\xe2\xd8\xaa\x17\xbd\x8b\xad\xe6\xb0\xcd\xce\x69\x03\xfd\x5d\xad\x0f\xfc\xdd\xb7\x8e\x52\xc9\xa3\xec\x3e\xc1\xe2\x76\xdf\xff\xe6\xbe\xe4\x6a\x36\x03\x6f\xbb\xa9\x1f\xf3\xc4\xdf\x25\x0e\x85\x04\x29\x82\x60\xa6\x78\xaf\xaf\x30\xec\xac\x4c\xe3\x49\x85\x9f\x6a\xbc\xb3\x49\xe0\xf0\xd2\x20\xf0\xa8\xcb\x69\xae\xca\xcf\x4a\x7e\x81\x97\xef\xc0\x28\x3d\x87\x57\x64\x45\x5a\x8c\xbb\x1f\x2f\xd1\xe7\x91\xbd\xfc\x29\xb5\x2f\x1c\x8a\x80\x1f\xab\x3a\x1c\x7b\xdf\x22\xf1\x29\xa7\x0f\xe9\xd5\x05\xbd\x87\xf8\xbd\x16\xd9\x3f\x2d\xf3\x3e\xa3\x47\xe6\xd2\x1e\x38\x11\xbe\x53\x00\x62\xeb\xa2\x77\xca\xf6\xfb\x1e\x98\xbe\x50\x5e\x18\x9e\x69\x70\xb6\x95\x32\xd5\x68\xb6\x61\x47\x53\xf4\xdf\x69\x78\x46\x2f\xb2\xdf\xa1\xed\xd4\xe4\xe8\xfa\x8c\x75\x14\x3d\xfc\x15\x00\x00\xff\xff\xd5\xbe\x00\xcf\x68\x13\x00\x00"

func nonfungibletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_nonfungibletokenCdc,
		"NonFungibleToken.cdc",
	)
}

func nonfungibletokenCdc() (*asset, error) {
	bytes, err := nonfungibletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "NonFungibleToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdb, 0xf, 0xd7, 0xfa, 0xf8, 0x7, 0xd8, 0xf7, 0xa, 0xb6, 0x12, 0xce, 0x79, 0x51, 0x18, 0xed, 0xc5, 0x9e, 0x39, 0xb8, 0xfc, 0x2c, 0x47, 0x69, 0x56, 0xfc, 0x55, 0x77, 0xfb, 0x35, 0xcf, 0x74}}
	return a, nil
}

var _roxcontractCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x5a\xcd\x6e\x1b\x39\x12\x3e\xc7\x80\xdf\xa1\xec\x43\xd2\xc2\xc8\x72\x66\x77\x30\x87\x86\x35\x4e\x1c\x8f\x17\x02\x76\x85\xc0\xd1\x60\x0f\x41\xb0\xa0\xba\x4b\x12\xe1\x6e\x52\x4b\x52\xb6\xbc\x1e\xbf\xfb\x82\x64\xff\xf0\xaf\x2d\x4f\x10\x1d\x62\xb5\xc8\xaa\x22\xbf\xaa\xfa\xaa\xc8\x0e\xad\xb7\x5c\x28\x98\x73\x76\xb3\x63\x6b\xba\xac\x70\xc1\xef\x90\xc1\x4a\xf0\x1a\x4e\xc3\x9f\x27\x45\x59\x9c\x1e\x1f\x1d\x1f\x6d\x77\x4b\x28\x38\x53\x82\x14\x0a\x6e\xf9\xfe\x53\xf3\x3d\x8f\x35\x3d\xe9\xf9\x00\x00\xe7\xe7\xf0\xfb\x3d\x32\x25\xed\xa3\x56\x81\xfa\x19\x5a\xe1\x19\xa3\x8a\x92\x8a\xfe\x0f\xcb\x6c\xd4\x4a\xf5\xd3\xfe\x4d\xd5\xa6\x14\xe4\x21\xa3\x65\x0e\x7f\xcc\x98\xfa\xf5\x97\xb1\x59\x67\x0e\x1f\xcb\x52\xa0\x94\x97\xa3\x50\xe6\x1a\xb7\x5c\x52\xe5\x89\x28\xfe\x82\xc0\xbf\x28\x53\x58\x7a\xf3\x05\xdf\xcf\xca\x1c\xbe\x28\x41\xd9\x3a\xb1\xae\x2b\xbe\xff\x24\x90\x68\xb1\xa5\x9d\xaa\x25\xff\xfe\xb7\x51\xbf\xed\x9a\x2a\x85\x25\x3c\x6c\x90\x01\xd1\x02\x40\x25\x54\xbc\xb8\xc3\x72\x0c\x35\x12\x46\xd9\x5a\xc3\x08\xf3\x95\x92\x50\x10\xc6\xb8\x82\x25\x02\x29\x4b\x2c\x13\xf6\xfe\x69\x44\x93\xe6\xfa\x79\xb7\x7c\x7f\x8d\x52\x09\xfe\xe8\x6d\x68\xe4\xf8\x63\x4e\x6a\x2c\xe1\x33\x51\x1b\xc7\x29\x15\x6a\x97\x54\x15\x16\x8a\x72\xf6\x45\x71\x41\xd6\xa8\xe7\x68\x0c\xba\x87\xa1\xf9\x9f\x77\xcb\x8a\x16\x76\x7a\xff\xdd\x9f\xfd\xb1\xac\xe9\x0b\x8a\xed\x64\x52\x14\x28\x65\x26\xb1\x5a\x8d\xe0\x9e\x08\x58\xf2\x3d\xca\x1c\x3e\x3c\xd9\xfd\xe6\x1a\x88\xe7\x81\xb9\x6c\x57\x2f\x51\x58\x67\x7e\x46\x71\xc5\xf7\x39\x74\x72\xf6\xef\xb3\xeb\x49\x23\x83\x7b\x75\xe5\x22\xea\x00\xb5\xd8\x20\x28\xae\x48\xd5\x68\x06\xbe\xb2\xfe\xba\x59\x48\x50\x1b\xa2\x60\x43\xee\x11\x96\x88\x0c\x6a\x63\xd5\xd7\x6d\x64\xbf\xec\xb6\xdb\xea\xb1\xf5\x83\x6b\x5e\xa0\xe4\x3b\x51\xa0\x09\x8d\x2e\x61\x1a\xdb\x7f\x30\xfa\xdf\x1d\xc2\xec\x1a\x56\x5c\x80\xda\xa0\x46\xa2\x9f\xd1\x82\xba\xf4\x97\x1e\x0e\x33\x52\x63\x1b\xc4\xfe\xa8\x5e\x9f\x8d\x45\x0d\x29\xaf\xe2\xd1\x00\xcd\x5b\x83\xa6\x55\xe5\xa0\x19\x5a\xac\x51\x91\x92\x28\xe2\xcc\xb5\x7f\x9f\xdd\x0d\x52\x46\x55\xe6\x2e\x6e\xfc\x82\xe0\x48\x83\x03\xce\x67\x2b\x30\xfc\x49\x7f\xb4\xbe\x49\x85\x6c\xad\x36\xf0\x1b\xbc\xcf\xe1\x74\x8e\x0f\x06\x5c\x3d\xe2\x24\x18\xd6\x5b\xf5\x78\xea\x2b\x78\xf6\x1f\x75\x50\x4d\x0c\xb8\x30\x75\xa9\x6e\xd2\xc5\x4b\x62\xbe\x31\x33\xb5\xd6\x12\xc3\x16\x6e\x98\xc2\x8a\x54\x12\x53\xf2\x11\xe2\x30\x85\xa7\xd4\xca\x5a\xb0\x60\xda\xe1\xe6\xc2\xdb\xc4\xd0\x8c\x15\x02\x6b\xcd\x0a\x4d\xfc\xcc\xae\x41\x72\x1b\xb9\x54\x01\x95\xec\x9d\x82\x9d\xc4\x12\xc8\x9a\x50\xe6\xcb\x27\x37\x3d\x04\x06\xfc\x04\xd9\xcf\x40\xa4\xcf\x4a\x49\x55\x51\x8e\x7e\xed\xb1\xfe\x06\x53\x78\x1f\x6e\x04\x6b\x9a\xa2\xdb\x5e\xca\xb1\xf6\x1c\x64\x91\x86\x5c\x9a\xdd\xeb\x30\x68\xf7\xce\x38\xd4\x5c\xa0\xc7\xbd\x1d\xf1\x82\xe2\x40\x95\x1f\xd8\xab\x1d\x33\xaa\xb2\x28\x14\xe9\x0a\x4e\x5c\xe7\x26\xc2\xd2\xf7\xbd\x12\x3b\x8c\xe7\xb4\x7b\xf4\x29\x3e\xb9\x45\xf0\x83\xd5\xdb\x71\xbb\x56\x4d\x46\xb7\x7c\x9f\x09\x2c\xe8\x96\x22\x53\x39\xbc\x7d\x8a\xca\x7a\x48\xdf\xcf\x63\x9f\x4e\x82\x22\x38\x06\x45\x51\x74\x25\xf1\x95\x49\xe9\xa2\x93\xc3\xe9\x27\x9b\x84\x7a\x81\xc6\x2d\x42\xb3\xca\x62\x43\xa5\x36\xdd\xd7\xc7\x38\x39\xfd\x1f\x34\x3f\x59\xc6\x9d\x5b\x66\x9e\x0e\x65\xd0\x57\xb3\x87\x6f\x91\xd7\x32\x5f\x7c\x0a\x8c\x56\xa3\xc4\xfa\x03\x2b\xef\x0f\xb3\xc6\xe0\x1a\x74\xb2\x3a\xda\x4e\x7e\x60\xd2\x1c\x98\x6c\xe7\x25\x0c\x46\x94\x51\xda\xd6\xc9\xd0\x03\xb3\x1e\x6a\x63\xe8\x9d\xd4\x15\x97\xef\x98\xe6\x0c\xdd\xba\xa8\x0d\x52\x01\x02\x57\x28\x90\x15\x41\x54\x77\x62\x93\x46\x65\xa6\x74\xd0\xe5\x70\x71\x56\x98\x44\xd6\x55\xb4\x0d\x74\xf3\x67\x1c\x83\x7f\xf8\xd3\x44\xa8\xf8\x6e\x05\x36\xa6\xf5\xbf\xdf\x25\xae\x1d\x6a\xdd\x99\x1f\xf0\xfe\xc9\x28\xc2\xdb\x64\xbd\xd3\x7b\xba\x5e\x74\x7a\x87\xb1\xb7\xcb\xd1\xf1\xd1\x9b\x37\x4d\xdc\x3d\xbb\x5d\xdd\xcd\xa2\xfb\xfe\xd1\x50\x5b\xd1\xe4\xf7\xb2\x42\xed\x74\xc2\xfa\x39\x5e\xfb\x31\xbf\x59\xc4\x1d\xfc\x64\x36\xbf\x59\xb8\x09\xdd\xf5\x43\x77\xc8\xde\x49\x98\x5d\xc7\xb5\xbf\x6f\x37\x43\x52\x7a\x45\xab\xe2\x71\x4d\x3c\xec\x72\x4f\xa2\xeb\x70\xdc\xe0\xb7\x71\xd0\x76\x1b\xaf\xa7\xb6\x71\x42\x5d\x44\x77\xc3\xc9\xea\x78\x2e\xc8\x4c\x77\xe4\x27\xe8\x32\x51\xc3\x35\xac\xda\x44\x15\x0d\x2b\xaf\xa3\x2a\x8c\x2a\xaf\x75\x59\x0e\xb4\x2a\xa2\x19\x17\x03\xe3\x1a\x0f\x5d\xad\x28\x8a\x54\xfb\xd1\xe1\xd3\x70\x9a\x7d\x18\xa8\x4a\xa5\x3d\x8f\xc4\xc5\xd3\xc4\x7f\x74\x60\x69\x36\xec\x57\x75\x4f\xa9\x17\xbd\x3a\x7d\xc4\x8a\x14\x68\xf1\xf1\x4b\x9a\x6b\xb1\x2d\x8e\x01\x1f\x7d\x88\x22\x7f\x7e\xb3\x18\xc5\x62\x6b\x54\xb3\x6b\x99\x8d\x72\xf8\x6a\x9d\xf6\x2d\x9e\xb3\xe4\x42\xf0\x07\x4d\x6c\xce\xc9\x2b\x87\xb7\x29\x13\x43\xd2\xb7\x7c\x3f\x5f\xa9\x40\x81\xeb\xfa\xf9\xcd\xe2\x32\x44\x52\x37\x7b\xab\x86\xae\xe5\xae\x6a\x7b\x3b\x46\xab\xb1\xf9\x95\x96\xfa\xec\x62\xc7\xd5\x4e\x30\x2c\x87\x78\xfb\xfc\x1c\xe4\x86\xef\xaa\x52\x37\x44\x5a\x40\xea\x6e\x96\xd8\x26\x8a\x88\xf5\xce\xf6\x93\xdc\x3c\xaf\x76\xcc\x80\x1d\x74\x02\x5c\xaa\x54\x2b\x90\x35\x6b\x6b\x8a\x2d\xfc\xf9\x67\xfb\xd3\xa5\x09\xf0\x29\xd0\x72\x94\xa7\x59\xb8\x6d\x1c\x2c\x46\x86\xde\xba\x0d\xe4\x86\x98\x66\xd7\xc3\x5b\xd4\x8d\x05\x65\x05\x17\x02\x0b\x35\xdc\xf8\xbb\x71\x96\x88\xb4\x3e\xb8\xf2\x54\xac\x8d\x63\x0e\xfd\x2c\xf8\x3d\x2d\x51\x24\x86\x6e\xb1\x40\x7a\x9f\x1c\x4a\x05\x71\x7c\x3c\xe3\x0f\x0c\x4b\x7d\x12\x6d\x0f\xc7\xbf\xfe\x92\x60\xf1\xf9\xcd\x22\x3e\x78\x45\x89\x68\x52\xae\x53\x08\x17\x67\xde\xa9\x23\xd9\x62\x3e\xb4\xf7\x32\xed\x97\xd9\xb5\x13\xb0\xc9\xa4\x0a\xad\x1a\x5a\x37\xb7\x45\x17\x67\xc1\x12\x26\x02\x6b\x7e\x8f\xd9\x1d\x3e\xe6\xd0\x5b\x18\xc1\xe5\x25\x6c\x09\xa3\x45\x76\x5a\x53\x69\xba\x90\xf9\xcd\xe2\x34\x5d\x59\xbd\xab\x23\x63\x68\x42\xcb\xf6\xf2\xa8\xb3\x27\x2e\x27\xc4\xde\x0b\x45\x5a\x6c\x20\xc1\xc5\x99\x11\x3e\x00\xc8\xab\x68\xe5\x45\x08\xec\x17\x22\x4f\xe0\x43\x90\xef\xe1\xc2\xfc\x62\xab\x79\xba\xd9\x5d\x6a\x22\xaf\xca\x45\x1a\xe5\xaf\xb4\xfc\xd6\x19\x4e\x42\xe8\xde\xa4\x69\xec\x14\x7f\x1d\x72\x0d\xe5\x77\xb6\x0f\x60\x17\x73\x6b\x08\x54\xe3\x8a\x20\x4a\xee\xf0\x51\x1e\x50\xfd\x57\x28\x79\xc0\xe8\xdb\x04\x6a\x44\x1e\x62\xf5\x17\x56\xf3\x5d\x14\x4f\x57\x29\xef\x9d\x18\x2e\x4d\xb1\xad\xe9\xa9\x70\x05\xd3\xa1\xf5\x93\x9d\xda\x1c\xda\x44\x80\x84\xd6\xa7\xe3\x33\x5c\x6c\xc0\xa8\x80\x95\x4c\x1e\x06\x1b\x35\x8c\x56\xaf\x3b\xcf\x0e\x76\x0e\x6d\x7c\xf9\x3b\x7b\xb9\x63\xd0\xf8\xdb\xa3\xc7\xef\xf5\x56\x3d\xf6\x2c\x9b\x25\x09\xab\x1f\x77\x8d\x77\x94\xd0\xa8\xf2\x9a\x32\x57\x65\xdc\xa0\xaf\x50\x15\x9b\xee\xe9\x1f\xa8\x80\x38\x15\x4a\x71\x20\x60\x03\xc3\x5e\xc3\x13\xd6\x1e\xb7\xde\x49\xa7\xf4\x8c\x75\x20\x90\x7b\x42\x2b\xb2\xac\x70\xd2\xe9\x9b\xad\x1c\x09\x28\x39\x4a\xd0\xf5\xd2\x5c\x50\x92\x81\x55\x8e\x2d\x97\x7a\x4a\xa8\x96\x91\x40\xba\xd3\x03\x67\xb0\xdc\x39\x1a\x0b\xce\x14\x69\xce\x86\x54\x61\x3d\x2b\xc7\x8e\x5f\x0f\xea\x22\xac\xb4\x97\x30\xce\x6f\x8d\x4a\x99\xd2\x19\x60\xa4\x45\x27\xbe\x4f\x0d\xae\xd9\x7f\xfc\x97\x02\x63\xab\xe7\xfa\xb5\x19\xa6\xb3\xc5\x59\xd1\x54\x53\xd2\x47\x0b\x66\xa6\x15\x07\x87\xf3\xc9\x1a\xd5\x27\xb2\x25\x4b\x5a\x51\xf5\x98\xa5\xe1\xed\x2f\xc2\x43\x69\x4b\x03\x17\x6f\xd3\x72\x4f\xee\xcf\x89\x46\xe3\xf9\xb7\x2c\x50\xd8\x57\xc5\x4f\xba\x75\xd3\xad\xdf\xda\xdb\xd0\xe9\x28\x0a\xe1\x7e\x70\x12\xb1\x92\xc5\x2e\x8c\x61\xaf\x19\x32\xb7\xf9\x71\x67\xd2\x27\xd9\x15\xdf\x7f\xff\x0d\xaf\xbd\x99\x7f\xb8\xe2\x7b\x27\xd5\x7a\x8d\xfa\x5f\x57\x5f\xfb\xed\x85\x2b\x14\xf3\x1e\xe1\xab\xd5\xd9\xde\x9b\x5c\x9c\x9d\x34\x56\x5e\x45\xdb\xda\xbe\xff\xf2\x25\x87\xb7\xcd\xdd\xbd\x6b\x76\xe0\x26\x2c\x5e\x4d\xb3\x0c\xcb\xe1\x79\xd8\xe3\x5e\xd9\xab\x31\x7b\x75\xa9\xd3\x4f\xbb\x15\xf7\x54\xbe\xd0\xc1\x42\x74\x7c\x6c\x6b\xd8\xa0\x75\x5d\xc9\x0e\x23\x60\x5d\x30\xc7\x07\xe3\x77\xc3\x98\x5d\x04\x24\xcc\x75\x97\x3c\xcd\xf4\xc3\xcc\xbc\x46\x75\xc5\xf7\x73\x52\x63\x84\xb1\x0d\x92\xcb\x04\x0d\x0f\x6d\xea\xd2\x5c\xc5\x0f\x58\xa2\x72\xe8\x5d\x9a\x7d\x13\xf2\xd7\x0c\xd9\xfb\xca\xe1\x4d\xcd\x9d\xfb\xa0\x5b\xbe\x9f\xb1\x54\x14\xd9\x2f\x87\x0c\x0f\x5e\xec\xc5\xb5\xe6\xec\xc7\x7c\x3a\x7d\xce\x32\xcc\x11\xc2\xbc\xb0\x25\x86\x2a\xfd\x33\xe0\x8f\xb7\x7d\x7c\xf4\x26\x3e\xb4\x98\xba\x9f\x7c\x5d\x09\x53\x38\x97\xf6\xf1\xdc\xe3\xce\x41\xe1\x9e\xa6\xb5\xec\xd6\x3c\xbd\x28\x1a\xbe\xc8\x0c\x4c\x9a\x61\x37\x87\xec\x85\x8a\x77\x2b\xf4\x3e\x18\x75\x5f\xb0\xfc\x1c\x8c\x99\x78\x0b\xcf\x64\xa9\xbb\xc6\xab\xee\x7d\xd1\x60\x5d\xbb\x38\xf3\x22\x6a\xa0\x1d\x0a\xcc\x34\x4d\xc5\x44\x92\x7b\xcc\x2e\xce\x0a\xa7\x7f\xd0\xe7\x81\x74\x11\x73\xf0\x19\xd2\x57\x51\x76\x37\x58\x03\x0f\x9e\x8a\xc7\x70\xb8\x4c\x1e\xaa\xcb\x63\x50\x44\xac\x51\xbd\x6e\x13\x3e\xaa\xc4\xd0\x5f\x5f\x9d\x22\xa6\x4b\x61\x67\x84\x9c\x63\x54\x18\x4a\x9e\x15\x73\x02\x1b\xf8\x6f\x12\x6f\x9e\x8f\x8f\x74\x38\x1c\x1f\xc1\xff\x03\x00\x00\xff\xff\xa8\xef\x19\x62\xcd\x21\x00\x00"

func roxcontractCdcBytes() ([]byte, error) {
	return bindataRead(
		_roxcontractCdc,
		"RoxContract.cdc",
	)
}

func roxcontractCdc() (*asset, error) {
	bytes, err := roxcontractCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "RoxContract.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa3, 0xfc, 0x95, 0x81, 0x71, 0x37, 0x26, 0x8f, 0xa0, 0x6b, 0xa1, 0xfd, 0x22, 0x15, 0x39, 0xb0, 0x2d, 0xd5, 0x50, 0x12, 0xc2, 0x14, 0x1, 0x8c, 0x33, 0x48, 0xb4, 0x1b, 0x4d, 0xd7, 0x40, 0xf}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"NonFungibleToken.cdc": nonfungibletokenCdc,
	"RoxContract.cdc":      roxcontractCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"NonFungibleToken.cdc": {nonfungibletokenCdc, map[string]*bintree{}},
	"RoxContract.cdc": {roxcontractCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
