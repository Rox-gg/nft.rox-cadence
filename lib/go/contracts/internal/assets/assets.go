// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../contracts/NonFungibleToken.cdc (1.537kB)
// ../../../contracts/RoxItems.cdc (6.008kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _nonfungibletokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x4d\x6f\xda\x40\x10\x3d\x27\x52\xfe\xc3\x24\x87\x0a\x24\x44\x7a\xa8\x7a\xb0\x84\x4a\x15\xd7\x92\x2f\x56\xd4\xba\xea\x21\xca\x61\xd9\x1d\xf0\xaa\xcb\x2e\xd9\x9d\x85\xa6\x11\xff\xbd\x5a\x1b\x7f\x80\x9d\x0a\x7c\x32\xec\xcc\x9b\xf7\xde\xbe\xf1\xc6\x2f\x80\x1b\x4d\x96\x71\x02\xa9\x09\xed\x92\x71\x84\xcc\xe8\xc4\xeb\x95\x5c\x28\xcc\xcd\x6f\xd4\xf0\x76\x73\x7d\x73\x0d\x00\x10\x1a\xb6\xcc\x02\x19\x62\xea\x87\xdf\x6c\xd4\x6b\x04\x3f\x53\x4d\x9f\x3f\x75\x4b\x70\x8b\x9a\xe0\xe1\x80\x9c\x6a\x49\x92\x29\xf9\x17\xc5\x68\xdc\x2f\xfb\x25\xa9\x10\x96\xed\x46\x52\xd4\x58\x13\x58\x5a\xb3\x8e\xe0\xab\x10\x16\x9d\xfb\x32\xd0\x15\xe3\xc6\x38\x49\x47\x4d\x64\xde\x69\xb1\xe8\x8c\xb7\x1c\x3b\x1a\xd3\x2c\xc9\x83\x2e\x38\x3c\xf7\xf7\x90\x17\x08\x5e\xcb\x17\x8f\x90\xc6\x40\x05\x23\x40\xc6\x0b\x08\x95\x05\x73\x6d\x6d\x80\x54\x48\xd0\xce\xae\xce\xf6\x83\x33\xb3\x24\x8f\x7a\xe3\x2e\x83\x68\x69\x3f\x5a\xb3\x95\x02\xed\x29\xd6\xd2\x6b\xd8\xd5\x46\xd6\x2f\x69\x5c\x83\x8f\x23\x98\x9f\x30\x28\x3b\x8d\xa3\xd3\xff\xc2\x63\xd1\x79\x45\x53\x29\x60\x36\x83\x2e\xda\x5d\xf0\x28\x8d\xc1\x2c\x81\x0a\x6c\x8e\x34\x50\x99\x93\xb5\x77\x04\x0b\x2c\xcf\x1c\x5b\x23\x30\x57\xbe\x5b\x7c\xf1\xe8\x08\x05\xa4\xf1\xdd\xf1\xb8\x7d\xfb\x73\x7f\x9e\x05\xdf\x91\xa3\xdc\x56\x16\x5c\x5d\xd5\xe2\xc5\x21\x0f\x25\x91\x4a\xed\xf8\x3c\xbc\x07\xa3\x14\x72\x92\x46\x3f\xfa\x85\x92\x7c\xc8\xda\xf7\xd1\xbb\x55\x2b\xa4\x34\x76\xa3\x71\x04\x4f\x95\xed\xcf\xfd\x9a\x85\xb1\xd6\xec\xb2\x24\xef\x24\x77\x1c\xc1\x87\x2c\xc9\xff\x47\xb7\x43\xd2\xca\x2d\x23\x8c\x9a\x28\x4c\x1a\x47\x26\x83\x5a\x8e\x39\x84\xed\x35\x3b\x8d\x22\x4b\x72\x17\xc1\xfc\xad\xa2\x10\x85\x98\xee\x4f\x8b\xcf\x4b\xd5\x50\xd7\xb0\x61\xe7\x59\x76\x91\x69\xbd\x48\x5b\x1c\x4a\xb4\x43\xb5\x9c\x36\xba\x9f\xa4\x78\x86\xdb\x19\x68\xa9\x22\xb8\x0b\x28\xc2\xa0\x03\x6d\x08\xf0\x8f\x74\xe1\x5b\x58\xe6\x96\x37\x76\xde\x5e\x16\xdb\x40\x9a\x5b\x64\x84\xdf\xd6\x1b\x7a\x6d\xaf\x25\x28\x9d\xf7\x2e\xf3\x28\x72\x03\x3b\x79\xd8\xc7\xda\xac\xa9\x42\xbd\xa2\x22\x2c\xe7\xc7\xc3\x4e\x56\xc3\x44\x87\x71\xb3\x8c\x18\x18\x74\xf9\xb7\x84\xf7\xff\x02\x00\x00\xff\xff\x71\x6f\x04\xe6\x01\x06\x00\x00"

func nonfungibletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_nonfungibletokenCdc,
		"NonFungibleToken.cdc",
	)
}

func nonfungibletokenCdc() (*asset, error) {
	bytes, err := nonfungibletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "NonFungibleToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8c, 0x76, 0x2d, 0x73, 0x79, 0xe3, 0xa8, 0x68, 0xb0, 0xfe, 0x2d, 0x62, 0xde, 0xff, 0x27, 0x6, 0x96, 0x4c, 0xd8, 0xb7, 0x84, 0x76, 0x2e, 0x1d, 0x36, 0xe3, 0x90, 0x33, 0xfe, 0x6a, 0x68, 0x1f}}
	return a, nil
}

var _roxitemsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\xdd\x6f\xe3\xb8\x11\x7f\x4e\x80\xfc\x0f\xb3\x79\x48\x24\xd4\xb1\xb6\x45\xd1\x07\x23\x6e\x76\x1b\xaf\x0f\x7e\xa8\xb1\xb8\x75\x71\x0f\x87\x43\x41\x4b\x23\x9b\x88\x4c\x1a\x24\x65\xaf\x9b\xf3\xff\x5e\x0c\xf5\x45\xea\x23\xce\x6d\xeb\x07\x43\x14\x39\xbf\x19\xce\xd7\x8f\x14\xdf\xed\xa5\x32\xb0\x94\x62\x9e\x8b\x0d\x5f\x67\xb8\x92\x2f\x28\x20\x55\x72\x07\x1f\xbf\x7f\xfc\xcb\xcd\xf5\xcd\x75\x14\xc1\xcf\xf2\xfb\xc2\xe0\x4e\xdb\xc1\x72\xbe\x02\x4e\x23\x48\xa5\xa2\xa9\x0f\xf4\xfa\xe6\x7a\x9f\xaf\x21\x96\xc2\x28\x16\x9b\x5a\x62\xd2\x05\x7f\x25\x50\x00\x80\x28\x82\x2f\x07\x14\x46\x17\x43\x92\x47\x1a\xc3\x73\x89\xb2\x10\xdc\x70\x96\xf1\xff\x60\x12\x84\xed\x45\xbf\x70\xb3\x4d\x14\x3b\x06\x3c\x99\xc0\xbf\x16\xc2\xfc\xed\xaf\x23\x6b\xf8\x04\x3e\x27\x89\x42\xad\x9f\x3a\x32\x33\xdc\x4b\xcd\x8d\x27\x62\xe4\x1b\x02\xff\xe4\xc2\x60\xe2\xad\x8f\x65\x96\x61\x6c\x68\x3f\x8b\x64\x02\xdf\x8c\xe2\x62\x13\x3a\x7b\x5a\xb2\x1d\x26\xf0\x95\x99\xad\xb3\xb1\x0c\x69\x5b\x85\xa4\x14\xdf\x8c\x54\x6c\x83\xb4\x86\x10\xea\xc1\xd0\xfa\xaf\xf9\x3a\xe3\x71\xb1\xbc\x79\xf6\x57\x5b\x53\xd5\x30\x72\x6d\xdf\x6a\x8b\x60\xa4\x61\x19\x88\x7c\xb7\x46\x05\x32\xad\xc3\x05\x66\xcb\x0c\x6c\xd9\x01\x61\x8d\x28\x60\x67\xf7\xdf\x28\x3a\x30\x55\xc8\x7e\xcb\xf7\xfb\xec\x54\x79\xc5\xdd\xfd\x7c\x55\x3f\x7f\x26\x5c\x20\x60\x60\x1a\x98\x68\x26\x09\x4b\xa1\x96\xb9\x8a\x91\xde\x76\xd3\x64\xbc\xa0\x3c\x7b\x2d\x96\x7b\x96\xbf\xa0\xb8\xd7\xb0\x98\x35\x53\x95\x0b\x9a\x30\x75\xe7\x0c\x47\x55\x45\x8b\xb0\x50\xe4\x3b\xe0\x02\xfe\xf1\xa5\xbb\xb6\x37\xc4\xdd\x65\xe4\x9c\xa5\x75\x61\xa5\x96\x80\x67\x52\xdc\x1b\x78\x11\xf2\x08\x47\x72\x26\x37\xc0\x75\xe5\x20\xfa\x71\x41\x19\x28\xb8\x59\xcc\x2e\x64\xd5\xc8\xb3\x7a\xd4\xa3\x30\x74\x3d\x44\x3f\x8d\x59\x3a\xe6\x09\x4c\xa1\xd0\xd0\x33\xeb\xa9\x82\xa9\xaf\xba\x67\x3d\xd9\x00\x53\x6b\x4a\xcf\x6c\x63\x13\x4c\x1d\x03\x9b\x95\xe7\xe2\xf1\x5c\xb9\xc0\x0b\xbd\xcd\xd9\x94\xc5\x58\x67\x60\x3b\xe9\xdd\x0d\x92\x68\x9a\x0b\x48\xca\x32\xb6\xb9\x30\x81\x4f\x9d\xdc\x59\xce\x57\x61\x57\x6c\x83\x66\x31\xd3\x41\x38\x81\x5f\x0b\xef\xfd\xd6\x5d\xb3\x96\x4a\xc9\xe3\x72\xbe\x72\x6a\x3e\x9c\xc0\x5d\x9f\x8a\x21\xe9\x72\x2b\x2d\x84\x6a\x83\x24\xf9\xd4\x0e\x5b\x14\xc1\x22\x05\xb3\x45\x72\x4d\x9e\x51\xca\x50\x16\x09\x9e\x8d\xec\x5b\x9e\x50\x95\x16\xf3\x26\x57\x02\x13\x50\x98\xa2\x42\x11\x63\x07\x49\x6f\x65\x9e\x25\xb0\x46\x2b\xa0\xd9\x0e\xa9\xfc\xe8\x99\xa9\x4d\xbe\xa3\xbe\x66\xa4\x1d\xa7\xb9\xb0\xae\xf6\x21\xf6\x52\x9b\xb6\x81\xf4\x0b\x4a\xdb\xa6\x53\x32\x2c\x84\xdf\x7f\xaf\x5e\x3d\xd9\x94\x9b\x02\x4f\xc2\x49\x57\x8e\x7e\xb7\xcf\x4c\x08\x69\x4a\x0f\x55\xd1\x6e\x36\x31\xb1\xc5\xbd\x98\x0d\x6f\x13\xb8\x06\x2e\x62\xa9\x14\xc6\xe6\xd6\xd7\x72\xee\x4f\xb7\x9e\x84\x73\xd2\x4b\xf1\x03\x33\x38\x19\xcc\xbc\x51\xb7\x27\x7d\x55\xf2\xc0\x13\x54\x3d\x53\x3f\x63\x8c\xfc\xd0\x3b\xd5\x97\xd2\x7e\xee\x50\x5b\x95\x47\x81\xc9\x72\xbe\xd2\x13\xf8\xf4\x5a\xa4\x4d\x4f\x57\x5c\xce\x57\xe7\xb6\x34\x65\xde\xb1\x62\xc3\xea\xa1\x69\x2e\xe1\x40\x85\xb4\x43\x6c\xbb\xa4\x65\xe8\xc7\x87\xa2\xb6\x6b\x93\xc6\x0a\x77\xf2\x80\xc1\x0b\x9e\x26\xd0\x68\x08\xe1\xe9\x09\xf6\x4c\xf0\x38\xb8\xdd\x71\xad\xa9\xb5\x2e\xe7\xab\xdb\xd0\xb5\x90\x7e\xb8\xe3\x2d\xc2\xb6\x8a\xc6\x3c\xa9\x28\xbb\xd6\xa7\x9e\xc6\xac\x60\xe3\x0e\x4a\x91\x13\xf0\xf8\x60\x85\xbd\x90\xff\x60\x8f\x78\xd3\x05\xc5\x03\xd3\x1f\xe0\x93\x5b\xbb\x6d\xab\x7c\xe2\xa1\x46\x59\x6e\xad\xbd\x30\x8a\x80\x25\x89\xcd\x6e\x81\xc7\x12\xbe\x2c\xc4\x84\xdb\xfc\x60\xea\x04\xc7\x2d\x8f\xb7\x50\x38\xbc\xa8\x5a\x99\x25\x20\x05\x76\xd5\xca\x2c\x59\xf5\x07\xec\x57\x9e\xfc\x56\xef\xa1\x37\x1a\xee\x51\x88\xc2\x40\xc7\xa0\xf7\x04\x21\x41\x6d\x94\x3c\xd5\xba\x2f\x84\xa1\xdb\x73\xdb\x3e\x2f\xa3\xda\x4a\xb8\x17\x3c\xe9\x01\xe8\x28\x6a\xba\xb4\xf7\xf6\x27\x34\x1a\x98\xd3\x31\x8c\x2c\x0f\x1d\x44\xf4\xe4\xc9\xb8\xae\x44\x4f\x50\xcb\xe2\xdc\x63\x97\xb0\x2c\x43\x05\x31\x13\xa0\x90\x25\xc0\x8d\x86\x1d\x1a\x96\x30\xc3\x80\x89\xc4\x2e\xa8\xde\x6e\x65\xa2\xff\x37\x0e\x19\xf0\xc6\x5d\x4f\x38\x99\xbe\x44\x43\xfd\x6e\x2a\x93\xf7\x87\x5d\x65\xcf\x6e\x55\x97\x1c\x79\x30\xf8\x9d\x92\x48\x6c\x80\x7c\x22\x53\xeb\x96\x94\x63\x96\x68\x08\xb8\x88\xb3\x3c\xa1\x49\x82\x33\xa7\x3d\x2e\x66\xe1\xb8\x75\x9e\xa3\x9e\xae\x41\xb3\xb4\xa2\x28\x45\x24\x85\x20\x64\xcd\x4d\xe5\x99\x94\x02\xb2\x2e\xc3\x43\xe5\x60\x51\x4b\xa3\xc6\xff\x47\x26\xe6\x69\x5f\x29\x7d\xb0\x94\xd7\x47\x8a\x54\x87\x0a\x53\x98\x0e\xc5\x8c\xe5\x66\x7b\x29\x70\xad\xe8\x13\x1e\xf5\x9d\x3b\xbf\xef\xb8\x2b\xcf\x80\x99\xc6\x3e\x83\x4a\x0c\xc1\xb3\xb7\x38\xb2\x19\x94\x05\x1d\x74\x9a\x61\x55\xe9\xfe\xb6\x06\x50\xe8\xb4\x09\x5d\x0c\x5f\x96\x3a\xd2\xeb\x00\x57\xbb\xc1\x8b\x15\x32\x83\x5f\x76\x7b\x73\x6a\xb8\x33\xe8\xe5\xb1\x0e\x9f\xbb\x16\xd4\x84\x51\x22\x76\xd9\xbf\xba\x56\x5a\x13\xae\xda\xb7\x92\xe2\x4a\x55\xd0\xf5\xd5\x55\x65\x9d\x3d\xe4\xce\x57\x81\xc2\x98\xef\x39\x0a\x33\x81\xbb\xd7\x8b\xa4\x7f\xfe\xc3\x67\x7c\xf0\x0e\xf9\x3d\x2d\xdc\xb9\x9c\xd6\x89\xe2\x5c\xce\x3a\x0a\xbd\x61\xa7\xb1\x47\x51\xc5\x99\xf6\xca\x22\xca\x63\x58\xb9\xc7\x7b\x0d\x2c\x8e\x65\x2e\x0c\xe4\xba\x2c\x6a\xae\x86\x0e\xa1\xb5\xd8\xb8\x45\xc3\x8f\x0f\x65\x24\xdc\xcc\xae\x2f\x43\x7f\x7c\x17\x95\xf7\xe8\xdf\xbf\x1f\x35\xcf\x61\x67\xab\x7d\x7a\x60\xda\xff\xfa\x4f\x10\xfc\x99\xca\xb8\x0c\x05\x25\xc2\xf9\xe6\xfa\xea\xec\x5c\x79\x53\x34\xf1\xb6\x1e\xfd\x84\xa6\xd3\x59\xeb\xf3\xae\xfd\xb0\xc2\x44\xe5\xcb\x7b\xed\xa4\xe4\x88\x7a\x0f\x3b\x30\x9e\xb1\x75\x86\xe3\x1a\x70\x91\x3a\x12\x90\x48\xd4\x40\x27\x69\x7b\x49\x67\x8d\xd1\x2e\x90\x3d\x93\x79\x08\x9c\x04\xa8\x8f\x3b\x7d\x7d\x9d\x3b\x70\xb1\x14\x86\x95\x51\xe7\x06\x77\xe4\xdb\xa6\x95\x5c\xc4\x22\x66\x2c\xfa\x74\xf3\xae\x84\xd4\x7d\x98\x2d\x0f\x91\x68\xad\xc3\x6f\x06\xd6\xbb\xc1\xbf\xfd\x4f\x3b\xa3\x02\x6f\xf6\xae\xb6\xee\x5e\xe9\xa5\x80\x29\x1d\x4a\x3e\x17\xee\x0c\x08\x35\xf4\xb3\x63\xbc\x41\xf3\xcc\xf6\x6c\xcd\x33\x6e\x4e\x41\x8f\x83\x9b\x4f\x30\x6d\xd1\x82\x76\x1e\xef\xfa\x84\x8a\x8e\xf3\x5a\x4f\x0d\xdd\x3b\xce\x7f\x0f\x5a\xb0\xcd\x29\xfb\x99\x6e\x76\x74\x33\xdc\x78\x7b\xba\x0d\x3d\x5e\xfd\x05\xc1\xa8\x5c\x9b\xbe\xe4\x20\x13\x6b\x62\x24\xd7\x13\x52\x41\xf8\xf6\x66\x55\x3a\xd6\xc3\x0b\xb8\x81\x78\x8b\xf1\x8b\xa6\xd8\xaf\x31\x95\xaa\xba\xa1\x51\x2b\xe0\xc6\xe5\xf5\x32\xc0\xb1\xa7\xb1\xc5\xc5\x85\x8e\xb0\xd5\xfe\xa3\xc8\xd2\x48\xf1\xc5\x4f\x35\xd9\x70\x65\xbf\x98\x78\xdc\x62\x79\xa5\xf7\x7b\x1a\x4c\x21\xd2\xc5\x30\xea\x7a\x78\x10\xa1\x09\x29\x01\xec\xed\xe8\xb2\x7c\xe7\x9b\x5b\x9f\xf6\x62\x91\xdb\x83\x8a\xcf\x2a\x5e\xef\xf9\xe8\xce\x57\x1f\x97\x50\x39\xdc\x55\xf3\x91\x9b\x1d\x16\xa9\x6c\x0d\x63\xcd\x0e\x18\x3c\x3e\x14\x92\xce\x89\xbe\x63\x65\xd8\x56\xe6\x54\xc7\xe3\x43\x93\x35\x03\x3c\xfc\xb6\xfa\xd8\xe9\x43\x64\x42\x4f\x0e\xfa\xa6\xf4\x82\x65\x5c\xbc\xbc\x59\x46\x17\x09\x77\x04\xef\xa9\xb4\x37\xab\x7b\x04\x86\xa9\x0d\x9a\x77\x6c\xa2\xd9\x86\xa5\xe6\x81\x2f\xd8\x44\x1b\x74\xe8\xf9\x6f\x00\x00\x00\xff\xff\xc5\x07\xc5\x1d\x78\x17\x00\x00"

func roxitemsCdcBytes() ([]byte, error) {
	return bindataRead(
		_roxitemsCdc,
		"RoxItems.cdc",
	)
}

func roxitemsCdc() (*asset, error) {
	bytes, err := roxitemsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "RoxItems.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb1, 0x20, 0x21, 0xeb, 0xcb, 0x58, 0x2c, 0xc8, 0x1a, 0x4f, 0x41, 0x4e, 0x56, 0xdf, 0xbb, 0x25, 0x2, 0xfa, 0x3, 0x5b, 0x2b, 0x1b, 0x23, 0x66, 0xf8, 0x7c, 0x37, 0x76, 0x38, 0x64, 0x9, 0x5}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"NonFungibleToken.cdc": nonfungibletokenCdc,
	"RoxItems.cdc":         roxitemsCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"NonFungibleToken.cdc": {nonfungibletokenCdc, map[string]*bintree{}},
	"RoxItems.cdc": {roxitemsCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
