// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../contracts/NonFungibleToken.cdc (4.968kB)
// ../../../contracts/RoxContract.cdc (9.473kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _nonfungibletokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x41\x8f\xdb\xb8\x0e\x3e\x37\x40\xfe\x03\xdb\x02\xaf\x33\x45\x26\x79\x87\x87\x77\x08\x50\xbc\xbe\xed\x34\x40\x2e\xb3\xc5\x6c\x16\x7b\x28\x0a\x44\xb1\xe8\x44\xa8\x2c\xb9\x92\x9c\x34\x5b\xcc\x7f\x5f\x90\x92\x65\x3b\xc9\xcc\x4e\x4f\xbb\x87\xed\xc4\x96\xc8\x8f\x1f\xc9\x8f\xf4\xec\xed\xdb\xf1\x68\x3c\x7a\xfd\x1a\x56\x3b\x84\x85\xb6\x07\xb8\xb3\xe6\x66\xd1\x98\xad\xda\x68\x84\x95\xfd\x8a\x06\x7c\x10\x46\x0a\x27\xd3\xd1\xf5\x9d\x35\xed\x09\x3e\xb0\x86\xc2\x9a\xe0\x44\x11\x40\x99\x80\xae\x14\x05\xd2\x59\xb2\x99\x1f\x40\xd8\x89\x00\x42\x6b\x30\xd6\xdc\x94\xad\x87\xc0\x1e\xda\xfb\x1e\x0a\xdb\x68\x49\xbf\x4b\xeb\x2a\x08\x76\x3a\x1e\x2d\x4b\x10\xd0\x78\x74\x70\x10\x26\x78\x08\x16\x24\xd6\xda\x1e\x41\x80\xc1\x03\x98\x32\x64\x03\x13\x08\x3b\x54\xae\x03\x74\x60\x7b\x06\x51\x8e\x47\xc1\x82\xaa\x6a\x8d\x15\x9a\x40\xe7\xe0\x34\x90\x0e\xed\x34\xe1\x3f\x37\xb5\x13\x7b\x42\x0d\xa5\xd5\x44\x17\x05\x44\xa6\x5c\xa3\xd1\x83\x30\x12\x8c\xa8\x94\xd9\x8e\x47\x1c\x6f\x18\x50\xe0\x6b\x2c\x54\xa9\xd0\x4f\x33\x95\x8b\xd5\x1a\x1c\x7a\xdb\xb8\x8e\xb3\xc2\x3a\xcc\x0f\x21\x1c\xeb\x44\x9e\xc3\xda\xa1\x47\xe2\x40\x18\xb8\x5b\xac\x40\x19\xf6\xe0\x2b\xe1\x3a\x0e\xb2\xf1\x0f\x56\x6b\x2c\x82\xb2\x66\x0d\xf7\x27\x3e\x3a\xf3\x64\xd9\x07\xeb\x08\x3e\xd3\xfc\xc6\xb3\xed\x22\xdf\xa6\x1c\x50\x6a\x0b\xdd\x48\x3e\x55\xe2\x01\xca\xc6\xf0\x4b\xce\x87\x60\x2e\x08\x8a\x3d\x18\x74\xf4\x08\x85\x57\xfa\x38\x1e\x55\x76\x9f\xb2\xec\x09\x2e\x31\x64\x9b\x00\xb6\xe4\xe3\x03\x27\x11\xf5\x27\x67\xf7\x4a\xa2\x5b\xf3\xd9\xf5\x3d\x16\xa8\xf6\xf4\x33\x43\xce\x84\xfa\x14\x8d\xef\x3f\x03\x89\x85\x16\x0e\x7b\x08\x0f\x2a\xec\xc0\xdb\x0a\xa1\x76\xc8\x66\x6b\xeb\x99\x30\xa9\xf8\x44\xca\x96\xc3\x6f\x8d\x72\xc8\xc8\x3a\xf2\x7a\xd9\x2e\xd0\x05\xa1\x4c\xca\x31\x5b\xda\xe0\x4e\xec\x95\x75\xb9\x4b\x7c\x5b\x3b\x47\x20\x14\x1e\x6b\xe1\x44\x40\xd8\x60\x21\x1a\x42\x1a\x60\xab\xf6\xe8\xd9\x0b\x97\x35\xfd\x21\x36\x4a\xab\x70\x24\x5f\x7e\x47\xf7\x04\x38\x2c\xd1\xa1\xa1\x9c\x05\x9b\xea\xba\x8f\x8a\x10\x5b\xa3\x8f\x80\xdf\x6b\xeb\x93\xc1\x52\xa1\x96\xb1\x10\xbb\xf8\x95\x01\x6b\x10\xac\x83\xca\x3a\x1c\x8f\x12\xf9\x1d\x67\x53\x58\x52\x6f\x7a\x9b\xa0\x11\x2c\x7f\x8a\xab\x12\x5f\x11\x8a\xc6\x07\x5b\xe5\x5c\xb4\xcc\x0d\xfa\x6a\x98\x0e\x6a\x57\x0b\x7b\xe1\x94\x6d\xc8\xa6\x32\xdb\x94\x11\xb2\x1f\x2b\x83\x29\xfb\xe5\x08\x8d\x27\x5a\xb3\x71\x0e\xa3\x33\x35\x49\xb8\x6c\xc9\x05\x3a\xac\x7a\x0f\x85\x30\xe0\xd1\xc8\xf1\x88\xae\xb9\x58\x37\x6d\xe9\xd5\x88\xee\x26\xd8\x1b\xfa\x77\xc2\xee\xa9\x0a\x29\x75\x66\x4b\x10\xd9\x0b\x77\x39\x21\x13\x50\x20\x99\xd5\xa0\x51\x6e\xd1\x8d\x47\x17\x5a\x6c\x65\xd9\x5d\xdb\x8b\xd4\x06\xc6\x86\x1d\x3a\x86\x39\xc9\xa2\xc5\xb2\xe1\x89\xa1\x23\x5b\x97\x4e\xc4\x5e\xb9\x5b\xac\xc6\xa3\xd2\xd9\xea\x2c\xb9\x2c\x63\x06\x8a\x56\x5d\x24\xd6\xd6\xab\x90\x53\x0a\xd6\x0c\x9c\xbd\xf1\xe3\xd1\xb0\x60\x0b\x4b\x19\x09\xb1\x96\x83\x13\xc6\x97\xe8\x18\xf6\xdb\x19\xfd\x7f\x36\x63\xc9\xaf\xa8\x9a\x63\xb7\x9f\x2a\xf8\x14\x7e\x65\xfb\xfd\xb7\x94\x38\xad\xf9\xb6\xaa\x6a\xeb\x42\xcc\x50\x2f\xf9\xca\xf7\x67\xc0\x6c\x36\x1e\xd5\xcd\xe6\x82\xf5\x73\xed\xfd\x41\xb0\x00\x00\x12\xb4\x60\x83\xd0\x60\x9a\x6a\x83\x8e\xe5\x22\x26\x92\x6b\x57\xf9\x28\x8b\xca\x00\x7e\x57\x3e\xc4\x2e\xa1\xcb\xe4\x6d\x2f\x5c\xbc\xfd\x5b\x53\xd7\xfa\x38\x87\xdf\x97\x26\xfc\xf7\x3f\x3d\xfb\x1f\xf7\x11\xad\x08\x80\x95\x0a\x01\x25\x1c\x88\xf0\x94\x95\x1e\x5e\x0a\x47\x05\x25\xb4\xfa\x93\x46\x48\xbc\xdf\xb9\x42\x36\xf4\x21\x1d\x5f\x76\x47\xaf\xae\x2f\xbb\x53\x7e\xe8\x51\xa4\x09\xa8\x7c\xae\x0d\x33\xc9\x17\x95\x91\xaa\x10\x81\x6b\x34\x8b\xeb\x99\x74\x26\xcb\x01\x0e\xa2\x67\x05\xa8\xb2\xa6\x43\xc8\xb3\x19\x2c\xcf\x6e\x2b\x0f\xc6\x86\x28\xce\x20\x8a\xc2\x36\x26\xbc\xf1\x3c\x13\xc4\x16\x27\xb0\x26\x43\x6b\xce\x3c\x6c\x10\xd6\x46\xe9\xf5\xf4\x31\x2a\xfe\x48\xee\xaf\x94\x6c\x79\x9f\x30\x92\x39\xfc\x5f\x4a\x87\xde\xff\xef\x11\x66\x1e\xa3\x25\xd5\x3e\x4a\xee\xb0\xe1\xc4\x38\x8d\x2d\xb4\x8c\x25\x35\x7c\x0e\x61\x7d\xfb\x8f\x86\x75\x1b\x0f\x0d\xa2\x0a\xf6\x72\x4c\xcb\xe1\xca\x93\x6a\xca\xe7\xcd\xa1\x5b\x6e\xce\xbd\x9d\xcf\x38\x58\x52\x41\xfe\x88\x47\x7a\xed\xd1\x18\xf5\xad\x41\x58\xde\x26\xf6\x44\xb1\xe3\xd2\xdd\x09\xdf\x9d\x25\x93\x1a\x03\x74\xb0\xe3\xbb\x87\x1e\xdc\xfb\x38\xf4\xaa\x9c\x08\x12\x9d\x84\x91\x0a\xef\x92\xd4\x52\x28\xd9\x00\xef\x63\xa5\x32\x71\x66\x25\xfc\x24\x5d\x28\xa3\x30\x92\xd1\x64\x90\xc7\xc1\x92\x85\xef\x2c\xe4\xbb\xc5\x6a\x7e\x16\xed\x73\x22\xe8\x11\x6e\xa1\x42\xa9\x68\xdc\xb6\x7d\xe0\xa1\x55\xd8\x9e\xbe\x3e\x8b\xf8\x76\x11\x39\x21\x3f\x4b\xb8\x43\xda\x6d\xf2\x2e\x96\xdd\xf4\xea\x8c\xd4\x31\x1e\x52\x01\xe2\x10\x8f\xcc\xb8\x61\x84\x65\x63\xb2\xdd\xab\xf6\x8f\xe5\x6d\x1b\xf2\xf5\x1c\xde\x9f\xf0\xc2\x37\x69\x89\x39\x79\x46\xff\x39\xf4\x8d\x0e\x53\x25\xe1\xdd\x3b\xe8\x5b\x7b\x45\x85\xb3\xbc\x6d\x1b\xa2\x93\x8a\xd8\x6c\x55\xe3\x03\x75\x38\xaf\x94\xa2\x42\x10\xb1\x8b\x68\x2d\x42\x4f\x1d\xb2\xbc\x7d\x35\x74\xf7\xd0\xfd\x7c\x78\x66\x62\x52\xbf\xf9\x96\x8f\x9f\xcc\x4a\xbb\x0f\x76\xf3\x22\x39\x6b\x67\x64\x10\x5f\xbb\xa4\x08\xfe\x4b\xb8\x6d\xc3\xf5\x4d\xf9\x10\x52\xf6\xd3\x71\xea\xbe\x85\xf0\xe2\x45\x9b\x98\x64\xf8\x8a\x49\x8a\x99\xb8\x7e\x32\x56\x6e\xa2\x2c\xa5\x69\x01\x28\x6c\x55\xf1\xb6\x96\x6f\xd4\xcd\x46\x2b\xbf\x83\xd2\xba\xfc\xd5\x32\xc4\xf2\x08\x05\x1d\xe4\x4f\x64\xa2\x38\xed\x97\xa7\x41\xf7\x4f\x6d\x31\x2c\x6f\xfd\xd5\xf5\x1c\x3e\xc7\x4a\xfb\x72\x7e\x66\x63\x9d\xb3\x87\xbb\xc5\xaa\x27\x7e\xd7\x73\xf8\x57\x6e\xe2\xc7\xc4\x24\xc5\x95\x7a\xc2\x14\x8e\xd6\x91\xc1\x67\x4d\x5f\x42\x36\xd8\x2e\xee\xb2\xfd\xac\xc9\x7b\x05\xc9\x50\x2b\x3e\x4f\x14\x49\xc7\xcb\x3c\x37\xef\x24\x17\xcc\xe4\x22\x6f\x83\x12\xba\x55\xfc\x56\x38\xde\x77\x77\x56\xcb\x4e\xbd\x13\xa6\x4b\xe5\xd2\xee\x1c\x34\x6d\x24\x1d\x9e\xc3\xfb\x1f\x91\xa8\x39\x5d\x7e\x38\x71\xf3\xcf\x29\xc8\xd3\x2d\x13\x3b\xe6\xbc\x45\x3a\x38\x1e\x64\xa6\x68\x60\x29\xdf\x0a\x51\x61\xd2\x4d\x25\x41\x38\x27\x8e\xcf\xad\xcf\x81\xcd\x58\x9c\xe0\x30\x34\xce\xa4\x3e\x76\xe2\xd8\xaa\x17\xbd\x8b\xad\xe6\xb0\xcd\xce\x69\x03\xfd\x5d\xad\x0f\xfc\xdd\xb7\x8e\x52\xc9\xa3\xec\x3e\xc1\xe2\x76\xdf\xff\xe6\xbe\xe4\x6a\x36\x03\x6f\xbb\xa9\x1f\xf3\xc4\xdf\x25\x0e\x85\x04\x29\x82\x60\xa6\x78\xaf\xaf\x30\xec\xac\x4c\xe3\x49\x85\x9f\x6a\xbc\xb3\x49\xe0\xf0\xd2\x20\xf0\xa8\xcb\x69\xae\xca\xcf\x4a\x7e\x81\x97\xef\xc0\x28\x3d\x87\x57\x64\x45\x5a\x8c\xbb\x1f\x2f\xd1\xe7\x91\xbd\xfc\x29\xb5\x2f\x1c\x8a\x80\x1f\xab\x3a\x1c\x7b\xdf\x22\xf1\x29\xa7\x0f\xe9\xd5\x05\xbd\x87\xf8\xbd\x16\xd9\x3f\x2d\xf3\x3e\xa3\x47\xe6\xd2\x1e\x38\x11\xbe\x53\x00\x62\xeb\xa2\x77\xca\xf6\xfb\x1e\x98\xbe\x50\x5e\x18\x9e\x69\x70\xb6\x95\x32\xd5\x68\xb6\x61\x47\x53\xf4\xdf\x69\x78\x46\x2f\xb2\xdf\xa1\xed\xd4\xe4\xe8\xfa\x8c\x75\x14\x3d\xfc\x15\x00\x00\xff\xff\xd5\xbe\x00\xcf\x68\x13\x00\x00"

func nonfungibletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_nonfungibletokenCdc,
		"NonFungibleToken.cdc",
	)
}

func nonfungibletokenCdc() (*asset, error) {
	bytes, err := nonfungibletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "NonFungibleToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdb, 0xf, 0xd7, 0xfa, 0xf8, 0x7, 0xd8, 0xf7, 0xa, 0xb6, 0x12, 0xce, 0x79, 0x51, 0x18, 0xed, 0xc5, 0x9e, 0x39, 0xb8, 0xfc, 0x2c, 0x47, 0x69, 0x56, 0xfc, 0x55, 0x77, 0xfb, 0x35, 0xcf, 0x74}}
	return a, nil
}

var _roxcontractCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x4b\x6f\x1b\x39\x12\xbe\x0f\x30\xff\xa1\xe2\x43\x22\x61\x64\x39\xb3\x3b\x98\x43\xc3\x1a\x27\x8e\x47\x0b\x01\xbb\x42\xe0\x68\xb0\x07\x23\x58\x50\xdd\x25\x89\x70\x8b\xd4\x90\x6c\x5b\x5e\x8f\xff\xfb\x82\x64\x3f\xf8\x6a\x49\x31\x72\x59\x1d\x92\xee\x26\xab\x8a\xfc\xea\x4d\x9a\x6e\x77\x5c\x28\x98\x73\x36\xad\xd8\x9a\x2e\x4b\x5c\xf0\x7b\x64\xb0\x12\x7c\x0b\x67\xe1\xe7\x71\x5e\xe4\x67\x3f\xfe\xf0\xe3\x0f\xbb\x6a\x09\x39\x67\x4a\x90\x5c\xc1\x2d\xdf\x7f\xaa\x9f\xb3\x98\xd3\xb3\x9e\x0f\x00\x70\x71\x01\xbf\x3f\x20\x53\xd2\xbe\x6a\x16\xa8\xdf\xa1\x21\x9e\x31\xaa\x28\x29\xe9\x7f\xb1\x18\x0c\x1b\xaa\x6e\xda\xbf\xa9\xda\x14\x82\x3c\x0e\x68\x91\xc1\x1f\x33\xa6\x7e\xfd\x65\x64\xd6\x99\xc1\xc7\xa2\x10\x28\xe5\xd5\x30\xa4\xb9\xc1\x1d\x97\x54\x79\x24\x8a\x1f\x20\xf8\x17\x65\x0a\x0b\x6f\xbe\xe0\xfb\x59\x91\xc1\x17\x25\x28\x5b\x47\x04\xd7\x44\xe5\x9b\x9a\xea\xcf\x8a\x30\x45\xd5\x53\x3f\x6d\xbc\xab\x6b\xbe\xff\x24\x90\x68\xf2\xa5\x9d\xac\x69\xff\xfe\xb7\x61\x07\xda\x96\x2a\x85\x05\x3c\x6e\x90\x01\xd1\x04\x40\x25\x94\x3c\xbf\xc7\x62\x04\x5b\x24\x8c\xb2\xb5\x56\x02\xcc\x57\x4a\x42\x4e\x18\xe3\x0a\x96\x08\xa4\x28\xb0\x48\xc8\xfb\xa7\x21\x4d\x8a\xeb\xe6\xdd\xf2\xfd\x0d\x4a\x25\xf8\x93\x07\xc7\xd0\xd1\xe6\x9c\x6c\xb1\x80\xcf\x44\x6d\x1c\x95\x96\xa8\x15\x5a\x96\x98\x2b\xca\xd9\x17\xc5\x05\x59\xa3\x9e\xa3\x51\x68\x5f\xfa\xe6\x7f\xae\x96\x25\xcd\xed\xf4\xee\xd9\x9f\xfd\xb1\xd8\xd2\x03\x8c\xed\x64\x92\xe7\x28\xe5\x40\x62\xb9\x1a\xc2\x03\x11\xb0\xe4\x7b\x94\x19\x7c\x78\xb6\xfb\xcd\x34\x10\x2f\x3d\x73\xb7\x46\x9d\xf3\x6a\xbb\x44\xf1\x19\xc5\x35\xdf\x67\xd0\xd2\xd9\xff\x5f\x5c\x4d\x6a\x1a\x86\x7b\x75\xed\x22\xea\x00\xb5\xd8\x20\x28\xae\x48\x09\xcc\xf0\x04\xbe\xb2\xfa\x9a\x2e\x24\xa8\x0d\x51\xb0\x21\x0f\x08\x4b\x44\x56\xcb\xf6\x79\x1b\xda\x2f\xd5\x6e\x57\xb6\xa6\xe5\x8a\x17\x28\x79\x25\x72\x34\xa6\xd1\xba\x5b\x2d\xfb\x0f\x46\xff\xac\x10\x66\x37\xb0\xe2\x02\xd4\x06\x35\x12\xdd\x8c\x06\xd4\xa5\xbf\xf4\x70\x98\x91\x2d\x36\x66\x1c\x8f\x6e\x51\x91\x82\x28\x92\xc1\xb3\x9d\xd2\x4c\x7d\xf1\xe7\xea\xbd\x58\xbb\xd5\xf0\xf3\x32\x1e\x0d\x90\xbf\x35\xc8\x37\x3c\x03\xe4\xf5\x8f\x32\xaa\x06\xee\xe2\x46\x07\x16\x33\xd4\xe0\x80\xf3\xdb\x09\x0c\x3f\xe9\x9f\xe6\x37\x2e\x91\xad\xd5\x06\x7e\x83\xf7\x19\x9c\xcd\xf1\xd1\x80\xab\x47\x1c\x07\xc3\xed\x4e\x3d\x9d\xf9\x0c\x5e\xfc\x57\x6d\x54\x63\x03\x2e\x4c\xdc\x40\x39\x6e\xed\x25\x31\xdf\x88\x99\x58\x69\x89\x61\x0b\x21\x4c\x60\x45\x4a\x89\x89\x09\x31\x8a\x30\x81\xe7\xd4\xca\x1a\xb0\x60\xd2\xe2\xe6\xc2\x5b\xdb\xd0\x8c\xe5\x02\xb7\x3a\x2a\xd4\xf6\x33\xbb\x01\xc9\xad\xe5\x52\x05\x54\xb2\x77\x0a\x2a\x89\x05\x90\x35\xa1\xcc\xa7\x4f\x6e\xba\x0f\x0c\xf8\x09\x06\x3f\x03\x91\x7e\x54\x4a\xb1\x8a\x7d\xf4\xae\xc3\xfa\x2b\x4c\xe0\x7d\xb8\x11\xdc\xd2\x54\xb8\xed\xa8\x1c\x69\x2f\x81\x17\x69\xc8\xa5\xd9\xbd\x36\x83\x66\xef\x8c\xc3\x96\x0b\xf4\x62\x6f\x1b\x78\x41\x71\xa0\xca\x37\xf1\x55\xc5\x0c\xab\x41\x64\x8a\x74\x05\x6f\x5c\xe5\x26\xcc\xd2\xd7\xbd\x12\x15\xc6\x73\x9a\x3d\xfa\x21\x3e\xb9\x45\xf0\x8d\xd5\xdb\x71\xb3\x56\x0d\xf2\x2d\xdf\x0f\x04\xe6\x74\x47\x91\xa9\x0c\xde\x3e\x47\x45\x41\x18\xbe\x5f\x82\xbc\x37\x02\x45\x51\x7c\x4f\x0f\x75\xa1\xca\xe0\xec\x93\xf5\x48\xbd\x5a\xa3\x23\xa1\xc3\xc6\x62\x43\xa5\xb6\xd5\x2e\x59\xc6\x9e\x1a\xe9\x60\xd0\xe3\x3f\x77\xa2\x36\xab\x09\x30\x5a\x0e\xfb\xb4\x73\x80\x50\xdb\x63\x0f\xf4\x27\x91\x1f\x9e\xf0\xe6\x3b\x3a\xce\xe9\x93\x13\x52\xa3\xd8\x51\xd8\x0a\xcc\xc4\x09\x66\xb5\xd3\x18\xd3\x3b\xa9\x53\x2f\xaf\x98\x0e\x1e\xba\x86\x51\x1b\xa4\x02\x04\xae\x50\x20\xcb\x03\xf3\x6e\xc9\xc6\x35\xcb\x81\xd2\xd6\x97\xc1\xe5\x79\x6e\x3c\x5a\xa7\xd3\xd8\xe2\x47\xb1\xaa\x8e\xff\x6a\xf3\x15\xaf\x66\x60\x0d\x5e\xff\xfb\x2a\x72\x0d\xbb\x05\x3d\x3b\xa6\xf8\xd7\xf1\x6f\x3d\xb0\x79\x1a\x46\xba\x33\xa1\xc4\x29\x87\x5d\xb3\x70\x0a\x92\x91\x07\x56\x5f\x08\x6d\x02\xca\xb2\xa9\x96\x5f\x15\x55\x8e\xd4\xd7\xff\x2f\x71\x46\x17\x3a\xb4\xd9\x43\x1c\x19\x1e\x37\xb4\x44\xa0\x70\xd9\xee\xb7\x37\x1b\x24\xe2\x73\xfb\xe8\x2b\x66\xe4\x9a\x64\x4a\xff\xb1\x04\x0a\x13\xa0\xf0\x13\xb4\x0e\xae\xab\xce\x83\x1b\xb3\xd9\x27\xd9\x10\x35\x4f\x87\xcc\xc5\xe3\xa9\xfb\x8b\xe9\xa2\x7d\xfe\x68\x92\x6c\x5e\xdb\xc4\xb2\x44\xbd\x28\xc2\xba\x39\x5e\x21\x3c\x9f\x2e\xe2\x4e\x74\x3c\x9b\x4f\x17\x2e\x94\x6d\x65\x7e\x8f\xec\x9d\x84\xd9\x4d\x5c\xd9\x76\x8d\x4f\x68\xcd\x27\x14\xcd\x9e\x71\xc6\xc3\xae\xb1\x26\x6a\x6a\x27\x04\xf4\x09\x38\x54\x77\x07\x35\xb2\xb7\xd4\x63\x7e\x13\x89\xfe\x26\x5f\xea\x4f\x3d\x4e\xd8\x08\xf2\x8c\x3b\x72\xc0\xe2\x12\x39\x93\x86\xb5\xa4\xc3\x2a\xb4\x4f\xaf\x18\x5f\xf6\x14\xdf\xa2\x1e\x17\x3d\xe3\x1a\x2b\x5d\x7f\x51\x14\x3d\x29\xdc\x62\xa7\x4b\xea\xf6\xe5\xd4\xd2\xbb\x99\xe1\x29\xb0\xb0\x7d\x78\x5c\x34\x1a\x7f\x8b\x1a\xf5\x1a\x96\x03\xbe\xe5\xf9\x8a\xf6\x54\xb1\x22\x39\x5a\x14\xfd\xa0\xeb\x4a\x6c\x62\x78\x90\x7e\x3f\x44\x7e\x36\x9f\x2e\x86\x31\xd9\x1a\xd5\xec\x46\x0e\x86\x19\xdc\x59\xd5\x7e\x4d\xa4\x07\x2e\x04\x7f\xd4\x79\xdc\x39\x71\xc8\xe0\x6d\x4a\x44\x1f\xf5\x2d\xdf\xcf\x57\x2a\x60\xe0\x1a\xc8\x7c\xba\xb8\x0a\x91\xd4\x4d\xce\xaa\xae\x4e\x64\x55\x36\x3d\x0d\xa3\xe5\xc8\x7c\xa5\x85\xee\xd9\xed\xb8\xaa\x04\xc3\xa2\xaf\x4c\xb9\xb8\x00\xb9\xe1\x55\x59\xe8\x46\x40\x13\x48\xdd\xc5\x11\xdb\x3c\x10\xb1\xae\x6c\x1f\xc5\xcd\xfb\xaa\x62\x06\xec\x20\x19\x71\xa9\x52\x21\x7f\x50\xaf\xad\x2e\x42\xe1\xaf\xbf\x9a\x4f\x57\xc6\x0d\x26\x40\x8b\x61\x96\xae\x07\x9a\xdc\x65\x31\x32\xc1\xb4\xdd\x40\x66\xc2\xe0\xec\xa6\x7f\x8b\x3a\xb7\x51\x96\x73\x21\x30\x57\xfd\x0d\xaf\x6b\x67\x09\x4b\xeb\x8c\x2b\x4b\xd9\xda\x28\x8e\xd8\x9f\x05\x7f\xa0\x85\xce\x58\xd1\xd0\x2d\xe6\x48\x1f\x92\x43\x29\x23\x8e\x8f\x1a\xf8\x23\xc3\x62\x3e\x5d\xb4\x87\x42\xbf\xfe\x92\xc8\x19\xf3\xe9\x22\x0e\xa6\x91\x23\x1a\x97\x6b\x19\xc2\xe5\xb9\xd7\x6d\x27\x2b\xa1\xc7\xe6\x34\xb3\x79\x98\xdd\x38\x06\x9b\x74\xaa\x50\xaa\x49\x22\xe6\x8c\xf5\xf2\x3c\x58\xc2\x58\xe0\x96\x3f\xe0\xe0\x1e\x9f\x32\xe8\x24\x0c\xe1\xea\x0a\x76\x84\xd1\x7c\x70\xb6\xa5\xd2\x14\xdd\xf3\xe9\xe2\x2c\x5d\xfc\x79\x07\xae\x46\xd0\x98\x16\xcd\x91\x6b\x2b\x4f\x5c\x8d\x89\x3d\x4d\x8d\xb8\x58\x43\x82\xcb\x73\x43\x7c\x04\x90\x93\xc2\xca\x41\x08\xec\x03\x91\x6f\xe0\x43\xe0\xef\xe1\xc2\xfc\xd4\xae\xa3\x79\xbd\xbb\xd4\x44\x5e\x16\x8b\x34\xca\x77\xb4\xf8\xda\x0a\x4e\x42\xe8\x9e\x3f\x6b\xec\x14\x3f\x0d\xb9\x3a\xe4\xb7\xb2\x8f\x60\x17\xc7\xd6\x10\xa8\x5a\x15\x81\x95\xdc\xe3\x93\x3c\x56\xb1\x7f\x43\x48\xee\x11\xfa\x36\x81\x1a\x91\xc7\xa2\xfa\x81\xd5\xbc\x2a\xc4\xd3\x55\x4a\x7b\x6f\x4c\x2c\x4d\x45\x5b\x53\xc1\xe1\x0a\x26\x7d\xeb\x27\x95\xda\x1c\xdb\x44\x80\x84\xe6\xa7\xed\x33\x5c\x6c\x10\x51\x01\x4b\x99\xec\x47\x6a\x36\x8c\x96\xa7\x9d\xe3\xf4\x56\x0e\x8d\x7d\xf9\x3b\x3b\x5c\x31\x68\xfc\x6d\xa7\xfd\xfb\x76\xa7\x9e\xba\x28\x3b\x48\x06\xac\x6e\xdc\x15\xde\x86\x84\x9a\x95\x57\xba\xb9\x2c\xe3\x76\x60\x85\x2a\xdf\xb4\x6f\xff\x40\x05\xc4\xc9\x50\x8a\x03\x01\x6b\x18\xf6\xf2\x8a\xb0\xe6\x74\xe1\x9d\x74\x52\xcf\x48\x1b\x02\x79\x20\xb4\x24\xcb\x12\xc7\x2d\xbf\xd9\xca\xa1\x80\x82\xa3\x04\x9d\x2f\xcd\xc1\x3c\xe9\x59\xe5\xc8\xc6\x52\x8f\x09\xd5\x34\x12\x48\xdb\xab\x70\x06\xcb\xca\xe1\x98\x73\xa6\x48\x7d\x14\x42\x15\x6e\x75\x6f\xd6\xe9\xf5\x28\x2f\xc2\x0a\x7b\xf8\xe8\x7c\xab\x59\xca\x14\xcf\x00\x23\x4d\x3a\xf6\x75\x6a\x70\x1d\xfc\xc7\xbf\x4a\x1b\x59\x3e\x37\xa7\x7a\x98\xf6\x16\x67\x45\x13\x1d\x92\x3e\x5a\x30\x07\x9a\x71\xd0\x5f\x8e\xd7\xa8\x3e\x91\x1d\x59\xd2\x92\xaa\xa7\x41\x1a\xde\xee\x02\x28\xa4\xb6\x61\xe0\xf2\x6d\x9a\xee\xd9\xfd\x9c\x28\x34\x5e\x7e\x1b\x04\x0c\xbb\xac\xf8\x49\x97\x6e\xba\xf4\x5b\x7b\x1b\x3a\x1b\x46\x26\xdc\x0d\x8e\xa3\xa8\x64\xb1\x0b\x6d\xd8\x2b\x86\xcc\x2d\x56\x5c\x99\x34\xa7\xae\xd7\x7c\xff\xfa\x7b\x0d\x7b\x1f\xf5\x78\xcd\xf7\x8e\xa3\x75\x1c\xf5\xbf\x27\x9c\x01\xb8\x28\x9a\xdb\xb3\x3b\xcb\xb3\x39\x29\xbc\x3c\x7f\x53\x4b\x39\x29\x68\x6b\xf9\xfe\x95\x63\x06\x6f\xeb\x1b\x2b\x57\x6c\xcf\x51\x4c\xbc\x9a\x7a\x19\x36\x82\x67\x61\x85\x7b\x6d\xcf\x66\xec\x81\xbd\x76\x3e\xad\x54\xdc\x53\x79\xa0\x7e\x85\xa8\xc5\x6c\x32\x58\xaf\x74\x9d\xc7\x8e\x23\x60\x55\x30\xc7\x47\xa3\x75\x13\x2f\x5b\xfd\x27\xc4\xb5\x27\x9a\xf5\xf4\xe3\x71\x79\x8d\xda\x62\xe6\x64\x8b\x11\xc6\xd6\x48\xae\x12\x41\xb8\x6f\x53\x57\xe6\x02\xaa\x47\x12\x95\x7d\x37\xc8\xf6\x4e\xef\xdb\x04\xd9\x03\xb3\xfe\x4d\xd9\xee\xd9\x9e\x26\xdd\xf2\xfd\x8c\xa5\xac\xc8\x3e\x1c\x13\x9c\x38\xca\xb6\xab\x88\x33\xcd\xf9\xf7\xf9\xb5\xfc\x9c\x65\x98\x06\xc2\xfc\x91\x03\x31\x81\xd2\xef\x00\xbf\xbf\x6c\xfb\x7f\xdc\xb5\x98\xc4\x9f\xbc\xa7\x87\x09\x5c\x48\xfb\x7a\xe1\x05\xcf\x5e\xe2\x2e\x4e\x6b\xda\x9d\x79\x3b\x48\x1a\xde\xe0\x07\x22\xcd\xb0\xeb\x46\xf6\xdc\xc5\x3b\x3c\x7a\x1f\x8c\xba\x37\x8b\x3f\x07\x63\xc6\xe4\xc2\xa6\x2c\x75\xac\x7e\xdd\x5e\x94\xf6\x26\xb6\xcb\x73\xcf\xa8\x7a\xea\xa1\x40\x4c\x5d\x55\x8c\x25\x79\xc0\xc1\xe5\x79\xee\x14\x10\xba\x21\x48\x67\x31\x07\x9f\x3e\x7e\x25\x65\xf7\xbd\x49\xf0\x68\x5b\x3c\x82\xe3\x79\xf2\x58\x62\x1e\x81\x22\x62\x8d\xea\xb4\x4d\xf8\xa8\x12\x13\x01\xbb\x04\x15\x05\xbb\x14\x76\x86\xc8\xe9\xa3\x42\x53\xf2\xa4\x98\x16\xac\xe7\xaf\x8b\x6a\x9f\x7f\xf9\x5f\x00\x00\x00\xff\xff\xc6\xea\x30\x6c\x01\x25\x00\x00"

func roxcontractCdcBytes() ([]byte, error) {
	return bindataRead(
		_roxcontractCdc,
		"RoxContract.cdc",
	)
}

func roxcontractCdc() (*asset, error) {
	bytes, err := roxcontractCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "RoxContract.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb4, 0x44, 0xd2, 0x89, 0x27, 0x47, 0x2b, 0x44, 0xd0, 0x2e, 0x70, 0xa6, 0xea, 0xd9, 0x26, 0x32, 0x45, 0x41, 0xf9, 0xb6, 0x79, 0x46, 0x55, 0x3c, 0xf2, 0x8e, 0xa3, 0x5c, 0x63, 0x3f, 0xbb, 0xff}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"NonFungibleToken.cdc": nonfungibletokenCdc,
	"RoxContract.cdc":      roxcontractCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"NonFungibleToken.cdc": {nonfungibletokenCdc, map[string]*bintree{}},
	"RoxContract.cdc": {roxcontractCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
