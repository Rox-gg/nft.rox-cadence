// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../contracts/NonFungibleToken.cdc (4.968kB)
// ../../../contracts/RoxContract.cdc (8.852kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _nonfungibletokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x41\x8f\xdb\xb8\x0e\x3e\x37\x40\xfe\x03\xdb\x02\xaf\x33\x45\x26\x79\x87\x87\x77\x08\x50\xbc\xbe\xed\x34\x40\x2e\xb3\xc5\x6c\x16\x7b\x28\x0a\x44\xb1\xe8\x44\xa8\x2c\xb9\x92\x9c\x34\x5b\xcc\x7f\x5f\x90\x92\x65\x3b\xc9\xcc\x4e\x4f\xbb\x87\xed\xc4\x96\xc8\x8f\x1f\xc9\x8f\xf4\xec\xed\xdb\xf1\x68\x3c\x7a\xfd\x1a\x56\x3b\x84\x85\xb6\x07\xb8\xb3\xe6\x66\xd1\x98\xad\xda\x68\x84\x95\xfd\x8a\x06\x7c\x10\x46\x0a\x27\xd3\xd1\xf5\x9d\x35\xed\x09\x3e\xb0\x86\xc2\x9a\xe0\x44\x11\x40\x99\x80\xae\x14\x05\xd2\x59\xb2\x99\x1f\x40\xd8\x89\x00\x42\x6b\x30\xd6\xdc\x94\xad\x87\xc0\x1e\xda\xfb\x1e\x0a\xdb\x68\x49\xbf\x4b\xeb\x2a\x08\x76\x3a\x1e\x2d\x4b\x10\xd0\x78\x74\x70\x10\x26\x78\x08\x16\x24\xd6\xda\x1e\x41\x80\xc1\x03\x98\x32\x64\x03\x13\x08\x3b\x54\xae\x03\x74\x60\x7b\x06\x51\x8e\x47\xc1\x82\xaa\x6a\x8d\x15\x9a\x40\xe7\xe0\x34\x90\x0e\xed\x34\xe1\x3f\x37\xb5\x13\x7b\x42\x0d\xa5\xd5\x44\x17\x05\x44\xa6\x5c\xa3\xd1\x83\x30\x12\x8c\xa8\x94\xd9\x8e\x47\x1c\x6f\x18\x50\xe0\x6b\x2c\x54\xa9\xd0\x4f\x33\x95\x8b\xd5\x1a\x1c\x7a\xdb\xb8\x8e\xb3\xc2\x3a\xcc\x0f\x21\x1c\xeb\x44\x9e\xc3\xda\xa1\x47\xe2\x40\x18\xb8\x5b\xac\x40\x19\xf6\xe0\x2b\xe1\x3a\x0e\xb2\xf1\x0f\x56\x6b\x2c\x82\xb2\x66\x0d\xf7\x27\x3e\x3a\xf3\x64\xd9\x07\xeb\x08\x3e\xd3\xfc\xc6\xb3\xed\x22\xdf\xa6\x1c\x50\x6a\x0b\xdd\x48\x3e\x55\xe2\x01\xca\xc6\xf0\x4b\xce\x87\x60\x2e\x08\x8a\x3d\x18\x74\xf4\x08\x85\x57\xfa\x38\x1e\x55\x76\x9f\xb2\xec\x09\x2e\x31\x64\x9b\x00\xb6\xe4\xe3\x03\x27\x11\xf5\x27\x67\xf7\x4a\xa2\x5b\xf3\xd9\xf5\x3d\x16\xa8\xf6\xf4\x33\x43\xce\x84\xfa\x14\x8d\xef\x3f\x03\x89\x85\x16\x0e\x7b\x08\x0f\x2a\xec\xc0\xdb\x0a\xa1\x76\xc8\x66\x6b\xeb\x99\x30\xa9\xf8\x44\xca\x96\xc3\x6f\x8d\x72\xc8\xc8\x3a\xf2\x7a\xd9\x2e\xd0\x05\xa1\x4c\xca\x31\x5b\xda\xe0\x4e\xec\x95\x75\xb9\x4b\x7c\x5b\x3b\x47\x20\x14\x1e\x6b\xe1\x44\x40\xd8\x60\x21\x1a\x42\x1a\x60\xab\xf6\xe8\xd9\x0b\x97\x35\xfd\x21\x36\x4a\xab\x70\x24\x5f\x7e\x47\xf7\x04\x38\x2c\xd1\xa1\xa1\x9c\x05\x9b\xea\xba\x8f\x8a\x10\x5b\xa3\x8f\x80\xdf\x6b\xeb\x93\xc1\x52\xa1\x96\xb1\x10\xbb\xf8\x95\x01\x6b\x10\xac\x83\xca\x3a\x1c\x8f\x12\xf9\x1d\x67\x53\x58\x52\x6f\x7a\x9b\xa0\x11\x2c\x7f\x8a\xab\x12\x5f\x11\x8a\xc6\x07\x5b\xe5\x5c\xb4\xcc\x0d\xfa\x6a\x98\x0e\x6a\x57\x0b\x7b\xe1\x94\x6d\xc8\xa6\x32\xdb\x94\x11\xb2\x1f\x2b\x83\x29\xfb\xe5\x08\x8d\x27\x5a\xb3\x71\x0e\xa3\x33\x35\x49\xb8\x6c\xc9\x05\x3a\xac\x7a\x0f\x85\x30\xe0\xd1\xc8\xf1\x88\xae\xb9\x58\x37\x6d\xe9\xd5\x88\xee\x26\xd8\x1b\xfa\x77\xc2\xee\xa9\x0a\x29\x75\x66\x4b\x10\xd9\x0b\x77\x39\x21\x13\x50\x20\x99\xd5\xa0\x51\x6e\xd1\x8d\x47\x17\x5a\x6c\x65\xd9\x5d\xdb\x8b\xd4\x06\xc6\x86\x1d\x3a\x86\x39\xc9\xa2\xc5\xb2\xe1\x89\xa1\x23\x5b\x97\x4e\xc4\x5e\xb9\x5b\xac\xc6\xa3\xd2\xd9\xea\x2c\xb9\x2c\x63\x06\x8a\x56\x5d\x24\xd6\xd6\xab\x90\x53\x0a\xd6\x0c\x9c\xbd\xf1\xe3\xd1\xb0\x60\x0b\x4b\x19\x09\xb1\x96\x83\x13\xc6\x97\xe8\x18\xf6\xdb\x19\xfd\x7f\x36\x63\xc9\xaf\xa8\x9a\x63\xb7\x9f\x2a\xf8\x14\x7e\x65\xfb\xfd\xb7\x94\x38\xad\xf9\xb6\xaa\x6a\xeb\x42\xcc\x50\x2f\xf9\xca\xf7\x67\xc0\x6c\x36\x1e\xd5\xcd\xe6\x82\xf5\x73\xed\xfd\x41\xb0\x00\x00\x12\xb4\x60\x83\xd0\x60\x9a\x6a\x83\x8e\xe5\x22\x26\x92\x6b\x57\xf9\x28\x8b\xca\x00\x7e\x57\x3e\xc4\x2e\xa1\xcb\xe4\x6d\x2f\x5c\xbc\xfd\x5b\x53\xd7\xfa\x38\x87\xdf\x97\x26\xfc\xf7\x3f\x3d\xfb\x1f\xf7\x11\xad\x08\x80\x95\x0a\x01\x25\x1c\x88\xf0\x94\x95\x1e\x5e\x0a\x47\x05\x25\xb4\xfa\x93\x46\x48\xbc\xdf\xb9\x42\x36\xf4\x21\x1d\x5f\x76\x47\xaf\xae\x2f\xbb\x53\x7e\xe8\x51\xa4\x09\xa8\x7c\xae\x0d\x33\xc9\x17\x95\x91\xaa\x10\x81\x6b\x34\x8b\xeb\x99\x74\x26\xcb\x01\x0e\xa2\x67\x05\xa8\xb2\xa6\x43\xc8\xb3\x19\x2c\xcf\x6e\x2b\x0f\xc6\x86\x28\xce\x20\x8a\xc2\x36\x26\xbc\xf1\x3c\x13\xc4\x16\x27\xb0\x26\x43\x6b\xce\x3c\x6c\x10\xd6\x46\xe9\xf5\xf4\x31\x2a\xfe\x48\xee\xaf\x94\x6c\x79\x9f\x30\x92\x39\xfc\x5f\x4a\x87\xde\xff\xef\x11\x66\x1e\xa3\x25\xd5\x3e\x4a\xee\xb0\xe1\xc4\x38\x8d\x2d\xb4\x8c\x25\x35\x7c\x0e\x61\x7d\xfb\x8f\x86\x75\x1b\x0f\x0d\xa2\x0a\xf6\x72\x4c\xcb\xe1\xca\x93\x6a\xca\xe7\xcd\xa1\x5b\x6e\xce\xbd\x9d\xcf\x38\x58\x52\x41\xfe\x88\x47\x7a\xed\xd1\x18\xf5\xad\x41\x58\xde\x26\xf6\x44\xb1\xe3\xd2\xdd\x09\xdf\x9d\x25\x93\x1a\x03\x74\xb0\xe3\xbb\x87\x1e\xdc\xfb\x38\xf4\xaa\x9c\x08\x12\x9d\x84\x91\x0a\xef\x92\xd4\x52\x28\xd9\x00\xef\x63\xa5\x32\x71\x66\x25\xfc\x24\x5d\x28\xa3\x30\x92\xd1\x64\x90\xc7\xc1\x92\x85\xef\x2c\xe4\xbb\xc5\x6a\x7e\x16\xed\x73\x22\xe8\x11\x6e\xa1\x42\xa9\x68\xdc\xb6\x7d\xe0\xa1\x55\xd8\x9e\xbe\x3e\x8b\xf8\x76\x11\x39\x21\x3f\x4b\xb8\x43\xda\x6d\xf2\x2e\x96\xdd\xf4\xea\x8c\xd4\x31\x1e\x52\x01\xe2\x10\x8f\xcc\xb8\x61\x84\x65\x63\xb2\xdd\xab\xf6\x8f\xe5\x6d\x1b\xf2\xf5\x1c\xde\x9f\xf0\xc2\x37\x69\x89\x39\x79\x46\xff\x39\xf4\x8d\x0e\x53\x25\xe1\xdd\x3b\xe8\x5b\x7b\x45\x85\xb3\xbc\x6d\x1b\xa2\x93\x8a\xd8\x6c\x55\xe3\x03\x75\x38\xaf\x94\xa2\x42\x10\xb1\x8b\x68\x2d\x42\x4f\x1d\xb2\xbc\x7d\x35\x74\xf7\xd0\xfd\x7c\x78\x66\x62\x52\xbf\xf9\x96\x8f\x9f\xcc\x4a\xbb\x0f\x76\xf3\x22\x39\x6b\x67\x64\x10\x5f\xbb\xa4\x08\xfe\x4b\xb8\x6d\xc3\xf5\x4d\xf9\x10\x52\xf6\xd3\x71\xea\xbe\x85\xf0\xe2\x45\x9b\x98\x64\xf8\x8a\x49\x8a\x99\xb8\x7e\x32\x56\x6e\xa2\x2c\xa5\x69\x01\x28\x6c\x55\xf1\xb6\x96\x6f\xd4\xcd\x46\x2b\xbf\x83\xd2\xba\xfc\xd5\x32\xc4\xf2\x08\x05\x1d\xe4\x4f\x64\xa2\x38\xed\x97\xa7\x41\xf7\x4f\x6d\x31\x2c\x6f\xfd\xd5\xf5\x1c\x3e\xc7\x4a\xfb\x72\x7e\x66\x63\x9d\xb3\x87\xbb\xc5\xaa\x27\x7e\xd7\x73\xf8\x57\x6e\xe2\xc7\xc4\x24\xc5\x95\x7a\xc2\x14\x8e\xd6\x91\xc1\x67\x4d\x5f\x42\x36\xd8\x2e\xee\xb2\xfd\xac\xc9\x7b\x05\xc9\x50\x2b\x3e\x4f\x14\x49\xc7\xcb\x3c\x37\xef\x24\x17\xcc\xe4\x22\x6f\x83\x12\xba\x55\xfc\x56\x38\xde\x77\x77\x56\xcb\x4e\xbd\x13\xa6\x4b\xe5\xd2\xee\x1c\x34\x6d\x24\x1d\x9e\xc3\xfb\x1f\x91\xa8\x39\x5d\x7e\x38\x71\xf3\xcf\x29\xc8\xd3\x2d\x13\x3b\xe6\xbc\x45\x3a\x38\x1e\x64\xa6\x68\x60\x29\xdf\x0a\x51\x61\xd2\x4d\x25\x41\x38\x27\x8e\xcf\xad\xcf\x81\xcd\x58\x9c\xe0\x30\x34\xce\xa4\x3e\x76\xe2\xd8\xaa\x17\xbd\x8b\xad\xe6\xb0\xcd\xce\x69\x03\xfd\x5d\xad\x0f\xfc\xdd\xb7\x8e\x52\xc9\xa3\xec\x3e\xc1\xe2\x76\xdf\xff\xe6\xbe\xe4\x6a\x36\x03\x6f\xbb\xa9\x1f\xf3\xc4\xdf\x25\x0e\x85\x04\x29\x82\x60\xa6\x78\xaf\xaf\x30\xec\xac\x4c\xe3\x49\x85\x9f\x6a\xbc\xb3\x49\xe0\xf0\xd2\x20\xf0\xa8\xcb\x69\xae\xca\xcf\x4a\x7e\x81\x97\xef\xc0\x28\x3d\x87\x57\x64\x45\x5a\x8c\xbb\x1f\x2f\xd1\xe7\x91\xbd\xfc\x29\xb5\x2f\x1c\x8a\x80\x1f\xab\x3a\x1c\x7b\xdf\x22\xf1\x29\xa7\x0f\xe9\xd5\x05\xbd\x87\xf8\xbd\x16\xd9\x3f\x2d\xf3\x3e\xa3\x47\xe6\xd2\x1e\x38\x11\xbe\x53\x00\x62\xeb\xa2\x77\xca\xf6\xfb\x1e\x98\xbe\x50\x5e\x18\x9e\x69\x70\xb6\x95\x32\xd5\x68\xb6\x61\x47\x53\xf4\xdf\x69\x78\x46\x2f\xb2\xdf\xa1\xed\xd4\xe4\xe8\xfa\x8c\x75\x14\x3d\xfc\x15\x00\x00\xff\xff\xd5\xbe\x00\xcf\x68\x13\x00\x00"

func nonfungibletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_nonfungibletokenCdc,
		"NonFungibleToken.cdc",
	)
}

func nonfungibletokenCdc() (*asset, error) {
	bytes, err := nonfungibletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "NonFungibleToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdb, 0xf, 0xd7, 0xfa, 0xf8, 0x7, 0xd8, 0xf7, 0xa, 0xb6, 0x12, 0xce, 0x79, 0x51, 0x18, 0xed, 0xc5, 0x9e, 0x39, 0xb8, 0xfc, 0x2c, 0x47, 0x69, 0x56, 0xfc, 0x55, 0x77, 0xfb, 0x35, 0xcf, 0x74}}
	return a, nil
}

var _roxcontractCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x5a\xcd\x6e\x23\x37\x12\xbe\x07\xc8\x3b\x94\x7d\xf0\x48\x88\x2c\x27\xbb\x41\x0e\x0d\x2b\x9e\xb1\x1d\x2f\x04\xec\x0a\x03\x8f\x82\x3d\x18\x83\x05\xd5\x5d\x92\x08\x77\x93\x5a\x92\xb2\xe5\x75\xfc\xee\x0b\x92\xfd\xc3\xbf\x96\x34\xc6\xe8\x30\x56\x8b\xac\x2a\xf2\x63\xd5\x57\x55\xec\xa1\xd5\x86\x0b\x05\x33\xce\xee\xb6\x6c\x45\x17\x25\xce\xf9\x23\x32\x58\x0a\x5e\xc1\x69\xf8\xf3\x38\x2f\xf2\xd3\x1f\x7f\xf8\xf1\x87\xcd\x76\x01\x39\x67\x4a\x90\x5c\xc1\x3d\xdf\xdd\xd4\xdf\xb3\x58\xd3\xab\x9e\x0f\x00\x70\x71\x01\x7f\x3c\x21\x53\xd2\x3e\x6a\x15\xa8\x9f\xa1\x11\x9e\x32\xaa\x28\x29\xe9\xff\xb0\x18\x0c\x1b\xa9\x6e\xda\xbf\xa9\x5a\x17\x82\x3c\x0f\x68\x91\xc1\x9f\x53\xa6\x7e\xfb\x75\x64\xd6\x99\xc1\xa7\xa2\x10\x28\xe5\xd5\x30\x94\xb9\xc5\x0d\x97\x54\x79\x22\x8a\xef\x11\xf8\x17\x65\x0a\x0b\x6f\xbe\xe0\xbb\x69\x91\xc1\x17\x25\x28\x5b\x25\xd6\x75\xcd\x77\x37\x02\x89\x16\x5b\xd8\xa9\x5a\xf2\xef\x7f\x1b\x76\xdb\xae\xa8\x52\x58\xc0\xf3\x1a\x19\x10\x2d\x00\x54\x42\xc9\xf3\x47\x2c\x46\x50\x21\x61\x94\xad\x34\x8c\x30\x5b\x2a\x09\x39\x61\x8c\x2b\x58\x20\x90\xa2\xc0\x22\x61\xef\x9f\x46\x34\x69\xae\x9b\x77\xcf\x77\xb7\x28\x95\xe0\x2f\xde\x86\x86\xce\x79\xcc\x48\x85\x05\x7c\x26\x6a\xed\x1c\x4a\x89\xfa\x48\xca\x12\x73\x45\x39\xfb\xa2\xb8\x20\x2b\xd4\x73\x34\x06\xed\x43\xdf\xfc\xcf\xdb\x45\x49\x73\x3b\xbd\xfb\xee\xcf\xfe\x54\x54\x74\x8f\x62\x3b\x99\xe4\x39\x4a\x39\x90\x58\x2e\x87\xf0\x44\x04\x2c\xf8\x0e\x65\x06\x1f\x5f\xed\x7e\x33\x0d\xc4\x5b\xcf\xdc\xca\x1c\xe3\x6c\x5b\x2d\x50\x7c\x46\x71\xcd\x77\x19\xb4\x72\xf6\xef\x9b\x7b\x92\x5a\x86\xe1\x4e\x5d\xbb\x88\x3a\x40\xcd\xd7\x08\x8a\x2b\x52\x02\x33\x3a\x81\x2f\xed\x79\xdd\xcd\x25\xa8\x35\x51\xb0\x26\x4f\x08\x0b\x44\x56\xdb\xf6\x75\x1b\xd9\x2f\xdb\xcd\xa6\x7c\x69\xce\xc1\x35\x2f\x50\xf2\xad\xc8\xd1\xb8\x46\x1b\x30\xb5\xed\x3f\x19\xfd\xef\x16\x61\x7a\x0b\x4b\x2e\x40\xad\x51\x23\xd1\xcd\x68\x40\x5d\xf8\x4b\x0f\x87\x19\xa9\xb0\x71\xe2\x78\xb4\x42\x45\x0a\xa2\x48\x06\xaf\x76\x4a\x33\xf5\xcd\x9f\xab\xf7\x62\xfd\x56\xc3\xcf\xcb\x78\x34\x40\xfe\xde\x20\xdf\xe8\x0c\x90\xd7\x1f\xca\xa8\x1a\xb8\x8b\x1b\xed\x59\xcc\x50\x83\x03\xce\x67\x23\x30\xfc\x49\x7f\xb4\xbe\x71\x89\x6c\xa5\xd6\xf0\x3b\xfc\x9c\xc1\xe9\x0c\x9f\x0d\xb8\x7a\xc4\x09\x30\xac\x36\xea\xe5\xd4\x57\xf0\xe6\x3f\x6a\xa7\x1a\x1b\x70\x61\xe2\x52\xdd\xb8\xf5\x97\xc4\x7c\x63\x66\x62\xad\x25\x86\x2d\x84\x30\x81\x25\x29\x25\x26\x26\xc4\x28\xc2\x04\x5e\x53\x2b\x6b\xc0\x82\x49\x8b\x9b\x0b\x6f\xed\x43\x53\x96\x0b\xac\x34\x2b\xd4\xfe\x33\xbd\x05\xc9\xad\xe7\x52\x05\x54\xb2\x0f\x0a\xb6\x12\x0b\x20\x2b\x42\x99\x2f\x9f\xdc\x74\x1f\x18\xf0\x13\x0c\x7e\x01\x22\x7d\x56\x4a\xa9\x8a\x63\xf4\xa1\xc3\xfa\x2b\x4c\xe0\xe7\x70\x23\x58\xd1\x14\xdd\x76\x52\x8e\xb5\xb7\x20\x8a\x34\xe4\xd2\xec\x5e\xbb\x41\xb3\x77\xc6\xa1\xe2\x02\x3d\xee\x6d\x89\x17\x14\x07\xaa\x7c\x17\x5f\x6e\x99\x51\x35\x88\x5c\x91\x2e\xe1\xc4\x3d\xdc\x84\x5b\xfa\x67\xaf\xc4\x16\xe3\x39\xcd\x1e\x7d\x8a\x4f\x6e\x11\x7c\x67\xf5\x76\xdc\xac\x55\x83\x7c\xcf\x77\x03\x81\x39\xdd\x50\x64\x2a\x83\xb3\xd7\x28\xad\x87\xf4\xfd\x16\x64\xbd\x11\x28\x8a\xe2\x7b\x46\xa8\x0b\x55\x06\xa7\x37\x36\x22\xf5\x6a\xcd\x19\x09\x4d\x1b\xf3\x35\x95\xda\x57\xbb\x64\x19\x47\x6a\x74\x06\x83\x9e\xf8\x79\x10\xb5\x5b\x4d\x80\xd1\x72\xd8\x77\x3a\x7b\x04\xb5\x3f\xf6\x40\x7f\x94\xf8\xfe\x09\x27\xdf\x31\x70\x8e\x9f\x9c\xb0\x1a\x71\x47\x61\x6b\x28\xc3\x13\xcc\x9e\x4e\xe3\x4c\x1f\xa4\x4e\xbd\x7c\xcb\x34\x79\xe8\x1a\x46\xad\x91\x0a\x10\xb8\x44\x81\x2c\x0f\xdc\xbb\x15\x1b\xd7\x2a\x07\x4a\x7b\x5f\x06\x97\xe7\xb9\x89\x68\x9d\x4e\x63\x8f\x1f\xc5\x47\x75\xf8\x53\xbb\xaf\x78\xb7\x02\xeb\xf0\xfa\xdf\x77\x89\x6b\xd8\x2d\xe8\xd9\xa1\x83\x7f\x9f\xfe\x36\x02\x9b\x6f\xc3\xe8\xec\x0c\x95\x38\x05\xad\xeb\x16\x4e\x41\x32\xf2\xc0\xf2\x29\x14\xdc\x28\xd3\x05\xe3\xdd\xbc\xfd\xfe\xc9\xb0\x66\x5e\x53\xc7\xa2\x44\xed\x46\x84\x75\x73\xbc\xca\x66\x76\x37\x8f\x9b\x83\xf1\x74\x76\x37\x77\xe9\xa1\x2d\xb5\x1e\x91\x7d\x90\x30\xbd\x8d\x4b\x95\xae\x92\x0d\xf9\xee\x88\x2a\xc8\x63\xb5\x78\xd8\x65\xb9\x44\x91\xe4\x9c\x69\x9f\x81\x7d\x85\x54\x50\xf4\x78\x4b\x3d\x44\xb8\x91\xe9\x6f\x22\xe1\x7e\x2e\x71\xfc\x20\x20\x0e\x77\xe4\x27\x68\x39\x42\xc3\xde\xaf\xda\xb8\x3a\x0d\x8b\x03\x47\x55\xe8\xa3\x5e\x75\xb5\xe8\xa9\xa6\x44\x3d\x2e\x7a\xc6\x35\x56\x3a\xa1\x52\x14\x3d\x9c\x6c\xb1\xd3\x35\x52\xfb\x70\x6c\x2d\xd5\xcc\xf0\x0e\xb0\xb0\x8d\x55\x5c\x05\x98\x98\x8b\x3a\xaf\x1a\x96\x3d\xb1\xe5\xc5\x8a\x0e\x59\xb1\x24\x39\x5a\x14\xfd\xdc\xec\x5a\x6c\xb2\x7c\xc0\xa7\x1f\xa3\x38\x9b\xdd\xcd\x87\xb1\xd8\x0a\xd5\xf4\x56\x0e\x86\x19\x3c\xd8\xa3\xfd\x1a\xcf\x59\x70\x21\xf8\xb3\x26\x66\xa7\x85\xcc\xe0\x2c\x65\xa2\x4f\xfa\x9e\xef\x66\x4b\x15\x28\x70\x1d\x64\x76\x37\xbf\x0a\x91\xd4\x55\xeb\xb2\x4e\x37\x72\x5b\x36\x45\x2a\xa3\xe5\xc8\xfc\x4a\x0b\xdd\x84\xd9\x71\xb5\x15\x0c\x8b\xbe\xbc\x73\x71\x01\x72\xcd\xb7\x65\xa1\x2b\x3b\x2d\x20\x75\x59\x4e\x6c\x35\x48\xc4\x6a\x6b\x0b\x63\x6e\x9e\x97\x5b\x66\xc0\x0e\xaa\x18\x2e\x55\xaa\x8c\x19\xd4\x6b\xab\xab\x0a\xf8\xeb\xaf\xe6\xa7\x2b\x13\x06\x13\xa0\xc5\x30\x4b\x13\x7c\x53\xf4\x58\x8c\x0c\x99\xb6\x1b\xc8\x0c\x0d\x4e\x6f\xfb\xb7\xa8\x8b\x22\xca\x72\x2e\x04\xe6\xaa\xbf\x83\x71\xfd\x2c\xe1\x69\x9d\x73\x65\x29\x5f\x1b\xc5\x8c\xfd\x59\xf0\x27\x5a\xa0\x48\x0c\xdd\x63\x8e\xf4\x29\x39\x94\x72\xe2\xb8\x77\xe4\xcf\x0c\x0b\xdd\x52\x37\x5d\xfe\x6f\xbf\x26\x72\xc6\xec\x6e\x1e\x93\x69\x14\x88\x26\xe4\x5a\x85\x70\x79\xee\xb5\x4f\xc9\x5a\xf9\xb9\xb9\x60\x6a\xbe\x4c\x6f\x1d\x87\x4d\x06\x55\x68\xd5\x24\x11\x73\xed\x75\x79\x1e\x2c\x61\x2c\xb0\xe2\x4f\x38\x78\xc4\x97\x0c\x3a\x0b\x43\xb8\xba\x82\x0d\x61\x34\x1f\x9c\x56\x54\x9a\x2a\x6a\x76\x37\x3f\x4d\x67\x73\xef\x0e\xcc\x18\x1a\xd3\xa2\xb9\x05\x6b\xed\x89\xab\x31\xb1\x17\x5c\x91\x16\xeb\x48\x70\x79\x6e\x84\x0f\x00\x72\x14\xad\xec\x85\xc0\x7e\x21\xf2\x04\x3e\x06\xf1\x1e\x2e\xcc\x4f\xed\x9a\xcd\xeb\xdd\xa5\x26\xf2\xb2\x98\xa7\x51\x7e\xa0\xc5\xd7\xd6\x70\x12\x42\xf7\x4a\x50\x63\xa7\xf8\x71\xc8\xd5\x94\xdf\xda\x3e\x80\x5d\xcc\xad\x21\x50\xf5\x51\x04\x5e\xf2\x88\x2f\xf2\x80\xea\x6f\xa1\xe4\x1e\xa3\x67\x09\xd4\x88\x3c\xc4\xea\x7b\x56\xf3\x2e\x8a\xa7\xcb\xd4\xe9\x9d\x18\x2e\x4d\xb1\xad\xa9\xe0\x70\x09\x93\xbe\xf5\x93\xad\x5a\x1f\xda\x44\x80\x84\xd6\xa7\xfd\x33\x5c\x6c\xc0\xa8\x80\xa5\x4c\x36\xb2\xb5\x1a\x46\xcb\xe3\x1a\xf3\xde\xca\xa1\xf1\x2f\x7f\x67\xfb\x2b\x06\x8d\xbf\x6d\x9d\xfe\xa8\x36\xea\xa5\x63\xd9\x41\x92\xb0\xba\x71\xd7\x78\x4b\x09\xb5\x2a\xaf\x74\x73\x55\xc6\xed\xc0\x12\x55\xbe\x6e\x9f\xfe\x81\x0a\x88\x93\xa1\x14\x07\x02\xd6\x31\xec\xfb\x04\xc2\x9a\x76\xf1\x83\x74\x52\xcf\x48\x3b\x02\x79\x22\xb4\x24\x8b\x12\xc7\xad\xbe\xe9\xd2\x91\x80\x82\xa3\x04\x9d\x2f\xcd\x4d\x2b\xe9\x59\xe5\xc8\x72\xa9\xa7\x84\x6a\x19\x09\xa4\xed\x55\x38\x83\xc5\xd6\xd1\x98\x73\xa6\x48\xdd\xdb\x52\x85\xd5\xb4\x18\x39\xe7\x7a\x50\x17\x61\x85\xbd\x4d\x72\x7e\xab\x55\xca\x94\xce\x00\x23\x2d\x3a\xf6\xcf\xd4\xe0\x3a\xf8\x8f\xff\x76\x63\x64\xf5\xdc\x1e\x1b\x61\x3a\x5a\x9c\x15\x4d\x34\x25\x7d\xb2\x60\x0e\xb4\xe2\xe0\x86\x61\xbc\x42\x75\x43\x36\x64\x41\x4b\xaa\x5e\x06\x69\x78\xbb\x1b\xfd\x50\xda\xd2\xc0\xe5\x59\x5a\xee\xd5\xfd\x39\x51\x68\xbc\xfd\x3e\x08\x14\x76\x59\xf1\x46\x97\x6e\xba\xf4\x5b\x79\x1b\x3a\x1d\x46\x2e\xdc\x0d\x8e\x23\x56\xb2\xd8\x85\x3e\xec\x15\x43\xe6\xb5\x44\x5c\x99\x34\xd7\x68\xd7\x7c\xf7\xfe\x8b\x6a\xfb\x82\xe1\xf9\x9a\xef\x9c\x40\xeb\x34\xea\x7f\x47\xa9\xa6\xbe\xbf\x73\x33\xaf\x43\x1e\xac\xce\xe6\xea\xe7\xf2\xfc\xa4\xb6\x72\x14\x69\x6b\xfb\xfe\x3b\xa4\x0c\xce\xea\x57\x10\xae\xd9\x9e\x3b\xbc\x78\x35\xf5\x32\x2c\x83\x67\x61\x85\x7b\x6d\x2f\xf5\xec\x0d\xac\x0e\x3e\x7d\xa8\xb8\xa3\x72\x4f\xfd\x0a\x51\x8b\xd9\x64\xb0\x5e\xeb\x3a\x8f\x1d\x46\xc0\x1e\xc1\x0c\x9f\xcd\xa9\x1b\xbe\x6c\xcf\x3f\x61\xae\xbd\xa2\xaa\xa7\x1f\xe6\xe5\x15\x6a\x8f\x99\x91\x0a\x23\x8c\xad\x93\x5c\x25\x48\xb8\x6f\x53\x57\xe6\x8d\x42\x8f\x25\x2a\xfb\x5e\x09\xda\x97\x34\xdf\x66\xc8\xde\xb4\xf6\x6f\xca\x76\xcf\xf6\x5a\xe9\x9e\xef\xa6\x2c\xe5\x45\xf6\xcb\x21\xc3\x89\xbb\x49\xbb\x8a\x38\xd3\x9c\x7f\x9f\x4f\xab\xcf\x59\x86\x69\x20\xcc\x7b\x67\x62\x88\xd2\xef\x00\xbf\xbf\x6d\xfb\x37\xee\x5a\x4c\xe2\x4f\xbe\x78\x85\x09\x5c\x48\xfb\x78\xe1\x91\x67\xaf\x70\xc7\xd3\x5a\x76\x63\x9e\xf6\x8a\x86\xaf\x64\x03\x93\x66\xd8\x0d\x23\x7b\xef\xe2\x5d\x1e\xfd\x1c\x8c\xba\xaf\x8a\x7e\x09\xc6\x8c\xcb\x85\x4d\x59\xea\x9e\xf4\xba\x7d\xf3\xd5\x9b\xd8\x2e\xcf\x3d\xa7\xea\xa9\x87\x02\x33\x75\x55\x31\x96\xe4\x09\x07\x97\xe7\xb9\x53\x40\xe8\x86\x20\x9d\xc5\x1c\x7c\xfa\xf4\x95\x94\x3d\xf6\x26\xc1\x83\x6d\xf1\x08\x0e\xe7\xc9\x43\x89\x79\x04\x8a\x88\x15\xaa\xe3\x36\xe1\xa3\x4a\x0c\x03\x76\x09\x2a\x22\xbb\x14\x76\x46\xc8\xe9\xa3\x42\x57\xf2\xac\x98\x16\xac\xe7\x3f\x7c\xd4\x31\xff\xf6\xff\x00\x00\x00\xff\xff\xb2\x76\x30\xcf\x94\x22\x00\x00"

func roxcontractCdcBytes() ([]byte, error) {
	return bindataRead(
		_roxcontractCdc,
		"RoxContract.cdc",
	)
}

func roxcontractCdc() (*asset, error) {
	bytes, err := roxcontractCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "RoxContract.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x10, 0x37, 0x78, 0xf1, 0xbb, 0x70, 0x3c, 0xe, 0x4c, 0x34, 0x1f, 0x72, 0x7b, 0x29, 0x2f, 0x8e, 0xa9, 0xb9, 0x56, 0x9b, 0x17, 0xf0, 0xbd, 0x85, 0xa3, 0x6b, 0x69, 0x75, 0x61, 0x9f, 0x90, 0xac}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"NonFungibleToken.cdc": nonfungibletokenCdc,
	"RoxContract.cdc":      roxcontractCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"NonFungibleToken.cdc": {nonfungibletokenCdc, map[string]*bintree{}},
	"RoxContract.cdc": {roxcontractCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
