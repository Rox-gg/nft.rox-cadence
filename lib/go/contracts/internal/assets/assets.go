// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../contracts/NonFungibleToken.cdc (4.968kB)
// ../../../contracts/RoxContract.cdc (5.922kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _nonfungibletokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x41\x8f\xdb\xb8\x0e\x3e\x37\x40\xfe\x03\xdb\x02\xaf\x33\x45\x26\x79\x87\x87\x77\x08\x50\xbc\xbe\xed\x34\x40\x2e\xb3\xc5\x6c\x16\x7b\x28\x0a\x44\xb1\xe8\x44\xa8\x2c\xb9\x92\x9c\x34\x5b\xcc\x7f\x5f\x90\x92\x65\x3b\xc9\xcc\x4e\x4f\xbb\x87\xed\xc4\x96\xc8\x8f\x1f\xc9\x8f\xf4\xec\xed\xdb\xf1\x68\x3c\x7a\xfd\x1a\x56\x3b\x84\x85\xb6\x07\xb8\xb3\xe6\x66\xd1\x98\xad\xda\x68\x84\x95\xfd\x8a\x06\x7c\x10\x46\x0a\x27\xd3\xd1\xf5\x9d\x35\xed\x09\x3e\xb0\x86\xc2\x9a\xe0\x44\x11\x40\x99\x80\xae\x14\x05\xd2\x59\xb2\x99\x1f\x40\xd8\x89\x00\x42\x6b\x30\xd6\xdc\x94\xad\x87\xc0\x1e\xda\xfb\x1e\x0a\xdb\x68\x49\xbf\x4b\xeb\x2a\x08\x76\x3a\x1e\x2d\x4b\x10\xd0\x78\x74\x70\x10\x26\x78\x08\x16\x24\xd6\xda\x1e\x41\x80\xc1\x03\x98\x32\x64\x03\x13\x08\x3b\x54\xae\x03\x74\x60\x7b\x06\x51\x8e\x47\xc1\x82\xaa\x6a\x8d\x15\x9a\x40\xe7\xe0\x34\x90\x0e\xed\x34\xe1\x3f\x37\xb5\x13\x7b\x42\x0d\xa5\xd5\x44\x17\x05\x44\xa6\x5c\xa3\xd1\x83\x30\x12\x8c\xa8\x94\xd9\x8e\x47\x1c\x6f\x18\x50\xe0\x6b\x2c\x54\xa9\xd0\x4f\x33\x95\x8b\xd5\x1a\x1c\x7a\xdb\xb8\x8e\xb3\xc2\x3a\xcc\x0f\x21\x1c\xeb\x44\x9e\xc3\xda\xa1\x47\xe2\x40\x18\xb8\x5b\xac\x40\x19\xf6\xe0\x2b\xe1\x3a\x0e\xb2\xf1\x0f\x56\x6b\x2c\x82\xb2\x66\x0d\xf7\x27\x3e\x3a\xf3\x64\xd9\x07\xeb\x08\x3e\xd3\xfc\xc6\xb3\xed\x22\xdf\xa6\x1c\x50\x6a\x0b\xdd\x48\x3e\x55\xe2\x01\xca\xc6\xf0\x4b\xce\x87\x60\x2e\x08\x8a\x3d\x18\x74\xf4\x08\x85\x57\xfa\x38\x1e\x55\x76\x9f\xb2\xec\x09\x2e\x31\x64\x9b\x00\xb6\xe4\xe3\x03\x27\x11\xf5\x27\x67\xf7\x4a\xa2\x5b\xf3\xd9\xf5\x3d\x16\xa8\xf6\xf4\x33\x43\xce\x84\xfa\x14\x8d\xef\x3f\x03\x89\x85\x16\x0e\x7b\x08\x0f\x2a\xec\xc0\xdb\x0a\xa1\x76\xc8\x66\x6b\xeb\x99\x30\xa9\xf8\x44\xca\x96\xc3\x6f\x8d\x72\xc8\xc8\x3a\xf2\x7a\xd9\x2e\xd0\x05\xa1\x4c\xca\x31\x5b\xda\xe0\x4e\xec\x95\x75\xb9\x4b\x7c\x5b\x3b\x47\x20\x14\x1e\x6b\xe1\x44\x40\xd8\x60\x21\x1a\x42\x1a\x60\xab\xf6\xe8\xd9\x0b\x97\x35\xfd\x21\x36\x4a\xab\x70\x24\x5f\x7e\x47\xf7\x04\x38\x2c\xd1\xa1\xa1\x9c\x05\x9b\xea\xba\x8f\x8a\x10\x5b\xa3\x8f\x80\xdf\x6b\xeb\x93\xc1\x52\xa1\x96\xb1\x10\xbb\xf8\x95\x01\x6b\x10\xac\x83\xca\x3a\x1c\x8f\x12\xf9\x1d\x67\x53\x58\x52\x6f\x7a\x9b\xa0\x11\x2c\x7f\x8a\xab\x12\x5f\x11\x8a\xc6\x07\x5b\xe5\x5c\xb4\xcc\x0d\xfa\x6a\x98\x0e\x6a\x57\x0b\x7b\xe1\x94\x6d\xc8\xa6\x32\xdb\x94\x11\xb2\x1f\x2b\x83\x29\xfb\xe5\x08\x8d\x27\x5a\xb3\x71\x0e\xa3\x33\x35\x49\xb8\x6c\xc9\x05\x3a\xac\x7a\x0f\x85\x30\xe0\xd1\xc8\xf1\x88\xae\xb9\x58\x37\x6d\xe9\xd5\x88\xee\x26\xd8\x1b\xfa\x77\xc2\xee\xa9\x0a\x29\x75\x66\x4b\x10\xd9\x0b\x77\x39\x21\x13\x50\x20\x99\xd5\xa0\x51\x6e\xd1\x8d\x47\x17\x5a\x6c\x65\xd9\x5d\xdb\x8b\xd4\x06\xc6\x86\x1d\x3a\x86\x39\xc9\xa2\xc5\xb2\xe1\x89\xa1\x23\x5b\x97\x4e\xc4\x5e\xb9\x5b\xac\xc6\xa3\xd2\xd9\xea\x2c\xb9\x2c\x63\x06\x8a\x56\x5d\x24\xd6\xd6\xab\x90\x53\x0a\xd6\x0c\x9c\xbd\xf1\xe3\xd1\xb0\x60\x0b\x4b\x19\x09\xb1\x96\x83\x13\xc6\x97\xe8\x18\xf6\xdb\x19\xfd\x7f\x36\x63\xc9\xaf\xa8\x9a\x63\xb7\x9f\x2a\xf8\x14\x7e\x65\xfb\xfd\xb7\x94\x38\xad\xf9\xb6\xaa\x6a\xeb\x42\xcc\x50\x2f\xf9\xca\xf7\x67\xc0\x6c\x36\x1e\xd5\xcd\xe6\x82\xf5\x73\xed\xfd\x41\xb0\x00\x00\x12\xb4\x60\x83\xd0\x60\x9a\x6a\x83\x8e\xe5\x22\x26\x92\x6b\x57\xf9\x28\x8b\xca\x00\x7e\x57\x3e\xc4\x2e\xa1\xcb\xe4\x6d\x2f\x5c\xbc\xfd\x5b\x53\xd7\xfa\x38\x87\xdf\x97\x26\xfc\xf7\x3f\x3d\xfb\x1f\xf7\x11\xad\x08\x80\x95\x0a\x01\x25\x1c\x88\xf0\x94\x95\x1e\x5e\x0a\x47\x05\x25\xb4\xfa\x93\x46\x48\xbc\xdf\xb9\x42\x36\xf4\x21\x1d\x5f\x76\x47\xaf\xae\x2f\xbb\x53\x7e\xe8\x51\xa4\x09\xa8\x7c\xae\x0d\x33\xc9\x17\x95\x91\xaa\x10\x81\x6b\x34\x8b\xeb\x99\x74\x26\xcb\x01\x0e\xa2\x67\x05\xa8\xb2\xa6\x43\xc8\xb3\x19\x2c\xcf\x6e\x2b\x0f\xc6\x86\x28\xce\x20\x8a\xc2\x36\x26\xbc\xf1\x3c\x13\xc4\x16\x27\xb0\x26\x43\x6b\xce\x3c\x6c\x10\xd6\x46\xe9\xf5\xf4\x31\x2a\xfe\x48\xee\xaf\x94\x6c\x79\x9f\x30\x92\x39\xfc\x5f\x4a\x87\xde\xff\xef\x11\x66\x1e\xa3\x25\xd5\x3e\x4a\xee\xb0\xe1\xc4\x38\x8d\x2d\xb4\x8c\x25\x35\x7c\x0e\x61\x7d\xfb\x8f\x86\x75\x1b\x0f\x0d\xa2\x0a\xf6\x72\x4c\xcb\xe1\xca\x93\x6a\xca\xe7\xcd\xa1\x5b\x6e\xce\xbd\x9d\xcf\x38\x58\x52\x41\xfe\x88\x47\x7a\xed\xd1\x18\xf5\xad\x41\x58\xde\x26\xf6\x44\xb1\xe3\xd2\xdd\x09\xdf\x9d\x25\x93\x1a\x03\x74\xb0\xe3\xbb\x87\x1e\xdc\xfb\x38\xf4\xaa\x9c\x08\x12\x9d\x84\x91\x0a\xef\x92\xd4\x52\x28\xd9\x00\xef\x63\xa5\x32\x71\x66\x25\xfc\x24\x5d\x28\xa3\x30\x92\xd1\x64\x90\xc7\xc1\x92\x85\xef\x2c\xe4\xbb\xc5\x6a\x7e\x16\xed\x73\x22\xe8\x11\x6e\xa1\x42\xa9\x68\xdc\xb6\x7d\xe0\xa1\x55\xd8\x9e\xbe\x3e\x8b\xf8\x76\x11\x39\x21\x3f\x4b\xb8\x43\xda\x6d\xf2\x2e\x96\xdd\xf4\xea\x8c\xd4\x31\x1e\x52\x01\xe2\x10\x8f\xcc\xb8\x61\x84\x65\x63\xb2\xdd\xab\xf6\x8f\xe5\x6d\x1b\xf2\xf5\x1c\xde\x9f\xf0\xc2\x37\x69\x89\x39\x79\x46\xff\x39\xf4\x8d\x0e\x53\x25\xe1\xdd\x3b\xe8\x5b\x7b\x45\x85\xb3\xbc\x6d\x1b\xa2\x93\x8a\xd8\x6c\x55\xe3\x03\x75\x38\xaf\x94\xa2\x42\x10\xb1\x8b\x68\x2d\x42\x4f\x1d\xb2\xbc\x7d\x35\x74\xf7\xd0\xfd\x7c\x78\x66\x62\x52\xbf\xf9\x96\x8f\x9f\xcc\x4a\xbb\x0f\x76\xf3\x22\x39\x6b\x67\x64\x10\x5f\xbb\xa4\x08\xfe\x4b\xb8\x6d\xc3\xf5\x4d\xf9\x10\x52\xf6\xd3\x71\xea\xbe\x85\xf0\xe2\x45\x9b\x98\x64\xf8\x8a\x49\x8a\x99\xb8\x7e\x32\x56\x6e\xa2\x2c\xa5\x69\x01\x28\x6c\x55\xf1\xb6\x96\x6f\xd4\xcd\x46\x2b\xbf\x83\xd2\xba\xfc\xd5\x32\xc4\xf2\x08\x05\x1d\xe4\x4f\x64\xa2\x38\xed\x97\xa7\x41\xf7\x4f\x6d\x31\x2c\x6f\xfd\xd5\xf5\x1c\x3e\xc7\x4a\xfb\x72\x7e\x66\x63\x9d\xb3\x87\xbb\xc5\xaa\x27\x7e\xd7\x73\xf8\x57\x6e\xe2\xc7\xc4\x24\xc5\x95\x7a\xc2\x14\x8e\xd6\x91\xc1\x67\x4d\x5f\x42\x36\xd8\x2e\xee\xb2\xfd\xac\xc9\x7b\x05\xc9\x50\x2b\x3e\x4f\x14\x49\xc7\xcb\x3c\x37\xef\x24\x17\xcc\xe4\x22\x6f\x83\x12\xba\x55\xfc\x56\x38\xde\x77\x77\x56\xcb\x4e\xbd\x13\xa6\x4b\xe5\xd2\xee\x1c\x34\x6d\x24\x1d\x9e\xc3\xfb\x1f\x91\xa8\x39\x5d\x7e\x38\x71\xf3\xcf\x29\xc8\xd3\x2d\x13\x3b\xe6\xbc\x45\x3a\x38\x1e\x64\xa6\x68\x60\x29\xdf\x0a\x51\x61\xd2\x4d\x25\x41\x38\x27\x8e\xcf\xad\xcf\x81\xcd\x58\x9c\xe0\x30\x34\xce\xa4\x3e\x76\xe2\xd8\xaa\x17\xbd\x8b\xad\xe6\xb0\xcd\xce\x69\x03\xfd\x5d\xad\x0f\xfc\xdd\xb7\x8e\x52\xc9\xa3\xec\x3e\xc1\xe2\x76\xdf\xff\xe6\xbe\xe4\x6a\x36\x03\x6f\xbb\xa9\x1f\xf3\xc4\xdf\x25\x0e\x85\x04\x29\x82\x60\xa6\x78\xaf\xaf\x30\xec\xac\x4c\xe3\x49\x85\x9f\x6a\xbc\xb3\x49\xe0\xf0\xd2\x20\xf0\xa8\xcb\x69\xae\xca\xcf\x4a\x7e\x81\x97\xef\xc0\x28\x3d\x87\x57\x64\x45\x5a\x8c\xbb\x1f\x2f\xd1\xe7\x91\xbd\xfc\x29\xb5\x2f\x1c\x8a\x80\x1f\xab\x3a\x1c\x7b\xdf\x22\xf1\x29\xa7\x0f\xe9\xd5\x05\xbd\x87\xf8\xbd\x16\xd9\x3f\x2d\xf3\x3e\xa3\x47\xe6\xd2\x1e\x38\x11\xbe\x53\x00\x62\xeb\xa2\x77\xca\xf6\xfb\x1e\x98\xbe\x50\x5e\x18\x9e\x69\x70\xb6\x95\x32\xd5\x68\xb6\x61\x47\x53\xf4\xdf\x69\x78\x46\x2f\xb2\xdf\xa1\xed\xd4\xe4\xe8\xfa\x8c\x75\x14\x3d\xfc\x15\x00\x00\xff\xff\xd5\xbe\x00\xcf\x68\x13\x00\x00"

func nonfungibletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_nonfungibletokenCdc,
		"NonFungibleToken.cdc",
	)
}

func nonfungibletokenCdc() (*asset, error) {
	bytes, err := nonfungibletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "NonFungibleToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdb, 0xf, 0xd7, 0xfa, 0xf8, 0x7, 0xd8, 0xf7, 0xa, 0xb6, 0x12, 0xce, 0x79, 0x51, 0x18, 0xed, 0xc5, 0x9e, 0x39, 0xb8, 0xfc, 0x2c, 0x47, 0x69, 0x56, 0xfc, 0x55, 0x77, 0xfb, 0x35, 0xcf, 0x74}}
	return a, nil
}

var _roxcontractCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x4b\x6f\xdb\xb8\x16\x5e\xa7\x40\xff\xc3\x69\x16\x89\x84\xeb\xd8\xbd\x17\x17\x77\x61\xc4\x37\xed\xc4\x75\xe1\xc5\x18\x45\xea\x41\x17\x45\x31\xa0\xa5\x23\x9b\x88\x4c\x1a\x24\x65\xc7\x93\xfa\xbf\x0f\x0e\xf5\x22\xf5\x88\x3b\x9d\xf1\xc2\x90\x44\x9e\xf7\xe3\x3b\x24\xdf\xee\xa4\x32\xb0\x90\x62\x96\x89\x35\x5f\xa5\xb8\x94\x8f\x28\x20\x51\x72\x0b\x6f\x9f\xde\xfe\xe7\xf5\xab\xd7\xaf\x76\xd9\x0a\x22\x29\x8c\x62\x91\x81\x07\xf9\x74\x5f\x3c\x8f\xdb\x74\xcf\xb4\x1f\x00\x60\x34\x82\x0f\x7b\x14\x46\xe7\xaf\xc4\x02\xe9\x1d\x4a\xe2\xb9\xe0\x86\xb3\x94\xff\x81\x71\x10\x36\x37\x7d\xe1\x66\x13\x2b\x76\x08\x78\x3c\x86\xdf\xe6\xc2\xfc\xef\xbf\x03\xab\xd3\x18\xde\xc7\xb1\x42\xad\xef\x5a\x34\x53\xdc\x49\xcd\x8d\x47\x62\xe4\x0b\x04\xbf\x72\x61\x30\xf6\xf6\x47\x32\x4d\x31\x32\x64\xcf\x3c\x1e\xc3\x67\xa3\xb8\x58\x87\x8e\x4d\x0b\xb6\xc5\x18\x3e\x31\xb3\x71\x0c\x4b\x91\xcc\xca\x29\xa5\xf8\x6c\xa4\x62\x6b\xa4\x3d\xc4\xa1\x7a\xe9\xdb\xff\x29\x5b\xa5\x3c\xca\xb7\xd7\xcf\xfe\x6e\xab\xaa\xea\xe7\x5c\xe9\xb7\xdc\x20\x18\x69\x58\x0a\x22\xdb\xae\x50\x81\x4c\x60\x31\x5b\x82\xd9\x30\x03\x1b\xb6\x47\x58\x21\x0a\xd8\x5a\xd3\x6b\x19\x7b\xa6\x72\xb2\xcf\xd9\x6e\x97\x1e\x4b\x87\xb8\x86\xcf\x96\xd5\xf3\x7b\x4a\x02\x98\x1b\xdc\x02\xd3\xc0\x44\xbd\x48\xbc\x14\x6a\x99\xa9\x08\xe9\x6b\x3b\x43\x86\x73\x52\xe7\x39\xdf\xee\x29\xfd\x88\xe2\x5a\xc3\x7c\x5a\x2f\x95\xd6\xd7\x11\x6a\xaf\x19\x8e\xaa\x0c\x14\xf1\x42\x91\x6d\x81\x0b\xf8\xe5\x43\x7b\x6f\x67\x74\xdb\xdb\xc8\x39\x0b\xeb\xbd\x52\x2c\x31\x9e\x4a\x71\x6d\xe0\x51\xc8\x03\x1c\xc8\x99\xdc\x00\xd7\xa5\x83\xe8\xc7\x05\x25\x9f\xe0\x66\x3e\x3d\x93\x50\x03\x4f\xeb\x41\x87\xc0\xd0\xf5\x10\xfd\x34\xa6\xc9\x90\xc7\x30\x81\x5c\x42\xc7\xaa\x27\x0a\x26\xbe\xe8\x8e\xfd\xa4\x03\x4c\xac\x2a\x1d\xab\xb5\x4e\x30\x71\x14\xac\x77\x9e\xf2\xc7\x53\xe9\x02\x2f\xf4\x36\x5d\x13\x16\xa1\x93\xe7\x0f\xf2\x29\x4f\x6f\xd7\x36\xa2\x4a\x32\x01\x71\x51\xbc\x36\x0d\xc6\xf0\xae\x95\x36\x8b\xd9\x32\x6c\x93\xad\xd1\xcc\xa7\x3a\x08\xc7\xf0\x35\x77\xdc\xb7\xf6\x9e\x95\x54\x4a\x1e\x16\xb3\xa5\x53\xe9\xe1\x18\xae\xba\x44\xf4\x51\x3f\xc8\xa7\x45\x62\x1a\x0c\x9c\x4e\x48\xb4\x77\xcd\x98\x8d\x46\x30\x4f\xc0\x6c\x90\xfc\x92\xa5\x94\x2f\x94\x42\x82\xa7\x03\xfb\x95\xc7\x54\x9d\xf9\xba\xc9\x94\xc0\x18\x14\x26\xa8\x50\x44\xd8\xe2\xa4\x37\x32\x4b\x63\x58\xa1\x25\xd0\x6c\x8b\x54\x7b\xf4\xcc\xd4\x3a\xdb\x52\x3f\x33\xd2\xbe\x27\x99\xb0\xfe\xf6\x59\xec\xa4\x36\x4d\x05\xe9\x17\x14\xba\x4d\x26\xa4\x58\x08\xdf\xbf\x97\x9f\xee\x6c\xbe\x4d\x80\xc7\xe1\xb8\x4d\x47\xbf\xcb\x7b\x26\x84\x34\x85\x8f\xa8\x29\xd8\x9e\x50\x19\x31\xb6\x95\x3d\x9f\xf6\x9b\x09\x5c\x03\x17\x91\x54\x0a\x23\x73\xe9\x4b\x39\x75\xe7\x5a\x47\xb6\xd5\x39\x36\xee\xca\xb7\x41\xbb\x09\x7d\x52\x72\xcf\x63\x54\x1d\x4b\x0f\x18\x21\xdf\x77\x2e\x35\x7b\x76\x8d\x76\xe0\xf4\x51\x79\x10\x18\x2f\x66\x4b\x3d\x86\x77\xcf\x79\xb6\x74\xb4\xc1\xc5\x6c\x79\x6a\x52\x53\xbe\x1d\x4a\xe4\x2b\x1f\xea\x6e\x12\xf6\xd4\x45\x33\xac\xb6\x2d\x5a\x34\xbe\xbd\xc9\x8b\xb9\x52\x69\xa8\x70\x2b\xf7\x18\x3c\xe2\x71\x0c\xb5\x84\x10\xee\xee\x60\xc7\x04\x8f\x82\xcb\x2d\xd7\x9a\x7a\xe9\x62\xb6\xbc\x0c\x5d\x0d\xe9\x87\x5b\xde\x00\x67\x2b\x68\xc8\xe3\x12\x9e\x2b\x79\xea\x6e\xc8\x72\xe4\x6d\x71\xc9\xf3\x00\x6e\x6f\x2c\xb1\x17\xe6\x9f\xec\x0c\x2f\xba\x20\x7f\x60\xfa\x0d\xbc\x6b\x94\x6c\x53\x31\x1f\x6c\xa8\x39\x16\xd6\x35\x37\x8e\x46\xc0\xe2\xd8\x26\xb5\xc0\x43\x21\xa1\xa8\xbf\x98\xdb\x14\x61\xea\x08\x87\x0d\x8f\x36\x90\xfb\x3c\x2f\x56\x99\xc6\x20\x05\xb6\xc5\xca\x34\x5e\x76\xc7\xec\x2b\x8f\xbf\x55\x66\x74\x06\xc4\x9d\x7c\x28\x12\x34\xf5\xfc\x48\x1c\x62\xd4\x46\xc9\x63\x25\xfb\x4c\x24\xda\xcd\xb6\xe9\xf6\x22\xb0\x8d\x9c\x7b\xc4\xa3\xee\x61\x3d\x1a\xd5\xed\xd9\xfb\xfa\x11\x8d\x06\xe6\x34\x0a\x23\x8b\x41\x83\xc0\x9d\x3c\x19\x55\xc5\xe8\x11\x6a\x99\xcf\x3a\x76\x0b\x4b\x53\x54\x10\x31\x01\x0a\x59\x0c\xdc\x68\xd8\xa2\x61\x31\x33\x0c\x98\x88\xed\x86\xf2\xeb\x46\xc6\xfa\xef\x81\x47\x8f\x37\xae\x3a\xc2\xc9\xf4\x39\xfc\xe9\x76\x53\xd1\x62\x7f\xda\x55\x76\x5e\x2b\x1b\xf5\xc0\x63\x83\x4f\x94\x44\x62\x0d\xe4\x13\x99\x58\xb7\x24\x1c\xd3\x58\x43\xc0\x45\x94\x66\x31\x2d\x12\x3b\x73\xdc\xe1\x7c\x1a\x0e\x1b\x33\x1c\xb5\x72\x0d\x9a\x25\x25\x32\x29\xc2\x26\x04\x21\x2b\x48\xd2\x79\x6c\x28\x20\xab\x22\x3c\x54\x0e\x96\x6b\xa1\xd4\xf0\x1f\x85\x60\x9e\x74\x15\xd3\x1b\x8b\x75\x5d\x68\x48\x95\xa8\x30\x81\x49\x5f\xd4\x58\x66\x36\xe7\x42\xd7\x88\x3f\xf1\xa3\xe6\xd3\x54\xb6\x81\x76\x80\xa9\xc6\x2e\x9d\x0a\x36\x82\xa7\x2f\xe1\x63\xfd\x52\x54\x75\xd0\x6a\x8a\x65\xb9\xfb\x96\xf5\x70\xa1\x31\x13\xda\x3c\x7c\x5a\x6a\x4b\xcf\x3d\x38\xed\x46\x30\x52\xc8\x0c\x7e\xd8\xee\xcc\xb1\xc6\xd0\xa0\x13\xcf\xea\x75\x57\x74\x85\x18\x05\x2b\x70\xd9\x38\x42\x2f\x9a\x07\x90\xfc\xe0\x94\x03\xf5\xc5\x45\xa9\x8f\x9d\x67\x67\xcb\x40\x61\xc4\x77\x1c\x85\x19\xc3\xd5\xf3\x59\xb8\x3f\xfd\xe5\x71\x1e\xbc\x79\xbe\xa3\x73\x3b\x47\x50\x37\x3b\x9c\xa3\x58\x4b\xa6\xf7\xda\x6a\xe9\xa3\x51\x09\x98\xf6\x80\x22\x8a\xb9\xab\x30\xf3\x5a\x03\x8b\x22\x99\x09\x03\x99\x2e\xca\x99\xab\xbe\xa9\xb3\x22\x1b\x36\x30\xf8\xf6\xa6\x88\x42\x23\xa3\xab\xd3\xcf\x4f\xd9\x52\xba\x91\xfe\xfd\x33\x51\xfd\x1c\xb6\x0c\xee\x11\x05\x93\xde\x95\x7f\x41\xf0\x6f\x2a\xe5\x22\x32\x94\x17\xa7\xd7\xaf\x2e\x4e\xce\x61\x37\x41\x13\x6d\xaa\xb7\x8f\x68\x5a\xfd\xb5\x1a\x76\xed\x45\x09\x13\xa5\x5f\xaf\xb5\x93\x9a\x03\xea\x3f\x6c\xcf\x78\xca\x56\x29\x0e\x2b\x86\xf3\xc4\xa1\x80\x58\xa2\x06\x1a\xa3\xed\xf1\xbc\xe2\xac\x87\x2e\x23\x3b\x9c\x79\x1c\x38\x11\x50\x37\x77\xba\xfb\x2a\x73\xd8\x45\x52\x18\x56\x64\x00\x37\xb8\x25\x0f\xd7\xbd\xe4\x2c\x2f\xc2\xc7\xbc\x5b\xd7\xdf\x0a\x96\xba\x8b\x67\xc3\x43\x44\x5a\xc9\xf0\xbb\x81\xf5\x6e\xf0\xbb\x7f\x9f\x33\xc8\xf9\x4d\x7f\xb4\xbb\xbb\xe7\x79\x29\x60\x42\xd3\xc9\xfb\xdc\xa3\x01\x31\x0e\xfd\x34\x19\xae\xd1\xdc\xb3\x1d\x5b\xf1\x94\x9b\x63\xe0\x72\xee\xba\x89\x69\x52\xe7\x10\x74\x7b\xd5\x4d\xf7\xdc\xfd\xb9\x3a\x80\x9c\xfe\x1f\x34\x18\xd6\xe3\xf6\x3d\x1d\xeb\xe8\x58\xb8\xf6\x0c\xba\x0c\x3d\x74\xfd\x82\x60\x54\xa6\x4d\x57\x72\x90\x72\xd5\x64\x40\xae\x27\x4e\x39\xec\xdb\x63\x55\xe1\x58\x8f\x5f\xc0\x0d\x44\x1b\x8c\x1e\x35\xc5\x7e\x85\x89\x54\xe5\xf1\x8c\xda\x02\x37\x2e\xba\x17\x01\x8e\x3c\x89\x3e\x22\xe7\x22\xbc\x4e\x6c\xaf\x43\x3c\xfc\xb0\xd8\xd1\x79\x4f\x06\x13\x18\xe9\xfc\x75\x64\x7d\xd9\x1e\xed\x1a\xc4\x75\xa8\x88\x76\x67\xdf\x5e\x24\x6d\xdd\xa0\x35\x64\xe6\xeb\x6e\x77\xc9\x2f\x49\xbc\x96\xf2\xd6\x5d\x2f\xaf\x8a\x50\x39\xb8\x54\x41\x8e\x1b\x71\xcb\xa9\x28\xf7\xa1\x66\x7b\x0c\x6e\x6f\x72\x4a\x67\x56\x6f\x29\x18\x36\x85\x39\xe9\x7e\x7b\xe3\xb5\xb7\x1e\x7c\x7d\x59\x83\xc8\x69\x2f\xa4\x45\x77\x12\xfb\x0a\x75\xf2\x4b\xb9\x78\xec\x2d\x8d\xb3\xa8\x3a\xe8\x11\xec\x56\xcf\xb9\x72\x1d\x80\x61\x6a\x8d\xe6\xc7\x8c\xa8\xcd\xb0\x18\xdc\x73\x21\x4d\x80\x40\xf3\xcc\x9f\x01\x00\x00\xff\xff\xe0\xba\x80\x64\x22\x17\x00\x00"

func roxcontractCdcBytes() ([]byte, error) {
	return bindataRead(
		_roxcontractCdc,
		"RoxContract.cdc",
	)
}

func roxcontractCdc() (*asset, error) {
	bytes, err := roxcontractCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "RoxContract.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd1, 0x1a, 0x7f, 0x92, 0xd5, 0xf4, 0x67, 0xf6, 0x90, 0x26, 0x3f, 0x9b, 0xd, 0xe, 0xb6, 0x64, 0xd3, 0x67, 0x53, 0x78, 0x6b, 0x9f, 0x8f, 0x68, 0x83, 0x4e, 0x9d, 0x83, 0xc9, 0xd7, 0xd9, 0xd7}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"NonFungibleToken.cdc": nonfungibletokenCdc,
	"RoxContract.cdc":      roxcontractCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"NonFungibleToken.cdc": {nonfungibletokenCdc, map[string]*bintree{}},
	"RoxContract.cdc": {roxcontractCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
