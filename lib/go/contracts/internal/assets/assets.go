// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../contracts/NonFungibleToken.cdc (4.968kB)
// ../../../contracts/RoxContract.cdc (11.696kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _nonfungibletokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x41\x8f\xdb\xb8\x0e\x3e\x37\x40\xfe\x03\xdb\x02\xaf\x33\x45\x26\x79\x87\x87\x77\x08\x50\xbc\xbe\xed\x34\x40\x2e\xb3\xc5\x6c\x16\x7b\x28\x0a\x44\xb1\xe8\x44\xa8\x2c\xb9\x92\x9c\x34\x5b\xcc\x7f\x5f\x90\x92\x65\x3b\xc9\xcc\x4e\x4f\xbb\x87\xed\xc4\x96\xc8\x8f\x1f\xc9\x8f\xf4\xec\xed\xdb\xf1\x68\x3c\x7a\xfd\x1a\x56\x3b\x84\x85\xb6\x07\xb8\xb3\xe6\x66\xd1\x98\xad\xda\x68\x84\x95\xfd\x8a\x06\x7c\x10\x46\x0a\x27\xd3\xd1\xf5\x9d\x35\xed\x09\x3e\xb0\x86\xc2\x9a\xe0\x44\x11\x40\x99\x80\xae\x14\x05\xd2\x59\xb2\x99\x1f\x40\xd8\x89\x00\x42\x6b\x30\xd6\xdc\x94\xad\x87\xc0\x1e\xda\xfb\x1e\x0a\xdb\x68\x49\xbf\x4b\xeb\x2a\x08\x76\x3a\x1e\x2d\x4b\x10\xd0\x78\x74\x70\x10\x26\x78\x08\x16\x24\xd6\xda\x1e\x41\x80\xc1\x03\x98\x32\x64\x03\x13\x08\x3b\x54\xae\x03\x74\x60\x7b\x06\x51\x8e\x47\xc1\x82\xaa\x6a\x8d\x15\x9a\x40\xe7\xe0\x34\x90\x0e\xed\x34\xe1\x3f\x37\xb5\x13\x7b\x42\x0d\xa5\xd5\x44\x17\x05\x44\xa6\x5c\xa3\xd1\x83\x30\x12\x8c\xa8\x94\xd9\x8e\x47\x1c\x6f\x18\x50\xe0\x6b\x2c\x54\xa9\xd0\x4f\x33\x95\x8b\xd5\x1a\x1c\x7a\xdb\xb8\x8e\xb3\xc2\x3a\xcc\x0f\x21\x1c\xeb\x44\x9e\xc3\xda\xa1\x47\xe2\x40\x18\xb8\x5b\xac\x40\x19\xf6\xe0\x2b\xe1\x3a\x0e\xb2\xf1\x0f\x56\x6b\x2c\x82\xb2\x66\x0d\xf7\x27\x3e\x3a\xf3\x64\xd9\x07\xeb\x08\x3e\xd3\xfc\xc6\xb3\xed\x22\xdf\xa6\x1c\x50\x6a\x0b\xdd\x48\x3e\x55\xe2\x01\xca\xc6\xf0\x4b\xce\x87\x60\x2e\x08\x8a\x3d\x18\x74\xf4\x08\x85\x57\xfa\x38\x1e\x55\x76\x9f\xb2\xec\x09\x2e\x31\x64\x9b\x00\xb6\xe4\xe3\x03\x27\x11\xf5\x27\x67\xf7\x4a\xa2\x5b\xf3\xd9\xf5\x3d\x16\xa8\xf6\xf4\x33\x43\xce\x84\xfa\x14\x8d\xef\x3f\x03\x89\x85\x16\x0e\x7b\x08\x0f\x2a\xec\xc0\xdb\x0a\xa1\x76\xc8\x66\x6b\xeb\x99\x30\xa9\xf8\x44\xca\x96\xc3\x6f\x8d\x72\xc8\xc8\x3a\xf2\x7a\xd9\x2e\xd0\x05\xa1\x4c\xca\x31\x5b\xda\xe0\x4e\xec\x95\x75\xb9\x4b\x7c\x5b\x3b\x47\x20\x14\x1e\x6b\xe1\x44\x40\xd8\x60\x21\x1a\x42\x1a\x60\xab\xf6\xe8\xd9\x0b\x97\x35\xfd\x21\x36\x4a\xab\x70\x24\x5f\x7e\x47\xf7\x04\x38\x2c\xd1\xa1\xa1\x9c\x05\x9b\xea\xba\x8f\x8a\x10\x5b\xa3\x8f\x80\xdf\x6b\xeb\x93\xc1\x52\xa1\x96\xb1\x10\xbb\xf8\x95\x01\x6b\x10\xac\x83\xca\x3a\x1c\x8f\x12\xf9\x1d\x67\x53\x58\x52\x6f\x7a\x9b\xa0\x11\x2c\x7f\x8a\xab\x12\x5f\x11\x8a\xc6\x07\x5b\xe5\x5c\xb4\xcc\x0d\xfa\x6a\x98\x0e\x6a\x57\x0b\x7b\xe1\x94\x6d\xc8\xa6\x32\xdb\x94\x11\xb2\x1f\x2b\x83\x29\xfb\xe5\x08\x8d\x27\x5a\xb3\x71\x0e\xa3\x33\x35\x49\xb8\x6c\xc9\x05\x3a\xac\x7a\x0f\x85\x30\xe0\xd1\xc8\xf1\x88\xae\xb9\x58\x37\x6d\xe9\xd5\x88\xee\x26\xd8\x1b\xfa\x77\xc2\xee\xa9\x0a\x29\x75\x66\x4b\x10\xd9\x0b\x77\x39\x21\x13\x50\x20\x99\xd5\xa0\x51\x6e\xd1\x8d\x47\x17\x5a\x6c\x65\xd9\x5d\xdb\x8b\xd4\x06\xc6\x86\x1d\x3a\x86\x39\xc9\xa2\xc5\xb2\xe1\x89\xa1\x23\x5b\x97\x4e\xc4\x5e\xb9\x5b\xac\xc6\xa3\xd2\xd9\xea\x2c\xb9\x2c\x63\x06\x8a\x56\x5d\x24\xd6\xd6\xab\x90\x53\x0a\xd6\x0c\x9c\xbd\xf1\xe3\xd1\xb0\x60\x0b\x4b\x19\x09\xb1\x96\x83\x13\xc6\x97\xe8\x18\xf6\xdb\x19\xfd\x7f\x36\x63\xc9\xaf\xa8\x9a\x63\xb7\x9f\x2a\xf8\x14\x7e\x65\xfb\xfd\xb7\x94\x38\xad\xf9\xb6\xaa\x6a\xeb\x42\xcc\x50\x2f\xf9\xca\xf7\x67\xc0\x6c\x36\x1e\xd5\xcd\xe6\x82\xf5\x73\xed\xfd\x41\xb0\x00\x00\x12\xb4\x60\x83\xd0\x60\x9a\x6a\x83\x8e\xe5\x22\x26\x92\x6b\x57\xf9\x28\x8b\xca\x00\x7e\x57\x3e\xc4\x2e\xa1\xcb\xe4\x6d\x2f\x5c\xbc\xfd\x5b\x53\xd7\xfa\x38\x87\xdf\x97\x26\xfc\xf7\x3f\x3d\xfb\x1f\xf7\x11\xad\x08\x80\x95\x0a\x01\x25\x1c\x88\xf0\x94\x95\x1e\x5e\x0a\x47\x05\x25\xb4\xfa\x93\x46\x48\xbc\xdf\xb9\x42\x36\xf4\x21\x1d\x5f\x76\x47\xaf\xae\x2f\xbb\x53\x7e\xe8\x51\xa4\x09\xa8\x7c\xae\x0d\x33\xc9\x17\x95\x91\xaa\x10\x81\x6b\x34\x8b\xeb\x99\x74\x26\xcb\x01\x0e\xa2\x67\x05\xa8\xb2\xa6\x43\xc8\xb3\x19\x2c\xcf\x6e\x2b\x0f\xc6\x86\x28\xce\x20\x8a\xc2\x36\x26\xbc\xf1\x3c\x13\xc4\x16\x27\xb0\x26\x43\x6b\xce\x3c\x6c\x10\xd6\x46\xe9\xf5\xf4\x31\x2a\xfe\x48\xee\xaf\x94\x6c\x79\x9f\x30\x92\x39\xfc\x5f\x4a\x87\xde\xff\xef\x11\x66\x1e\xa3\x25\xd5\x3e\x4a\xee\xb0\xe1\xc4\x38\x8d\x2d\xb4\x8c\x25\x35\x7c\x0e\x61\x7d\xfb\x8f\x86\x75\x1b\x0f\x0d\xa2\x0a\xf6\x72\x4c\xcb\xe1\xca\x93\x6a\xca\xe7\xcd\xa1\x5b\x6e\xce\xbd\x9d\xcf\x38\x58\x52\x41\xfe\x88\x47\x7a\xed\xd1\x18\xf5\xad\x41\x58\xde\x26\xf6\x44\xb1\xe3\xd2\xdd\x09\xdf\x9d\x25\x93\x1a\x03\x74\xb0\xe3\xbb\x87\x1e\xdc\xfb\x38\xf4\xaa\x9c\x08\x12\x9d\x84\x91\x0a\xef\x92\xd4\x52\x28\xd9\x00\xef\x63\xa5\x32\x71\x66\x25\xfc\x24\x5d\x28\xa3\x30\x92\xd1\x64\x90\xc7\xc1\x92\x85\xef\x2c\xe4\xbb\xc5\x6a\x7e\x16\xed\x73\x22\xe8\x11\x6e\xa1\x42\xa9\x68\xdc\xb6\x7d\xe0\xa1\x55\xd8\x9e\xbe\x3e\x8b\xf8\x76\x11\x39\x21\x3f\x4b\xb8\x43\xda\x6d\xf2\x2e\x96\xdd\xf4\xea\x8c\xd4\x31\x1e\x52\x01\xe2\x10\x8f\xcc\xb8\x61\x84\x65\x63\xb2\xdd\xab\xf6\x8f\xe5\x6d\x1b\xf2\xf5\x1c\xde\x9f\xf0\xc2\x37\x69\x89\x39\x79\x46\xff\x39\xf4\x8d\x0e\x53\x25\xe1\xdd\x3b\xe8\x5b\x7b\x45\x85\xb3\xbc\x6d\x1b\xa2\x93\x8a\xd8\x6c\x55\xe3\x03\x75\x38\xaf\x94\xa2\x42\x10\xb1\x8b\x68\x2d\x42\x4f\x1d\xb2\xbc\x7d\x35\x74\xf7\xd0\xfd\x7c\x78\x66\x62\x52\xbf\xf9\x96\x8f\x9f\xcc\x4a\xbb\x0f\x76\xf3\x22\x39\x6b\x67\x64\x10\x5f\xbb\xa4\x08\xfe\x4b\xb8\x6d\xc3\xf5\x4d\xf9\x10\x52\xf6\xd3\x71\xea\xbe\x85\xf0\xe2\x45\x9b\x98\x64\xf8\x8a\x49\x8a\x99\xb8\x7e\x32\x56\x6e\xa2\x2c\xa5\x69\x01\x28\x6c\x55\xf1\xb6\x96\x6f\xd4\xcd\x46\x2b\xbf\x83\xd2\xba\xfc\xd5\x32\xc4\xf2\x08\x05\x1d\xe4\x4f\x64\xa2\x38\xed\x97\xa7\x41\xf7\x4f\x6d\x31\x2c\x6f\xfd\xd5\xf5\x1c\x3e\xc7\x4a\xfb\x72\x7e\x66\x63\x9d\xb3\x87\xbb\xc5\xaa\x27\x7e\xd7\x73\xf8\x57\x6e\xe2\xc7\xc4\x24\xc5\x95\x7a\xc2\x14\x8e\xd6\x91\xc1\x67\x4d\x5f\x42\x36\xd8\x2e\xee\xb2\xfd\xac\xc9\x7b\x05\xc9\x50\x2b\x3e\x4f\x14\x49\xc7\xcb\x3c\x37\xef\x24\x17\xcc\xe4\x22\x6f\x83\x12\xba\x55\xfc\x56\x38\xde\x77\x77\x56\xcb\x4e\xbd\x13\xa6\x4b\xe5\xd2\xee\x1c\x34\x6d\x24\x1d\x9e\xc3\xfb\x1f\x91\xa8\x39\x5d\x7e\x38\x71\xf3\xcf\x29\xc8\xd3\x2d\x13\x3b\xe6\xbc\x45\x3a\x38\x1e\x64\xa6\x68\x60\x29\xdf\x0a\x51\x61\xd2\x4d\x25\x41\x38\x27\x8e\xcf\xad\xcf\x81\xcd\x58\x9c\xe0\x30\x34\xce\xa4\x3e\x76\xe2\xd8\xaa\x17\xbd\x8b\xad\xe6\xb0\xcd\xce\x69\x03\xfd\x5d\xad\x0f\xfc\xdd\xb7\x8e\x52\xc9\xa3\xec\x3e\xc1\xe2\x76\xdf\xff\xe6\xbe\xe4\x6a\x36\x03\x6f\xbb\xa9\x1f\xf3\xc4\xdf\x25\x0e\x85\x04\x29\x82\x60\xa6\x78\xaf\xaf\x30\xec\xac\x4c\xe3\x49\x85\x9f\x6a\xbc\xb3\x49\xe0\xf0\xd2\x20\xf0\xa8\xcb\x69\xae\xca\xcf\x4a\x7e\x81\x97\xef\xc0\x28\x3d\x87\x57\x64\x45\x5a\x8c\xbb\x1f\x2f\xd1\xe7\x91\xbd\xfc\x29\xb5\x2f\x1c\x8a\x80\x1f\xab\x3a\x1c\x7b\xdf\x22\xf1\x29\xa7\x0f\xe9\xd5\x05\xbd\x87\xf8\xbd\x16\xd9\x3f\x2d\xf3\x3e\xa3\x47\xe6\xd2\x1e\x38\x11\xbe\x53\x00\x62\xeb\xa2\x77\xca\xf6\xfb\x1e\x98\xbe\x50\x5e\x18\x9e\x69\x70\xb6\x95\x32\xd5\x68\xb6\x61\x47\x53\xf4\xdf\x69\x78\x46\x2f\xb2\xdf\xa1\xed\xd4\xe4\xe8\xfa\x8c\x75\x14\x3d\xfc\x15\x00\x00\xff\xff\xd5\xbe\x00\xcf\x68\x13\x00\x00"

func nonfungibletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_nonfungibletokenCdc,
		"NonFungibleToken.cdc",
	)
}

func nonfungibletokenCdc() (*asset, error) {
	bytes, err := nonfungibletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "NonFungibleToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdb, 0xf, 0xd7, 0xfa, 0xf8, 0x7, 0xd8, 0xf7, 0xa, 0xb6, 0x12, 0xce, 0x79, 0x51, 0x18, 0xed, 0xc5, 0x9e, 0x39, 0xb8, 0xfc, 0x2c, 0x47, 0x69, 0x56, 0xfc, 0x55, 0x77, 0xfb, 0x35, 0xcf, 0x74}}
	return a, nil
}

var _roxcontractCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x5f\x6f\x1b\x37\x12\x7f\x2f\xd0\xef\x30\xf6\x43\x2a\xb5\xb2\x9c\xde\x15\x7d\x10\xec\xba\xb1\x1d\x17\x06\xae\xba\xc0\x71\xd1\x03\x82\xe2\x40\xed\x8e\x24\x22\x2b\x52\x25\xb9\x96\x14\xd7\xdf\xfd\x30\xe4\xfe\x21\xb9\x5c\xc9\x31\xd2\x87\xf3\x43\xa2\x5d\x72\xfe\x70\x38\xf3\x9b\x19\x72\x4f\xbf\xfd\xfa\x2b\x00\x80\x6b\xd4\x99\xe2\x6b\xc3\xa5\x98\xc0\x15\x0a\xa3\x58\x01\xef\x57\x4c\x19\xb8\x92\xf4\x94\x19\x98\x4b\x05\x77\xff\xfe\x0f\xe4\x7c\xc1\x0d\x2b\x20\x93\x45\x81\x99\xe1\xb3\x02\xf5\xd7\x5f\x39\x3e\xf7\x4b\xae\x41\x5b\xba\xac\xa6\xa3\x1f\x8c\x0b\x0d\x66\x89\x90\x49\x85\x30\x2f\x45\x46\xa2\x58\xc1\xcd\xce\xf2\x75\xd4\x7d\xdc\x47\x90\x29\x64\x06\x73\x98\xed\xe0\x4e\x6e\xc7\x8b\x05\x18\x64\xab\x56\x2a\xb6\xe2\xd6\x4a\x3e\xf0\x1c\x75\x24\xc5\x48\x58\x71\x61\x88\x1c\x66\x72\x8b\x7a\xe4\x68\xe7\xbc\x28\xdc\x0b\xd8\x70\xb3\x04\x81\x9b\x62\x67\xa7\x62\x6e\x27\x4f\x6f\xee\x35\x30\x91\x83\x51\x4c\xe8\x39\x2a\x5a\xc7\x6a\x5c\xcb\x7e\xcb\xb2\xa5\x9d\x77\x29\xb7\xed\x52\x19\xcd\xce\x3e\x42\xc1\xb5\x01\x39\x87\x9c\xcf\xe7\xa8\x50\x18\x30\xbb\x35\x6a\x7a\x55\xf3\x76\x6c\x36\x4b\x54\x68\x07\x81\x2c\xb8\xc6\x8c\xcf\xb9\x5b\x30\x99\x4d\xc9\xed\x6d\xee\xb4\xe0\xa8\x1a\xe1\xb5\x5c\xae\x61\xc5\x04\x5b\xb4\x04\x2c\x5f\x71\x61\x09\xa4\x28\x76\xd5\xe3\x92\xb9\x4d\x60\x33\x4e\x36\x71\x3c\x6a\xc3\xf8\x36\x98\x1b\xb7\xe4\x42\x66\x1f\x2d\xc5\x4c\x6e\xc7\xf0\xfb\x12\x45\xfd\x44\x22\x69\x14\x73\xc7\x45\x48\x67\xa8\x8c\x09\x98\x61\x6d\x3f\x2e\x34\xcf\x11\xcc\x92\x59\xfe\x63\x6f\xc3\x94\x5d\x28\x2b\xb4\x04\x06\x57\xd5\x66\x4b\x01\x0a\xb5\x2c\x55\x56\x11\xe1\x03\xaa\x5d\x6d\x2a\x28\x35\x2a\xd8\xf0\xa2\x70\x5c\x4a\x8d\xa4\xbd\x42\x96\x5b\xb5\xac\x02\x39\x33\xac\xbb\x5d\x30\x43\xb3\x41\x14\xc0\xb2\x4c\x96\xc2\xe8\xf1\xd7\x5f\x7d\x7b\x4a\xea\xf0\xd5\x5a\x2a\x03\x53\x29\x6e\x4a\xb1\x20\x77\xbb\x97\x1f\x51\xc0\x5c\xc9\x15\x1c\xc7\xaf\xc7\x59\x9e\x1d\x13\xd9\xba\x9c\xb5\x2e\x77\x27\xb7\x75\x94\x4c\xba\x9c\x1e\xeb\x55\x9f\x9e\xc2\xc9\x97\xf9\x6b\xf8\x79\x92\xe1\xed\x03\x0a\xa3\xbf\xbc\x28\xc7\x91\x16\x8c\x24\xa1\x01\x84\x5b\xc1\x0d\x67\x05\xff\x84\xf9\x60\xd8\x9d\xf6\x3b\x37\xcb\x5c\xb1\xcd\x80\xe7\x13\xf8\xed\x56\x98\x1f\x7f\x18\x59\xab\x4e\xe0\x4d\x9e\x2b\xd4\xfa\x62\x18\xd3\x5c\xe3\x5a\x6a\x6e\x02\x12\x23\xf7\x10\xfc\x6a\xfd\x2c\x98\x6f\x43\x65\x02\xef\x8d\xe2\x62\xd1\x21\xb8\x64\x26\x5b\x56\x54\x7f\x96\x4c\x18\x6e\x76\xfd\xb4\x1d\x6a\xb9\xbd\x72\x48\x34\x98\xb9\xa9\x44\xf9\xcf\x7f\x0c\x1b\xab\xbf\x5d\x71\x43\x9e\xbf\xa1\x58\x61\x75\x70\xba\x48\x19\xc1\x0a\x99\xe0\x62\xe1\x1c\x9a\x82\x2c\x63\x42\x48\x43\x11\xc3\xf2\xbc\x8e\xa5\x40\xde\xbf\x2c\x69\x52\x5c\x3b\xef\x4e\x6e\xaf\x51\x1b\x25\x77\x81\x31\x86\x9e\xe7\x4d\xd9\x0a\x73\x78\xc7\xcc\x52\xb7\xd4\x05\x1a\x2f\xf6\xde\x1b\xa9\xd8\x02\x69\x0e\xd9\xa0\x79\xe8\x9b\xff\xae\x9c\x15\x3c\x73\xd3\xdb\xdf\xe1\xec\x37\x04\x3c\xfd\x8c\x1b\xf5\x08\xc2\x73\xee\xf0\x5a\xed\x08\x1f\x59\x51\xd4\x60\x83\x9a\x60\x8d\x57\xe6\x61\x59\x86\x5a\x0f\x34\x16\xf3\x21\x3c\x30\xe5\x66\x4c\xe0\xe7\x47\x67\x9d\x09\x99\xed\x29\xe0\x2c\xca\xd5\x0c\x95\x8f\xba\x80\x84\xdb\x33\x0f\xb3\x7b\x98\x3b\x24\x9b\x5a\x06\xef\x50\x5d\xca\xed\x04\x1a\x41\xee\xff\xa7\x68\x1d\x3c\x27\x49\xa4\xbb\xc0\xad\xa9\xb1\x70\x26\xb7\xad\x69\x88\x33\x0d\x5e\xfa\xdb\x1a\xb1\x31\x92\xf2\x60\x42\x75\x8b\x8c\x4b\xf6\x80\x30\x23\x48\x73\xfc\x43\xde\x96\xf6\x7d\xb9\x5e\x17\x8d\x77\x7b\xdc\x2b\xaf\x2c\x35\xe6\x16\xfe\x6d\xea\xf0\x92\xd1\xe9\x29\xdc\x1a\x97\xc1\x34\x2c\xe5\x86\x66\xec\xaa\x44\xa8\xb0\x49\xc6\x6b\x54\x75\xa6\xca\x28\x74\x6c\xfa\x6a\x38\x10\x06\xd7\x7b\xd8\x21\xb5\x49\xc9\x2c\x95\x2c\x17\x4b\x52\xa7\xd5\xbe\xc1\x7f\x52\xb2\x81\xce\x8a\xe7\x6f\x82\xff\x59\x22\xdc\x5e\xdb\xa2\xa1\xf2\x8e\x76\x46\xed\x74\xb3\xd0\xaa\xf1\xb0\x60\x2b\xac\x83\xbc\x3b\xba\x42\xc3\x28\x89\x4c\xe0\xd1\x4d\xa9\xa7\x3e\x85\x73\xc9\xcc\x2e\xae\xc9\xe1\x64\x11\xa9\x1a\xba\x5d\x5c\x4f\x24\x4d\x07\x03\x8b\x3f\xc3\xae\x9c\xc8\x09\xef\xac\x13\xd6\xda\x45\x4e\x48\x7f\x5c\x70\x33\xf0\x97\x39\xda\xb3\xac\x21\x99\x19\xbc\xbf\xb5\xc2\xf8\x95\x4d\xf1\x6c\x85\xe3\x02\xc5\xc2\x2c\xe1\x27\x78\x3d\x81\xe3\x29\x6e\xec\x36\xd1\x88\x07\x65\xb8\x5a\x9b\xdd\x71\xc8\xe0\x29\x7c\xa4\xf8\x1a\xdb\x6d\x82\x73\x3f\x89\x8d\x9b\xa0\x48\xcc\xb7\x62\xce\x9d\xb4\xc4\xb0\xdb\x0c\x38\x87\x39\x2b\x34\x26\x26\x74\xad\x08\xe7\xf0\x98\xd2\xac\x36\x16\x9c\x37\x76\xf3\xcd\x5b\xc7\x88\xc8\x14\xae\x6c\x51\xe7\x3c\xf1\xf6\x1a\xb4\x74\xe1\xc9\x0d\x70\x2d\xbe\x31\x2e\xc8\xd8\x82\x71\x11\xd2\x27\x17\xdd\x67\x0c\xf8\x0e\x06\xdf\x03\xd3\x21\xfe\xa7\x58\x75\xe1\xea\x43\x6b\xeb\x3f\xe0\x1c\x5e\x93\xe6\x6f\x9c\xca\x2b\xe9\x6b\xdf\x56\xaf\x9f\x50\xc9\x0a\x0e\x42\x49\xb8\xe2\xa9\x24\xd8\x4a\xf0\x34\x7b\x8a\x02\x82\xb6\xc7\x95\x9f\xe4\x32\xb5\x9d\x84\x84\x15\xb5\x04\x7e\x46\x6c\xd2\x21\x81\x13\x37\x61\x38\xcc\x4b\x61\x59\x0d\x3a\x6e\xcb\xe7\x70\xe4\x3b\x42\xc2\x85\x43\x3f\x31\xaa\xc4\xee\x9c\x7a\x8d\x61\xe2\x4d\x2e\x11\x42\xc7\x0e\x56\x5c\xeb\x4a\x1b\x72\x27\xb7\x03\x85\x19\x5f\x73\x14\x66\x02\xaf\x1e\x3b\x65\x65\x9c\x54\x9f\xa2\x5a\x64\x64\xeb\xfe\x2f\x19\xcd\xbe\xa9\x26\x70\x7c\xe5\xa2\xd7\x76\x02\x55\xc3\x31\x71\xdd\x5c\x50\xec\x77\xa3\xba\xb3\x07\x83\x9e\x58\xfb\xa0\x2a\x17\x3c\x07\xc1\x8b\x61\xdf\xee\xec\x21\x84\xd7\x87\x31\x65\x1f\xf9\xfe\x09\x47\x71\x90\x91\xd3\x7e\xf7\x7d\x0d\xdd\x2d\x96\x5b\x00\x77\xf9\xa7\x6d\xd5\x3c\x14\xe7\x22\xcc\x4a\xf0\xb9\x21\xfa\xfc\xc9\x7d\x3a\xbb\xd2\x21\xad\x79\xad\x5e\x07\xce\x72\x57\x7c\x5b\xe8\x72\x7d\x5e\xe3\xb3\xdf\xe8\xba\x71\x82\x52\x53\x01\x6b\x96\xc8\x15\x28\xb4\x4d\x6d\x16\x45\x51\x43\x36\xae\x58\x0e\x0c\x39\xf9\x04\xce\x4e\x5c\xfe\x27\x45\xba\x81\x35\xea\x7a\xc4\xe1\xbf\x2a\x4a\xd4\x8b\x19\xb8\xb8\xa2\x7f\x5f\x44\x4e\x36\x76\xbb\x33\x39\xe4\x5f\x2f\xe3\xdf\x04\x7a\xfd\x6b\x38\x4c\xa2\xb2\xd7\x09\xf9\xfe\xe3\x15\x82\xa3\xc0\x58\x7d\x48\x5d\xe3\xd6\xac\x6e\x94\x5e\x04\x5e\x07\x5a\xab\xff\x17\x38\xa3\xda\x8b\xd7\x6b\xe8\x02\xd0\x66\xc9\x0b\x04\x0e\x67\xcd\x7a\x7b\x93\x4e\x22\x0d\x34\x3f\xc3\x8d\x19\xf9\x2e\x99\xda\xff\xae\x04\x0e\xe7\xc0\xe1\x3b\x68\x90\x80\xaa\xfd\xbd\x0b\x73\x49\x2e\xd9\x0b\xd7\xbf\xf6\xb9\x4b\xc0\x93\x9a\xcb\x9b\xfb\xe6\xf7\x1b\x9b\xcb\xbd\xe3\x3b\x52\x8a\x89\x76\x4e\x50\xe5\x4f\x6f\xee\xbb\x47\x26\xe3\xdb\xe9\xcd\xbd\x6f\xca\xa0\x90\xf8\xa5\x90\x33\x56\x40\xe9\x7a\x01\x82\x5d\x9e\x77\xcb\xf8\xb6\x0b\x8e\xea\x90\xdb\xa6\x3b\x23\x57\xb0\x45\x08\x3d\x38\xa5\x57\xa8\xed\x19\xc5\xc1\x9e\x22\x60\xf9\xbe\x3a\xae\xd3\x0d\x27\xd2\xdf\x37\x41\xdb\x19\xf9\x3c\x83\x98\xd8\xcb\xd3\x26\x17\xeb\x16\xeb\x82\x19\x2e\xca\xd5\x08\x66\x4a\x8a\x4f\x38\x82\x85\x2c\x72\x40\x93\x8d\xbb\x02\xfc\x28\x4b\xf4\x27\x36\x3c\xaa\xf4\xb0\x3f\xa1\xf5\xb6\x5a\x3e\xfe\xc5\xfd\xd6\xe7\xf5\x56\x51\xf7\x12\xd8\xfb\x10\x7c\x74\x94\xf8\x2c\x48\xe9\x4f\xd5\x1e\x7a\x46\x79\xd9\x1f\xd9\x13\x78\x89\x0a\x85\xc7\x55\xbe\xc7\x2a\x0e\xd3\xa0\x4d\x9a\xf5\xb4\x45\xaa\x1a\x57\x3d\xe3\x64\x2b\xaa\x76\x39\xaa\x9e\x82\xc9\xd9\x8e\x9a\x9d\xe6\xe1\xb9\x4d\x51\x3d\x23\xd8\xc0\xdc\x9d\x45\x75\x4b\x74\x0b\x3b\x9d\xc3\xaa\xca\x2c\x7b\x20\x26\x80\x0c\x02\x2c\x35\x67\x19\x3a\x2b\x86\xb9\xc7\x97\x58\xa7\xb2\xa8\x0a\xf9\xb9\x03\x37\xd3\x9b\xfb\x61\x97\x6c\x81\xe6\xf6\x5a\x0f\x86\x13\xf8\xe0\xb6\xf6\x8f\x44\x96\x94\x4a\xc9\x0d\x95\x33\xde\xa9\xdb\x04\x5e\xa5\x44\xf4\x51\xdf\xc9\xed\x74\x6e\x22\x06\xbe\x83\x4c\x6f\xee\x2f\x62\x4b\x12\x90\xcd\xab\x22\x4d\x97\x45\xdd\x6d\x0a\x5e\x8c\xec\xdb\xf6\x0c\x4a\xa1\x29\x95\xc0\xbc\xaf\x5a\x3b\x3d\x05\xbd\x94\x65\x91\x53\xdb\x45\x04\x9a\xfa\xeb\xfa\xa6\x40\x2d\x4a\xd7\x23\x4a\xfb\x5c\xdf\xa9\x44\x39\x59\x6a\x93\xca\x7c\x83\x4a\xb7\xaa\xe4\x87\xbf\xfe\xaa\x5f\x5d\xd8\x30\x38\x07\x9e\x0f\x27\xe9\xb2\xa8\x4e\xe1\xce\x46\x16\x54\x9b\x05\x4c\x2c\x7a\xdd\x5e\xf7\x2f\x91\x52\x3c\x17\x99\x54\x0a\x33\xd3\x7f\x14\xb1\xd7\xcf\x5a\xd7\x9a\xa4\x3c\x6d\xd4\x4d\x5b\xef\xdc\xd5\x93\x4a\x0c\xdd\x61\x86\xfc\x21\x39\x94\x72\xe1\xee\x11\x90\xdc\x08\xcc\xa9\x80\xaf\x0f\x3a\x7f\xfc\x21\x91\x38\xa7\x37\xf7\x5d\x28\xed\x84\xa1\x0d\xb8\x86\x21\x9c\x9d\x04\xa7\x20\xc9\x72\x70\x53\x9f\xe6\xd7\x3f\x6e\xaf\x3d\x77\x4d\x86\x54\x2c\xd5\x26\x24\x7b\x23\x72\x76\x12\xa9\x30\x56\xb8\x92\x0f\x38\xf8\x88\xbb\x09\xb4\x12\x86\x70\x71\x01\x6b\x26\x78\x36\x38\x5e\x71\x6d\x3b\x8f\xe9\xcd\xfd\x71\xba\x02\x0e\x2e\x1c\xac\xa0\x31\xcf\xeb\x2b\x87\x46\x9e\xba\x18\x33\x77\x9b\xd0\xe1\xe2\xdc\x08\xce\x4e\x2c\xf1\x01\x83\x3c\x0b\x54\xf6\x9a\xc0\xfd\x60\xfa\x08\x7e\x8e\xa2\x3d\x56\x2c\xac\x67\x08\xcb\xab\xd5\xa5\x26\xca\x22\xbf\x4f\x5b\xf9\x03\xcf\xff\x68\x04\x27\x4d\xe8\xdf\xbf\x90\xed\x8c\x7c\x9e\xe5\x2a\xc0\x6f\x64\x1f\xb0\x5d\x17\x59\x63\x43\x55\x5b\x11\x79\xc9\x47\xdc\xe9\x43\x6d\xcb\x67\x00\x72\x8f\xd0\x57\x09\xab\x31\x7d\x08\xd3\xf7\x68\xf3\x22\x80\xe7\xf3\xd4\xee\x1d\x59\x24\x4d\x61\xad\xad\x27\x71\x0e\xe7\x7d\xfa\xb3\xd2\x2c\x0f\x2d\x22\xb2\x04\xf1\x23\xff\x8c\x95\x8d\xf0\x14\xb0\xd0\xc9\xa6\xac\x62\x23\x78\xf1\xbc\x33\xb3\xde\xba\xa1\xf6\xaf\x70\x65\xfb\x71\x9c\xec\xef\x8e\x1b\xde\xae\xd6\x66\xd7\xa2\xec\x20\x09\x58\xde\x15\xb4\x27\xbc\x81\x84\x8a\x55\x50\xb8\xf9\x2c\xbb\x3d\xd1\x1c\x4d\xb6\x6c\x9e\x7e\x41\x03\xcc\xcb\x4f\x46\x02\x03\xe7\x18\xee\xaa\x99\x35\x77\xd3\xdf\x68\x2f\xf5\x8c\xc8\x11\xd8\x03\xe3\x05\x9b\x15\x38\x6e\xf8\xdd\xce\x3d\x0a\xc8\x25\x6a\xa0\x6c\x69\x6f\x85\x58\x8f\x96\x23\x87\xa5\x01\x13\x6e\xec\x57\x01\xac\xe9\x56\xa4\x80\x59\xe9\x71\xac\x0e\x85\x5d\x51\x61\x70\x45\x0d\x6a\xbb\xaf\x07\x79\xd9\x9b\x78\xea\xb1\xbc\x77\xc1\x07\x21\x11\xcf\xc8\x46\x44\x3a\x0e\xf7\xd4\xda\x75\xf0\xdf\xf0\x2a\x79\xe4\xf8\x5c\x3f\x37\xc2\x28\x5a\x3c\x8d\xce\x09\x92\xde\x38\x63\x0e\x88\x71\xd4\x64\x8f\x17\x68\xae\xd8\xba\xfa\x6e\x62\x90\x36\x6f\x7b\x05\x1a\x53\x3b\x18\x38\x7b\x95\xa6\x7b\xf4\x5f\x27\x0a\x8d\xa7\x9f\x06\x11\xc3\x36\x2b\x5e\x51\xe1\x46\x85\xdf\x22\x58\xd0\xf1\xb0\xe3\xc2\xed\xe0\xb8\x83\x4a\xce\x76\xb1\x0f\x07\xc5\x90\xbd\xc7\xed\xdc\xc7\xfd\xca\x85\xa1\x0d\x17\xb8\xe9\xb6\x87\xf5\xe9\xf7\xa5\xdc\xbe\xfc\x2e\xca\x5d\x94\x6e\x2e\xe5\xd6\x0b\xc2\x96\x23\xfd\xfb\x8c\x43\x12\xdf\xc2\xf6\xb6\xf8\x83\xe3\x59\x9f\xb9\x9e\x9d\x1c\x55\x52\x7a\x90\xc9\xde\xf6\x80\x54\x39\xaa\xe6\x83\x99\xe9\xcd\xfd\xc8\x9e\x21\xb4\x1e\xdb\x16\xd2\xca\xd5\x7b\x79\xc0\xe2\x4d\x7c\x1d\x5a\x9d\xd0\x3e\x70\x06\xa5\xa8\xee\x25\x92\x76\x74\x5b\x46\xeb\x0e\x3f\x04\x98\xc0\xab\xea\x9e\xd4\x5f\x6e\xcf\x19\x59\xd7\x0a\xd5\xf2\x5d\x56\x99\xc4\x35\xf7\xa5\x3b\x34\x73\x17\x36\x04\x08\xe4\x68\xb8\xe5\x7a\x4f\x45\x0d\x9d\xa6\xb7\xce\xaa\xbd\xd2\x29\xb7\xf6\x5b\x3e\x84\xf2\x29\x6e\xac\x27\x5a\x0c\x6f\x7c\x32\x21\xae\x39\x6a\xae\xa6\xef\xcf\x15\xda\xa8\x32\xb3\xb7\x3e\xd7\xd4\xe0\x3e\x1e\x3c\xfe\x89\x87\xff\xae\x2b\xe5\x78\xf4\x45\x17\xc1\xa1\xcb\x7c\x31\x67\xa9\xbd\xc2\xa6\x89\x1e\xb7\xd8\x73\x9c\xd1\x27\xe0\xc2\xcd\x38\x4a\x90\x56\x17\xc0\xfd\x94\x34\x21\x45\xe8\x1d\x5d\xf4\x13\xd7\x93\x52\x0c\x9a\x3b\xc3\x7e\x72\x37\x25\x29\x3d\x75\xef\xbc\x47\x8f\xce\xf4\xa3\x7e\xef\xfd\x9b\xbf\x29\xe3\xf5\x37\x5e\xcc\xe6\xc9\xb0\xfd\xff\xf2\xb2\xdd\xff\xdd\xa6\xd5\x9a\x31\xf9\xa1\x12\x9c\xc3\xa9\x76\x8f\xa7\x41\xee\xec\x25\x6e\xd3\x34\xd1\xae\xed\xd3\x5e\xd2\xf8\x13\xa6\x48\xa4\x1d\xf6\x3d\xdd\x1d\xba\x05\x27\x87\xaf\xa3\x51\xff\xc2\xff\xfb\x68\xcc\x7d\xef\x14\xf5\xe4\x29\x3f\xba\x6c\xbe\x5f\xe8\xad\x6b\xce\x4e\x02\x3f\xeb\x29\x87\x23\x31\x55\x51\x39\xd6\xec\x01\x07\x67\x27\x99\x57\x3f\x52\x3f\x98\x2e\x62\x3c\xfb\xf4\xf1\x2b\xb8\xf8\xd8\x5b\x03\x1d\x3c\x15\x19\xc1\xe1\x32\xe9\x50\x5d\x36\x02\xc3\xd4\x02\xcd\xf3\x16\x11\x5a\xd5\x7d\x41\xdb\xd6\x20\x9d\xbc\x92\xb2\x9d\x25\xf2\xda\xe8\xd8\x95\x02\x29\xb6\x03\xef\xf9\xb8\xb2\x8a\xf9\xa7\xff\x05\x00\x00\xff\xff\xe1\xb8\x5d\x1a\xb0\x2d\x00\x00"

func roxcontractCdcBytes() ([]byte, error) {
	return bindataRead(
		_roxcontractCdc,
		"RoxContract.cdc",
	)
}

func roxcontractCdc() (*asset, error) {
	bytes, err := roxcontractCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "RoxContract.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9e, 0x9d, 0xdf, 0x7d, 0xb1, 0xbd, 0xdb, 0x4c, 0xb4, 0x42, 0xe0, 0x70, 0xd4, 0xe7, 0x41, 0x1, 0xd7, 0xef, 0x1, 0x4a, 0x28, 0x77, 0x8e, 0xad, 0x5c, 0x47, 0x15, 0x47, 0xad, 0x66, 0x95, 0x8e}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"NonFungibleToken.cdc": nonfungibletokenCdc,
	"RoxContract.cdc":      roxcontractCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"NonFungibleToken.cdc": {nonfungibletokenCdc, map[string]*bintree{}},
	"RoxContract.cdc": {roxcontractCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
