// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../contracts/NonFungibleToken.cdc (4.968kB)
// ../../../contracts/RoxContract.cdc (9.834kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _nonfungibletokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x41\x8f\xdb\xb8\x0e\x3e\x37\x40\xfe\x03\xdb\x02\xaf\x33\x45\x26\x79\x87\x87\x77\x08\x50\xbc\xbe\xed\x34\x40\x2e\xb3\xc5\x6c\x16\x7b\x28\x0a\x44\xb1\xe8\x44\xa8\x2c\xb9\x92\x9c\x34\x5b\xcc\x7f\x5f\x90\x92\x65\x3b\xc9\xcc\x4e\x4f\xbb\x87\xed\xc4\x96\xc8\x8f\x1f\xc9\x8f\xf4\xec\xed\xdb\xf1\x68\x3c\x7a\xfd\x1a\x56\x3b\x84\x85\xb6\x07\xb8\xb3\xe6\x66\xd1\x98\xad\xda\x68\x84\x95\xfd\x8a\x06\x7c\x10\x46\x0a\x27\xd3\xd1\xf5\x9d\x35\xed\x09\x3e\xb0\x86\xc2\x9a\xe0\x44\x11\x40\x99\x80\xae\x14\x05\xd2\x59\xb2\x99\x1f\x40\xd8\x89\x00\x42\x6b\x30\xd6\xdc\x94\xad\x87\xc0\x1e\xda\xfb\x1e\x0a\xdb\x68\x49\xbf\x4b\xeb\x2a\x08\x76\x3a\x1e\x2d\x4b\x10\xd0\x78\x74\x70\x10\x26\x78\x08\x16\x24\xd6\xda\x1e\x41\x80\xc1\x03\x98\x32\x64\x03\x13\x08\x3b\x54\xae\x03\x74\x60\x7b\x06\x51\x8e\x47\xc1\x82\xaa\x6a\x8d\x15\x9a\x40\xe7\xe0\x34\x90\x0e\xed\x34\xe1\x3f\x37\xb5\x13\x7b\x42\x0d\xa5\xd5\x44\x17\x05\x44\xa6\x5c\xa3\xd1\x83\x30\x12\x8c\xa8\x94\xd9\x8e\x47\x1c\x6f\x18\x50\xe0\x6b\x2c\x54\xa9\xd0\x4f\x33\x95\x8b\xd5\x1a\x1c\x7a\xdb\xb8\x8e\xb3\xc2\x3a\xcc\x0f\x21\x1c\xeb\x44\x9e\xc3\xda\xa1\x47\xe2\x40\x18\xb8\x5b\xac\x40\x19\xf6\xe0\x2b\xe1\x3a\x0e\xb2\xf1\x0f\x56\x6b\x2c\x82\xb2\x66\x0d\xf7\x27\x3e\x3a\xf3\x64\xd9\x07\xeb\x08\x3e\xd3\xfc\xc6\xb3\xed\x22\xdf\xa6\x1c\x50\x6a\x0b\xdd\x48\x3e\x55\xe2\x01\xca\xc6\xf0\x4b\xce\x87\x60\x2e\x08\x8a\x3d\x18\x74\xf4\x08\x85\x57\xfa\x38\x1e\x55\x76\x9f\xb2\xec\x09\x2e\x31\x64\x9b\x00\xb6\xe4\xe3\x03\x27\x11\xf5\x27\x67\xf7\x4a\xa2\x5b\xf3\xd9\xf5\x3d\x16\xa8\xf6\xf4\x33\x43\xce\x84\xfa\x14\x8d\xef\x3f\x03\x89\x85\x16\x0e\x7b\x08\x0f\x2a\xec\xc0\xdb\x0a\xa1\x76\xc8\x66\x6b\xeb\x99\x30\xa9\xf8\x44\xca\x96\xc3\x6f\x8d\x72\xc8\xc8\x3a\xf2\x7a\xd9\x2e\xd0\x05\xa1\x4c\xca\x31\x5b\xda\xe0\x4e\xec\x95\x75\xb9\x4b\x7c\x5b\x3b\x47\x20\x14\x1e\x6b\xe1\x44\x40\xd8\x60\x21\x1a\x42\x1a\x60\xab\xf6\xe8\xd9\x0b\x97\x35\xfd\x21\x36\x4a\xab\x70\x24\x5f\x7e\x47\xf7\x04\x38\x2c\xd1\xa1\xa1\x9c\x05\x9b\xea\xba\x8f\x8a\x10\x5b\xa3\x8f\x80\xdf\x6b\xeb\x93\xc1\x52\xa1\x96\xb1\x10\xbb\xf8\x95\x01\x6b\x10\xac\x83\xca\x3a\x1c\x8f\x12\xf9\x1d\x67\x53\x58\x52\x6f\x7a\x9b\xa0\x11\x2c\x7f\x8a\xab\x12\x5f\x11\x8a\xc6\x07\x5b\xe5\x5c\xb4\xcc\x0d\xfa\x6a\x98\x0e\x6a\x57\x0b\x7b\xe1\x94\x6d\xc8\xa6\x32\xdb\x94\x11\xb2\x1f\x2b\x83\x29\xfb\xe5\x08\x8d\x27\x5a\xb3\x71\x0e\xa3\x33\x35\x49\xb8\x6c\xc9\x05\x3a\xac\x7a\x0f\x85\x30\xe0\xd1\xc8\xf1\x88\xae\xb9\x58\x37\x6d\xe9\xd5\x88\xee\x26\xd8\x1b\xfa\x77\xc2\xee\xa9\x0a\x29\x75\x66\x4b\x10\xd9\x0b\x77\x39\x21\x13\x50\x20\x99\xd5\xa0\x51\x6e\xd1\x8d\x47\x17\x5a\x6c\x65\xd9\x5d\xdb\x8b\xd4\x06\xc6\x86\x1d\x3a\x86\x39\xc9\xa2\xc5\xb2\xe1\x89\xa1\x23\x5b\x97\x4e\xc4\x5e\xb9\x5b\xac\xc6\xa3\xd2\xd9\xea\x2c\xb9\x2c\x63\x06\x8a\x56\x5d\x24\xd6\xd6\xab\x90\x53\x0a\xd6\x0c\x9c\xbd\xf1\xe3\xd1\xb0\x60\x0b\x4b\x19\x09\xb1\x96\x83\x13\xc6\x97\xe8\x18\xf6\xdb\x19\xfd\x7f\x36\x63\xc9\xaf\xa8\x9a\x63\xb7\x9f\x2a\xf8\x14\x7e\x65\xfb\xfd\xb7\x94\x38\xad\xf9\xb6\xaa\x6a\xeb\x42\xcc\x50\x2f\xf9\xca\xf7\x67\xc0\x6c\x36\x1e\xd5\xcd\xe6\x82\xf5\x73\xed\xfd\x41\xb0\x00\x00\x12\xb4\x60\x83\xd0\x60\x9a\x6a\x83\x8e\xe5\x22\x26\x92\x6b\x57\xf9\x28\x8b\xca\x00\x7e\x57\x3e\xc4\x2e\xa1\xcb\xe4\x6d\x2f\x5c\xbc\xfd\x5b\x53\xd7\xfa\x38\x87\xdf\x97\x26\xfc\xf7\x3f\x3d\xfb\x1f\xf7\x11\xad\x08\x80\x95\x0a\x01\x25\x1c\x88\xf0\x94\x95\x1e\x5e\x0a\x47\x05\x25\xb4\xfa\x93\x46\x48\xbc\xdf\xb9\x42\x36\xf4\x21\x1d\x5f\x76\x47\xaf\xae\x2f\xbb\x53\x7e\xe8\x51\xa4\x09\xa8\x7c\xae\x0d\x33\xc9\x17\x95\x91\xaa\x10\x81\x6b\x34\x8b\xeb\x99\x74\x26\xcb\x01\x0e\xa2\x67\x05\xa8\xb2\xa6\x43\xc8\xb3\x19\x2c\xcf\x6e\x2b\x0f\xc6\x86\x28\xce\x20\x8a\xc2\x36\x26\xbc\xf1\x3c\x13\xc4\x16\x27\xb0\x26\x43\x6b\xce\x3c\x6c\x10\xd6\x46\xe9\xf5\xf4\x31\x2a\xfe\x48\xee\xaf\x94\x6c\x79\x9f\x30\x92\x39\xfc\x5f\x4a\x87\xde\xff\xef\x11\x66\x1e\xa3\x25\xd5\x3e\x4a\xee\xb0\xe1\xc4\x38\x8d\x2d\xb4\x8c\x25\x35\x7c\x0e\x61\x7d\xfb\x8f\x86\x75\x1b\x0f\x0d\xa2\x0a\xf6\x72\x4c\xcb\xe1\xca\x93\x6a\xca\xe7\xcd\xa1\x5b\x6e\xce\xbd\x9d\xcf\x38\x58\x52\x41\xfe\x88\x47\x7a\xed\xd1\x18\xf5\xad\x41\x58\xde\x26\xf6\x44\xb1\xe3\xd2\xdd\x09\xdf\x9d\x25\x93\x1a\x03\x74\xb0\xe3\xbb\x87\x1e\xdc\xfb\x38\xf4\xaa\x9c\x08\x12\x9d\x84\x91\x0a\xef\x92\xd4\x52\x28\xd9\x00\xef\x63\xa5\x32\x71\x66\x25\xfc\x24\x5d\x28\xa3\x30\x92\xd1\x64\x90\xc7\xc1\x92\x85\xef\x2c\xe4\xbb\xc5\x6a\x7e\x16\xed\x73\x22\xe8\x11\x6e\xa1\x42\xa9\x68\xdc\xb6\x7d\xe0\xa1\x55\xd8\x9e\xbe\x3e\x8b\xf8\x76\x11\x39\x21\x3f\x4b\xb8\x43\xda\x6d\xf2\x2e\x96\xdd\xf4\xea\x8c\xd4\x31\x1e\x52\x01\xe2\x10\x8f\xcc\xb8\x61\x84\x65\x63\xb2\xdd\xab\xf6\x8f\xe5\x6d\x1b\xf2\xf5\x1c\xde\x9f\xf0\xc2\x37\x69\x89\x39\x79\x46\xff\x39\xf4\x8d\x0e\x53\x25\xe1\xdd\x3b\xe8\x5b\x7b\x45\x85\xb3\xbc\x6d\x1b\xa2\x93\x8a\xd8\x6c\x55\xe3\x03\x75\x38\xaf\x94\xa2\x42\x10\xb1\x8b\x68\x2d\x42\x4f\x1d\xb2\xbc\x7d\x35\x74\xf7\xd0\xfd\x7c\x78\x66\x62\x52\xbf\xf9\x96\x8f\x9f\xcc\x4a\xbb\x0f\x76\xf3\x22\x39\x6b\x67\x64\x10\x5f\xbb\xa4\x08\xfe\x4b\xb8\x6d\xc3\xf5\x4d\xf9\x10\x52\xf6\xd3\x71\xea\xbe\x85\xf0\xe2\x45\x9b\x98\x64\xf8\x8a\x49\x8a\x99\xb8\x7e\x32\x56\x6e\xa2\x2c\xa5\x69\x01\x28\x6c\x55\xf1\xb6\x96\x6f\xd4\xcd\x46\x2b\xbf\x83\xd2\xba\xfc\xd5\x32\xc4\xf2\x08\x05\x1d\xe4\x4f\x64\xa2\x38\xed\x97\xa7\x41\xf7\x4f\x6d\x31\x2c\x6f\xfd\xd5\xf5\x1c\x3e\xc7\x4a\xfb\x72\x7e\x66\x63\x9d\xb3\x87\xbb\xc5\xaa\x27\x7e\xd7\x73\xf8\x57\x6e\xe2\xc7\xc4\x24\xc5\x95\x7a\xc2\x14\x8e\xd6\x91\xc1\x67\x4d\x5f\x42\x36\xd8\x2e\xee\xb2\xfd\xac\xc9\x7b\x05\xc9\x50\x2b\x3e\x4f\x14\x49\xc7\xcb\x3c\x37\xef\x24\x17\xcc\xe4\x22\x6f\x83\x12\xba\x55\xfc\x56\x38\xde\x77\x77\x56\xcb\x4e\xbd\x13\xa6\x4b\xe5\xd2\xee\x1c\x34\x6d\x24\x1d\x9e\xc3\xfb\x1f\x91\xa8\x39\x5d\x7e\x38\x71\xf3\xcf\x29\xc8\xd3\x2d\x13\x3b\xe6\xbc\x45\x3a\x38\x1e\x64\xa6\x68\x60\x29\xdf\x0a\x51\x61\xd2\x4d\x25\x41\x38\x27\x8e\xcf\xad\xcf\x81\xcd\x58\x9c\xe0\x30\x34\xce\xa4\x3e\x76\xe2\xd8\xaa\x17\xbd\x8b\xad\xe6\xb0\xcd\xce\x69\x03\xfd\x5d\xad\x0f\xfc\xdd\xb7\x8e\x52\xc9\xa3\xec\x3e\xc1\xe2\x76\xdf\xff\xe6\xbe\xe4\x6a\x36\x03\x6f\xbb\xa9\x1f\xf3\xc4\xdf\x25\x0e\x85\x04\x29\x82\x60\xa6\x78\xaf\xaf\x30\xec\xac\x4c\xe3\x49\x85\x9f\x6a\xbc\xb3\x49\xe0\xf0\xd2\x20\xf0\xa8\xcb\x69\xae\xca\xcf\x4a\x7e\x81\x97\xef\xc0\x28\x3d\x87\x57\x64\x45\x5a\x8c\xbb\x1f\x2f\xd1\xe7\x91\xbd\xfc\x29\xb5\x2f\x1c\x8a\x80\x1f\xab\x3a\x1c\x7b\xdf\x22\xf1\x29\xa7\x0f\xe9\xd5\x05\xbd\x87\xf8\xbd\x16\xd9\x3f\x2d\xf3\x3e\xa3\x47\xe6\xd2\x1e\x38\x11\xbe\x53\x00\x62\xeb\xa2\x77\xca\xf6\xfb\x1e\x98\xbe\x50\x5e\x18\x9e\x69\x70\xb6\x95\x32\xd5\x68\xb6\x61\x47\x53\xf4\xdf\x69\x78\x46\x2f\xb2\xdf\xa1\xed\xd4\xe4\xe8\xfa\x8c\x75\x14\x3d\xfc\x15\x00\x00\xff\xff\xd5\xbe\x00\xcf\x68\x13\x00\x00"

func nonfungibletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_nonfungibletokenCdc,
		"NonFungibleToken.cdc",
	)
}

func nonfungibletokenCdc() (*asset, error) {
	bytes, err := nonfungibletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "NonFungibleToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdb, 0xf, 0xd7, 0xfa, 0xf8, 0x7, 0xd8, 0xf7, 0xa, 0xb6, 0x12, 0xce, 0x79, 0x51, 0x18, 0xed, 0xc5, 0x9e, 0x39, 0xb8, 0xfc, 0x2c, 0x47, 0x69, 0x56, 0xfc, 0x55, 0x77, 0xfb, 0x35, 0xcf, 0x74}}
	return a, nil
}

var _roxcontractCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x4b\x6f\x1b\x39\xf2\xbf\x0f\x30\xdf\xa1\xec\x43\x22\x61\x64\x39\xf3\xff\x0f\xe6\xd0\xb0\xc6\x89\xe3\xd1\x42\xc0\xae\x10\x38\x1a\xec\x21\x08\x16\x54\x77\x49\x22\xdc\x22\x35\x24\xdb\x96\xd7\xe3\xef\xbe\x20\xd9\x0f\xbe\x5a\x52\x8c\x1c\x76\x75\xb0\xbb\x45\x56\x15\xf9\x63\xbd\x29\xba\xdd\x71\xa1\x60\xce\xd9\xb4\x62\x6b\xba\x2c\x71\xc1\xef\x91\xc1\x4a\xf0\x2d\x9c\x87\x5f\x8f\xf3\x22\x3f\xff\xf1\x87\x1f\x7f\xd8\x55\x4b\xc8\x39\x53\x82\xe4\x0a\xee\xf8\xfe\x63\xfd\x9c\xc5\x9c\x9e\xf5\x7c\x00\x80\xcb\x4b\xf8\xfd\x01\x99\x92\xf6\x55\xb3\x40\xfd\x0e\x0d\xf1\x8c\x51\x45\x49\x49\xff\x8d\xc5\x60\xd8\x50\x75\xd3\xfe\x49\xd5\xa6\x10\xe4\x71\x40\x8b\x0c\xfe\x98\x31\xf5\xeb\x2f\x23\xb3\xce\x0c\x3e\x14\x85\x40\x29\xaf\x87\x21\xcd\x2d\xee\xb8\xa4\xca\x23\x51\xfc\x00\xc1\x3f\x28\x53\x58\x78\xf3\x05\xdf\xcf\x8a\x0c\x3e\x2b\x41\xd9\x3a\x22\xb8\x21\x2a\xdf\xd4\x54\x7f\x56\x84\x29\xaa\x9e\xfa\x69\x23\x6a\xbe\xff\x28\x90\x68\xe2\xa5\x9d\xaa\x29\xff\xff\xff\x86\x1d\x64\x5b\xaa\x14\x16\xf0\xb8\x41\x06\x44\x13\x00\x95\x50\xf2\xfc\x1e\x8b\x11\x6c\x91\x30\xca\xd6\xfa\x08\x60\xbe\x52\x12\x72\xc2\x18\x57\xb0\x44\x20\x45\x81\x45\x42\xde\xdf\x0d\x69\x52\x5c\x37\xef\x8e\xef\x6f\x51\x2a\xc1\x9f\x3c\x30\x86\xce\x59\xce\xc9\x16\x0b\xf8\x44\xd4\xc6\x39\xd0\x12\xf5\x71\x96\x25\xe6\x8a\x72\xf6\x59\x71\x41\xd6\xa8\xe7\x68\x0c\xda\x97\xbe\xf9\x9f\xaa\x65\x49\x73\x3b\xbd\x7b\xf6\x67\x7f\x28\xb6\xf4\x00\x63\x3b\x99\xe4\x39\x4a\x39\x90\x58\xae\x86\xf0\x40\x04\x2c\xf9\x1e\x65\x06\xef\x9f\xed\x7e\x33\x0d\xc4\x4b\xcf\xdc\xad\x39\xcc\x79\xb5\x5d\xa2\xf8\x84\xe2\x86\xef\x33\x68\xe9\xec\xff\x17\xf7\x24\x35\x0d\xc3\xbd\xba\x71\x11\x75\x80\x5a\x6c\x10\x14\x57\xa4\x04\x66\x78\x02\x5f\xd9\xf3\x9a\x2e\x24\xa8\x0d\x51\xb0\x21\x0f\x08\x4b\x44\x56\xcb\xf6\x79\x1b\xda\xcf\xd5\x6e\x57\xb6\x8a\xe5\x8a\x17\x28\x79\x25\x72\x34\xaa\xd1\x1a\x5b\x2d\xfb\x0f\x46\xff\xac\x10\x66\xb7\xb0\xe2\x02\xd4\x06\x35\x12\xdd\x8c\x06\xd4\xa5\xbf\xf4\x70\x98\x91\x2d\x36\x4a\x1c\x8f\x6e\x51\x91\x82\x28\x92\xc1\xb3\x9d\xd2\x4c\x7d\xf1\xe7\xea\xbd\x58\xbd\xd5\xf0\xf3\x32\x1e\x0d\x90\xbf\x33\xc8\x37\x3c\x03\xe4\xf5\x87\x32\xaa\x06\xee\xe2\x46\x07\x16\x33\xd4\xe0\x80\xf3\xd9\x09\x0c\xbf\xd2\x1f\xcd\x6f\x5c\x22\x5b\xab\x0d\xfc\x06\xef\x32\x38\x9f\xe3\xa3\x01\x57\x8f\x38\x06\x86\xdb\x9d\x7a\x3a\xf7\x19\xbc\xf8\xaf\x5a\xa9\xc6\x06\x5c\x98\xb8\x6e\x72\xdc\xea\x4b\x62\xbe\x11\x33\xb1\xd2\x12\xc3\x16\x42\x98\xc0\x8a\x94\x12\x13\x13\x62\x14\x61\x02\xcf\xa9\x95\x35\x60\xc1\xa4\xc5\xcd\x85\xb7\xd6\xa1\x19\xcb\x05\x6e\xb5\x57\xa8\xf5\x67\x76\x0b\x92\x5b\xcd\xa5\x0a\xa8\x64\x6f\x15\x54\x12\x0b\x20\x6b\x42\x99\x4f\x9f\xdc\x74\x1f\x18\xf0\x13\x0c\x7e\x06\x22\x7d\xaf\x94\x62\x15\xdb\xe8\x97\x0e\xeb\xaf\x30\x81\x77\xe1\x46\x70\x4b\x53\xee\xb6\xa3\x72\xa4\xbd\x04\x56\xa4\x21\x97\x66\xf7\x5a\x0d\x9a\xbd\x33\x0e\x5b\x2e\xd0\xf3\xbd\xad\xe3\x05\xc5\x81\x2a\x5f\xc5\x57\x15\x33\xac\x06\x91\x2a\xd2\x15\x9c\xb9\x87\x9b\x50\x4b\xff\xec\x95\xa8\x30\x9e\xd3\xec\xd1\x77\xf1\xc9\x2d\x82\xaf\xac\xde\x8e\x9b\xb5\x6a\x90\xef\xf8\x7e\x20\x30\xa7\x3b\x8a\x4c\x65\xf0\xe6\x39\x4a\x09\x42\xf7\xfd\x12\x44\xbd\x11\x28\x8a\xe2\x7b\x5a\xa8\x0b\x55\x06\xe7\x1f\xad\x45\xea\xd5\x9a\x33\x12\xda\x6d\x2c\x36\x54\x6a\x5d\xed\x82\x65\x6c\xa9\xd1\x19\x0c\x7a\xec\xe7\x8b\xa8\xd5\x6a\x02\x8c\x96\xc3\xbe\xd3\x39\x40\xa8\xf5\xb1\x07\xfa\x93\xc8\x0f\x4f\x38\xfb\x8e\x86\x73\xfa\xe4\x84\xd4\xc8\x77\x14\x36\xff\x32\x7e\x82\xd9\xd3\x69\x94\xe9\xad\xd4\xa1\x97\x57\x4c\x3b\x0f\x9d\xc3\xa8\x0d\x52\x01\x02\x57\x28\x90\xe5\x81\x7a\xb7\x64\xe3\x9a\xe5\x40\x69\xed\xcb\xe0\xea\x22\x37\x16\xad\xc3\x69\xac\xf1\xa3\xf8\xa8\x8e\x7f\x6a\xf5\x15\xaf\x66\x60\x15\x5e\xff\x7d\x15\xb9\x86\xdd\x82\x9e\x1d\x3b\xf8\xd7\xf1\x6f\x2d\xb0\x79\x1a\x46\x67\x67\x5c\x89\x93\x0c\xbb\x6a\xe1\x24\x24\x23\x0f\xac\x3e\x17\xda\x38\x94\x65\x93\x2b\xbf\xca\xab\x1c\xc9\xae\xff\x57\xfc\x8c\x4e\x74\x68\xb3\x87\xd8\x33\x3c\x6e\x68\x89\x40\xe1\xaa\xdd\x6f\x6f\x34\x48\xf8\xe7\xf6\xd1\x3f\x98\x91\xab\x92\xa9\xf3\x8f\x25\x50\x98\x00\x85\x9f\xa0\x35\x70\x9d\x75\x1e\xdc\x98\x8d\x3e\xc9\x72\xa8\x79\x3a\xa4\x2e\x1e\x4f\x5d\x5f\x4c\x17\xed\xf3\x07\x13\x64\xf3\x5a\x27\x96\x25\xea\x45\x11\xd6\xcd\xf1\x12\xe1\xf9\x74\x11\xd7\xa1\xe3\xd9\x7c\xba\x70\xa1\x6c\x33\xf3\x7b\x64\x6f\x25\xcc\x6e\xe3\xcc\xb6\x2b\x7c\x42\x6d\x3e\x21\x69\xf6\x94\x33\x1e\x76\x95\x35\x91\x53\x3b\x2e\xa0\x4f\xc0\xa1\xbc\x3b\xc8\x91\xbd\xa5\x1e\xb3\x9b\x48\xf4\x37\xd9\x52\x7f\xe8\x71\xdc\x46\x10\x67\xdc\x91\x03\x1a\x97\x88\x99\x34\xcc\x25\x1d\x56\xa1\x7e\x7a\xc9\xf8\xb2\x27\xf9\x16\xf5\xb8\xe8\x19\xd7\x58\xe9\xfc\x8b\xa2\xe8\x09\xe1\x16\x3b\x9d\x52\xb7\x2f\xa7\xa6\xde\xcd\x0c\xef\x00\x0b\x5b\x87\xc7\x49\xa3\xb1\xb7\xa8\x50\xaf\x61\x39\x60\x5b\x9e\xad\x68\x4b\x15\x2b\x92\xa3\x45\xd1\x77\xba\xae\xc4\xc6\x87\x07\xe1\xf7\x7d\x64\x67\xf3\xe9\x62\x18\x93\xad\x51\xcd\x6e\xe5\x60\x98\xc1\x17\x7b\xb4\x5f\x13\xe1\x81\x0b\xc1\x1f\x75\x1c\x77\x3a\x0e\x19\xbc\x49\x89\xe8\xa3\xbe\xe3\xfb\xf9\x4a\x05\x0c\x5c\x05\x99\x4f\x17\xd7\x21\x92\xba\xc8\x59\xd5\xd9\x89\xac\xca\xa6\xa6\x61\xb4\x1c\x99\x6f\x69\xa1\x6b\x76\x3b\xae\x2a\xc1\xb0\xe8\x4b\x53\x2e\x2f\x41\x6e\x78\x55\x16\xba\x10\xd0\x04\x52\x57\x71\xc4\x16\x0f\x44\xac\x2b\x5b\x47\x71\xf3\xbe\xaa\x98\x01\x3b\x08\x46\x5c\xaa\x94\xcb\x1f\xd4\x6b\xab\x93\x50\xf8\xeb\xaf\xe6\xab\x6b\x63\x06\x13\xa0\xc5\x30\x4b\xe7\x03\x4d\xec\xb2\x18\x19\x67\xda\x6e\x20\x33\x6e\x70\x76\xdb\xbf\x45\x1d\xdb\x28\xcb\xb9\x10\x98\xab\xfe\x82\xd7\xd5\xb3\x84\xa6\x75\xca\x95\xa5\x74\x6d\x14\x7b\xec\x4f\x82\x3f\xd0\x42\x47\xac\x68\xe8\x0e\x73\xa4\x0f\xc9\xa1\x94\x12\xc7\xad\x06\xfe\xc8\xb0\x98\x4f\x17\x6d\x53\xe8\xd7\x5f\x12\x31\x63\x3e\x5d\xc4\xce\x34\x32\x44\x63\x72\x2d\x43\xb8\xba\xf0\xaa\xed\x64\x26\xf4\xd8\xf4\x32\x9b\x87\xd9\xad\xa3\xb0\x49\xa3\x0a\xa5\x9a\x20\x62\x3a\xac\x57\x17\xc1\x12\xc6\x02\xb7\xfc\x01\x07\xf7\xf8\x94\x41\x27\x61\x08\xd7\xd7\xb0\x23\x8c\xe6\x83\xf3\x2d\x95\x26\xe9\x9e\x4f\x17\xe7\xe9\xe4\xcf\x6b\xb7\x1a\x41\x63\x5a\x34\x0d\xd7\x56\x9e\xb8\x1e\x13\xdb\x4b\x8d\xb8\x58\x45\x82\xab\x0b\x43\x7c\x04\x90\x93\xdc\xca\x41\x08\xec\x03\x91\x67\xf0\x3e\xb0\xf7\x70\x61\x7e\x68\xd7\xde\xbc\xde\x5d\x6a\x22\x2f\x8b\x45\x1a\xe5\x2f\xb4\xf8\xda\x0a\x4e\x42\xe8\x76\x9f\x35\x76\x8a\x9f\x86\x5c\xed\xf2\x5b\xd9\x47\xb0\x8b\x7d\x6b\x08\x54\x7d\x14\x81\x96\xdc\xe3\x93\x3c\x96\xb1\x7f\x83\x4b\xee\x11\xfa\x26\x81\x1a\x91\xc7\xbc\xfa\x81\xd5\xbc\xca\xc5\xd3\x55\xea\xf4\xce\x8c\x2f\x4d\x79\x5b\x93\xc1\xe1\x0a\x26\x7d\xeb\x27\x95\xda\x1c\xdb\x44\x80\x84\xe6\xa7\xf5\x33\x5c\x6c\xe0\x51\x01\x4b\x99\xac\x47\x6a\x36\x8c\x96\xa7\xf5\x71\x7a\x33\x87\x46\xbf\xfc\x9d\x1d\xce\x18\x34\xfe\xb6\xd2\xfe\x7d\xbb\x53\x4f\x9d\x97\x1d\x24\x1d\x56\x37\xee\x0a\x6f\x5d\x42\xcd\xca\x4b\xdd\x5c\x96\x71\x39\xb0\x42\x95\x6f\xda\xb7\xbf\xa1\x02\xe2\x44\x28\xc5\x81\x80\x55\x0c\x7b\x75\x45\x58\xd3\x5d\x78\x2b\x9d\xd0\x33\xd2\x8a\x40\x1e\x08\x2d\xc9\xb2\xc4\x71\xcb\x6f\xb6\x72\x28\xa0\xe0\x28\x41\xc7\x4b\xd3\x98\x27\x3d\xab\x1c\x59\x5f\xea\x31\xa1\x9a\x46\x02\x69\x6b\x15\xce\x60\x59\x39\x1c\x73\xce\x14\xa9\x5b\x21\x54\xe1\x56\xd7\x66\xdd\xb9\x1e\xe5\x45\x58\x61\x9b\x8f\xce\x77\x35\x4b\x99\xe2\x19\x60\xa4\x49\xc7\xfe\x99\x1a\x5c\x07\xff\xf2\x2f\xd2\x46\x96\xcf\xed\xa9\x16\xa6\xad\xc5\x59\xd1\x44\xbb\xa4\x0f\x16\xcc\x81\x66\x1c\xd4\x97\xe3\x35\xaa\x8f\x64\x47\x96\xb4\xa4\xea\x69\x90\x86\xb7\xbb\x00\x0a\xa9\xad\x1b\xb8\x7a\x93\xa6\x7b\x76\xbf\x4e\x24\x1a\x2f\xbf\x0d\x02\x86\x5d\x54\xfc\xa8\x53\x37\x9d\xfa\xad\xbd\x0d\x9d\x0f\x23\x15\xee\x06\xc7\x91\x57\xb2\xd8\x85\x3a\xec\x25\x43\xe6\x16\x2b\xce\x4c\x9a\xae\xeb\x0d\xdf\xbf\xfe\x5e\xc3\xde\x47\x3d\xde\xf0\xbd\x63\x68\x1d\x47\xfd\xf7\x84\x1e\x80\x8b\xa2\xb9\x3d\xfb\x62\x79\x36\x9d\xc2\xab\x8b\xb3\x5a\xca\x49\x4e\x5b\xcb\xf7\xaf\x1c\x33\x78\x53\xdf\x58\xb9\x62\x7b\x5a\x31\xf1\x6a\xea\x65\x58\x0f\x9e\x85\x19\xee\x8d\xed\xcd\xd8\x86\xbd\x36\x3e\x7d\xa8\xb8\xa7\xf2\x40\xfe\x0a\x51\x89\xd9\x44\xb0\x5e\xe9\x3a\x8e\x1d\x47\xc0\x1e\xc1\x1c\x1f\xcd\xa9\x1b\x7f\xd9\x9e\x7f\x42\x5c\xdb\xd1\xac\xa7\x1f\xf6\xcb\x52\x89\x2a\x37\x5d\xff\x5b\x5d\x4e\x3e\x7f\x73\x9f\xe2\xbf\xfa\x72\xcf\x57\x99\xef\xa6\x2c\x8d\x56\x18\x97\xdc\xa3\x16\x07\x9a\x07\x7d\x02\xae\xed\x8c\xb3\x04\x69\x7d\xa9\xd7\x4f\xa9\x27\xa4\x08\x9d\x46\x41\x3f\x71\x33\x29\xc5\xa0\xbd\x33\xea\x27\xb7\x53\x92\xd2\x53\x77\x89\x07\xd6\x11\x4d\x3f\x3b\xd8\xe3\xbb\xf8\x3e\x9f\x96\x9f\xb3\x32\xa3\x3f\xe6\xd7\x24\xc4\xc4\x24\xbf\xd8\xfe\xfe\xb2\xed\xff\xb8\x40\x34\x30\x26\x7f\x12\x01\x13\xb8\x94\xf6\xf5\xd2\x8b\x53\xbd\xc4\x5d\x48\xd4\xb4\x3b\xf3\x76\x90\x34\xfc\xb1\x44\x20\xd2\x0c\xbb\x9a\x6e\x5b\x5c\x5e\x9f\xee\x5d\x30\xea\x5e\xe2\xfe\x1c\x8c\x19\x65\x08\xeb\xdf\x94\x1e\xdd\xb4\x77\xd2\xbd\x39\xc4\xd5\x85\xa7\x67\x3d\xa9\x67\x20\xa6\x4e\xe0\xc6\x92\x3c\xe0\xe0\xea\x22\x77\x72\x35\x5d\x7b\xa5\x13\x06\x07\x9f\x3e\x7e\x25\x65\xf7\xbd\xf9\xc6\xd1\x0e\xc4\x08\x8e\xa7\x24\xc7\x72\xa0\x11\x28\x22\xd6\xa8\x4e\xdb\x84\x8f\x2a\x31\xc1\xa6\xcb\x05\xa2\xb8\x92\xc2\xce\x10\x39\x25\x6b\xa8\x4a\x9e\x14\x53\xed\xf6\xfc\x8c\xab\xb6\xf9\x97\xff\x04\x00\x00\xff\xff\xf3\xab\x7c\x83\x6a\x26\x00\x00"

func roxcontractCdcBytes() ([]byte, error) {
	return bindataRead(
		_roxcontractCdc,
		"RoxContract.cdc",
	)
}

func roxcontractCdc() (*asset, error) {
	bytes, err := roxcontractCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "RoxContract.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfc, 0x43, 0xa2, 0xa9, 0x73, 0xed, 0xb8, 0xb0, 0xaf, 0xb2, 0x7a, 0x7, 0xc6, 0x1e, 0x8, 0x65, 0x91, 0x2f, 0xe9, 0x96, 0x77, 0x56, 0x9b, 0xf7, 0xe2, 0x9a, 0x1e, 0xee, 0x34, 0xdc, 0x19, 0x90}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"NonFungibleToken.cdc": nonfungibletokenCdc,
	"RoxContract.cdc":      roxcontractCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"NonFungibleToken.cdc": {nonfungibletokenCdc, map[string]*bintree{}},
	"RoxContract.cdc": {roxcontractCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
