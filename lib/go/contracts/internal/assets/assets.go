// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../contracts/NonFungibleToken.cdc (4.968kB)
// ../../../contracts/RoxContract.cdc (8.849kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _nonfungibletokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x41\x8f\xdb\xb8\x0e\x3e\x37\x40\xfe\x03\xdb\x02\xaf\x33\x45\x26\x79\x87\x87\x77\x08\x50\xbc\xbe\xed\x34\x40\x2e\xb3\xc5\x6c\x16\x7b\x28\x0a\x44\xb1\xe8\x44\xa8\x2c\xb9\x92\x9c\x34\x5b\xcc\x7f\x5f\x90\x92\x65\x3b\xc9\xcc\x4e\x4f\xbb\x87\xed\xc4\x96\xc8\x8f\x1f\xc9\x8f\xf4\xec\xed\xdb\xf1\x68\x3c\x7a\xfd\x1a\x56\x3b\x84\x85\xb6\x07\xb8\xb3\xe6\x66\xd1\x98\xad\xda\x68\x84\x95\xfd\x8a\x06\x7c\x10\x46\x0a\x27\xd3\xd1\xf5\x9d\x35\xed\x09\x3e\xb0\x86\xc2\x9a\xe0\x44\x11\x40\x99\x80\xae\x14\x05\xd2\x59\xb2\x99\x1f\x40\xd8\x89\x00\x42\x6b\x30\xd6\xdc\x94\xad\x87\xc0\x1e\xda\xfb\x1e\x0a\xdb\x68\x49\xbf\x4b\xeb\x2a\x08\x76\x3a\x1e\x2d\x4b\x10\xd0\x78\x74\x70\x10\x26\x78\x08\x16\x24\xd6\xda\x1e\x41\x80\xc1\x03\x98\x32\x64\x03\x13\x08\x3b\x54\xae\x03\x74\x60\x7b\x06\x51\x8e\x47\xc1\x82\xaa\x6a\x8d\x15\x9a\x40\xe7\xe0\x34\x90\x0e\xed\x34\xe1\x3f\x37\xb5\x13\x7b\x42\x0d\xa5\xd5\x44\x17\x05\x44\xa6\x5c\xa3\xd1\x83\x30\x12\x8c\xa8\x94\xd9\x8e\x47\x1c\x6f\x18\x50\xe0\x6b\x2c\x54\xa9\xd0\x4f\x33\x95\x8b\xd5\x1a\x1c\x7a\xdb\xb8\x8e\xb3\xc2\x3a\xcc\x0f\x21\x1c\xeb\x44\x9e\xc3\xda\xa1\x47\xe2\x40\x18\xb8\x5b\xac\x40\x19\xf6\xe0\x2b\xe1\x3a\x0e\xb2\xf1\x0f\x56\x6b\x2c\x82\xb2\x66\x0d\xf7\x27\x3e\x3a\xf3\x64\xd9\x07\xeb\x08\x3e\xd3\xfc\xc6\xb3\xed\x22\xdf\xa6\x1c\x50\x6a\x0b\xdd\x48\x3e\x55\xe2\x01\xca\xc6\xf0\x4b\xce\x87\x60\x2e\x08\x8a\x3d\x18\x74\xf4\x08\x85\x57\xfa\x38\x1e\x55\x76\x9f\xb2\xec\x09\x2e\x31\x64\x9b\x00\xb6\xe4\xe3\x03\x27\x11\xf5\x27\x67\xf7\x4a\xa2\x5b\xf3\xd9\xf5\x3d\x16\xa8\xf6\xf4\x33\x43\xce\x84\xfa\x14\x8d\xef\x3f\x03\x89\x85\x16\x0e\x7b\x08\x0f\x2a\xec\xc0\xdb\x0a\xa1\x76\xc8\x66\x6b\xeb\x99\x30\xa9\xf8\x44\xca\x96\xc3\x6f\x8d\x72\xc8\xc8\x3a\xf2\x7a\xd9\x2e\xd0\x05\xa1\x4c\xca\x31\x5b\xda\xe0\x4e\xec\x95\x75\xb9\x4b\x7c\x5b\x3b\x47\x20\x14\x1e\x6b\xe1\x44\x40\xd8\x60\x21\x1a\x42\x1a\x60\xab\xf6\xe8\xd9\x0b\x97\x35\xfd\x21\x36\x4a\xab\x70\x24\x5f\x7e\x47\xf7\x04\x38\x2c\xd1\xa1\xa1\x9c\x05\x9b\xea\xba\x8f\x8a\x10\x5b\xa3\x8f\x80\xdf\x6b\xeb\x93\xc1\x52\xa1\x96\xb1\x10\xbb\xf8\x95\x01\x6b\x10\xac\x83\xca\x3a\x1c\x8f\x12\xf9\x1d\x67\x53\x58\x52\x6f\x7a\x9b\xa0\x11\x2c\x7f\x8a\xab\x12\x5f\x11\x8a\xc6\x07\x5b\xe5\x5c\xb4\xcc\x0d\xfa\x6a\x98\x0e\x6a\x57\x0b\x7b\xe1\x94\x6d\xc8\xa6\x32\xdb\x94\x11\xb2\x1f\x2b\x83\x29\xfb\xe5\x08\x8d\x27\x5a\xb3\x71\x0e\xa3\x33\x35\x49\xb8\x6c\xc9\x05\x3a\xac\x7a\x0f\x85\x30\xe0\xd1\xc8\xf1\x88\xae\xb9\x58\x37\x6d\xe9\xd5\x88\xee\x26\xd8\x1b\xfa\x77\xc2\xee\xa9\x0a\x29\x75\x66\x4b\x10\xd9\x0b\x77\x39\x21\x13\x50\x20\x99\xd5\xa0\x51\x6e\xd1\x8d\x47\x17\x5a\x6c\x65\xd9\x5d\xdb\x8b\xd4\x06\xc6\x86\x1d\x3a\x86\x39\xc9\xa2\xc5\xb2\xe1\x89\xa1\x23\x5b\x97\x4e\xc4\x5e\xb9\x5b\xac\xc6\xa3\xd2\xd9\xea\x2c\xb9\x2c\x63\x06\x8a\x56\x5d\x24\xd6\xd6\xab\x90\x53\x0a\xd6\x0c\x9c\xbd\xf1\xe3\xd1\xb0\x60\x0b\x4b\x19\x09\xb1\x96\x83\x13\xc6\x97\xe8\x18\xf6\xdb\x19\xfd\x7f\x36\x63\xc9\xaf\xa8\x9a\x63\xb7\x9f\x2a\xf8\x14\x7e\x65\xfb\xfd\xb7\x94\x38\xad\xf9\xb6\xaa\x6a\xeb\x42\xcc\x50\x2f\xf9\xca\xf7\x67\xc0\x6c\x36\x1e\xd5\xcd\xe6\x82\xf5\x73\xed\xfd\x41\xb0\x00\x00\x12\xb4\x60\x83\xd0\x60\x9a\x6a\x83\x8e\xe5\x22\x26\x92\x6b\x57\xf9\x28\x8b\xca\x00\x7e\x57\x3e\xc4\x2e\xa1\xcb\xe4\x6d\x2f\x5c\xbc\xfd\x5b\x53\xd7\xfa\x38\x87\xdf\x97\x26\xfc\xf7\x3f\x3d\xfb\x1f\xf7\x11\xad\x08\x80\x95\x0a\x01\x25\x1c\x88\xf0\x94\x95\x1e\x5e\x0a\x47\x05\x25\xb4\xfa\x93\x46\x48\xbc\xdf\xb9\x42\x36\xf4\x21\x1d\x5f\x76\x47\xaf\xae\x2f\xbb\x53\x7e\xe8\x51\xa4\x09\xa8\x7c\xae\x0d\x33\xc9\x17\x95\x91\xaa\x10\x81\x6b\x34\x8b\xeb\x99\x74\x26\xcb\x01\x0e\xa2\x67\x05\xa8\xb2\xa6\x43\xc8\xb3\x19\x2c\xcf\x6e\x2b\x0f\xc6\x86\x28\xce\x20\x8a\xc2\x36\x26\xbc\xf1\x3c\x13\xc4\x16\x27\xb0\x26\x43\x6b\xce\x3c\x6c\x10\xd6\x46\xe9\xf5\xf4\x31\x2a\xfe\x48\xee\xaf\x94\x6c\x79\x9f\x30\x92\x39\xfc\x5f\x4a\x87\xde\xff\xef\x11\x66\x1e\xa3\x25\xd5\x3e\x4a\xee\xb0\xe1\xc4\x38\x8d\x2d\xb4\x8c\x25\x35\x7c\x0e\x61\x7d\xfb\x8f\x86\x75\x1b\x0f\x0d\xa2\x0a\xf6\x72\x4c\xcb\xe1\xca\x93\x6a\xca\xe7\xcd\xa1\x5b\x6e\xce\xbd\x9d\xcf\x38\x58\x52\x41\xfe\x88\x47\x7a\xed\xd1\x18\xf5\xad\x41\x58\xde\x26\xf6\x44\xb1\xe3\xd2\xdd\x09\xdf\x9d\x25\x93\x1a\x03\x74\xb0\xe3\xbb\x87\x1e\xdc\xfb\x38\xf4\xaa\x9c\x08\x12\x9d\x84\x91\x0a\xef\x92\xd4\x52\x28\xd9\x00\xef\x63\xa5\x32\x71\x66\x25\xfc\x24\x5d\x28\xa3\x30\x92\xd1\x64\x90\xc7\xc1\x92\x85\xef\x2c\xe4\xbb\xc5\x6a\x7e\x16\xed\x73\x22\xe8\x11\x6e\xa1\x42\xa9\x68\xdc\xb6\x7d\xe0\xa1\x55\xd8\x9e\xbe\x3e\x8b\xf8\x76\x11\x39\x21\x3f\x4b\xb8\x43\xda\x6d\xf2\x2e\x96\xdd\xf4\xea\x8c\xd4\x31\x1e\x52\x01\xe2\x10\x8f\xcc\xb8\x61\x84\x65\x63\xb2\xdd\xab\xf6\x8f\xe5\x6d\x1b\xf2\xf5\x1c\xde\x9f\xf0\xc2\x37\x69\x89\x39\x79\x46\xff\x39\xf4\x8d\x0e\x53\x25\xe1\xdd\x3b\xe8\x5b\x7b\x45\x85\xb3\xbc\x6d\x1b\xa2\x93\x8a\xd8\x6c\x55\xe3\x03\x75\x38\xaf\x94\xa2\x42\x10\xb1\x8b\x68\x2d\x42\x4f\x1d\xb2\xbc\x7d\x35\x74\xf7\xd0\xfd\x7c\x78\x66\x62\x52\xbf\xf9\x96\x8f\x9f\xcc\x4a\xbb\x0f\x76\xf3\x22\x39\x6b\x67\x64\x10\x5f\xbb\xa4\x08\xfe\x4b\xb8\x6d\xc3\xf5\x4d\xf9\x10\x52\xf6\xd3\x71\xea\xbe\x85\xf0\xe2\x45\x9b\x98\x64\xf8\x8a\x49\x8a\x99\xb8\x7e\x32\x56\x6e\xa2\x2c\xa5\x69\x01\x28\x6c\x55\xf1\xb6\x96\x6f\xd4\xcd\x46\x2b\xbf\x83\xd2\xba\xfc\xd5\x32\xc4\xf2\x08\x05\x1d\xe4\x4f\x64\xa2\x38\xed\x97\xa7\x41\xf7\x4f\x6d\x31\x2c\x6f\xfd\xd5\xf5\x1c\x3e\xc7\x4a\xfb\x72\x7e\x66\x63\x9d\xb3\x87\xbb\xc5\xaa\x27\x7e\xd7\x73\xf8\x57\x6e\xe2\xc7\xc4\x24\xc5\x95\x7a\xc2\x14\x8e\xd6\x91\xc1\x67\x4d\x5f\x42\x36\xd8\x2e\xee\xb2\xfd\xac\xc9\x7b\x05\xc9\x50\x2b\x3e\x4f\x14\x49\xc7\xcb\x3c\x37\xef\x24\x17\xcc\xe4\x22\x6f\x83\x12\xba\x55\xfc\x56\x38\xde\x77\x77\x56\xcb\x4e\xbd\x13\xa6\x4b\xe5\xd2\xee\x1c\x34\x6d\x24\x1d\x9e\xc3\xfb\x1f\x91\xa8\x39\x5d\x7e\x38\x71\xf3\xcf\x29\xc8\xd3\x2d\x13\x3b\xe6\xbc\x45\x3a\x38\x1e\x64\xa6\x68\x60\x29\xdf\x0a\x51\x61\xd2\x4d\x25\x41\x38\x27\x8e\xcf\xad\xcf\x81\xcd\x58\x9c\xe0\x30\x34\xce\xa4\x3e\x76\xe2\xd8\xaa\x17\xbd\x8b\xad\xe6\xb0\xcd\xce\x69\x03\xfd\x5d\xad\x0f\xfc\xdd\xb7\x8e\x52\xc9\xa3\xec\x3e\xc1\xe2\x76\xdf\xff\xe6\xbe\xe4\x6a\x36\x03\x6f\xbb\xa9\x1f\xf3\xc4\xdf\x25\x0e\x85\x04\x29\x82\x60\xa6\x78\xaf\xaf\x30\xec\xac\x4c\xe3\x49\x85\x9f\x6a\xbc\xb3\x49\xe0\xf0\xd2\x20\xf0\xa8\xcb\x69\xae\xca\xcf\x4a\x7e\x81\x97\xef\xc0\x28\x3d\x87\x57\x64\x45\x5a\x8c\xbb\x1f\x2f\xd1\xe7\x91\xbd\xfc\x29\xb5\x2f\x1c\x8a\x80\x1f\xab\x3a\x1c\x7b\xdf\x22\xf1\x29\xa7\x0f\xe9\xd5\x05\xbd\x87\xf8\xbd\x16\xd9\x3f\x2d\xf3\x3e\xa3\x47\xe6\xd2\x1e\x38\x11\xbe\x53\x00\x62\xeb\xa2\x77\xca\xf6\xfb\x1e\x98\xbe\x50\x5e\x18\x9e\x69\x70\xb6\x95\x32\xd5\x68\xb6\x61\x47\x53\xf4\xdf\x69\x78\x46\x2f\xb2\xdf\xa1\xed\xd4\xe4\xe8\xfa\x8c\x75\x14\x3d\xfc\x15\x00\x00\xff\xff\xd5\xbe\x00\xcf\x68\x13\x00\x00"

func nonfungibletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_nonfungibletokenCdc,
		"NonFungibleToken.cdc",
	)
}

func nonfungibletokenCdc() (*asset, error) {
	bytes, err := nonfungibletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "NonFungibleToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdb, 0xf, 0xd7, 0xfa, 0xf8, 0x7, 0xd8, 0xf7, 0xa, 0xb6, 0x12, 0xce, 0x79, 0x51, 0x18, 0xed, 0xc5, 0x9e, 0x39, 0xb8, 0xfc, 0x2c, 0x47, 0x69, 0x56, 0xfc, 0x55, 0x77, 0xfb, 0x35, 0xcf, 0x74}}
	return a, nil
}

var _roxcontractCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x5a\x5f\x4f\x23\x39\x12\x7f\x5e\x24\xbe\x43\xc1\x03\x93\x68\x43\x98\xbd\x5b\xed\x43\x8b\x2c\x33\xc0\x72\x8a\x74\x17\x8d\x98\xac\xee\x01\x8d\x4e\x4e\x77\x25\xb1\xe8\xd8\x39\xdb\x81\x70\x2c\xdf\xfd\x64\xbb\xff\xf8\x5f\x27\x19\x34\x79\x60\xba\xdb\xae\x2a\xfb\xe7\xf2\xaf\xaa\xec\xa1\xab\x35\x17\x0a\x26\x9c\xdd\x6d\xd8\x82\xce\x4a\x9c\xf2\x47\x64\x30\x17\x7c\x05\xa7\xe1\xe7\x61\x5e\xe4\xa7\xc7\x47\xc7\x47\xeb\xcd\x0c\x72\xce\x94\x20\xb9\x82\x7b\xbe\xbd\xa9\x9e\xb3\x58\xd3\xab\xee\x0f\x00\x70\x71\x01\x7f\x3c\x21\x53\xd2\xbe\x6a\x15\xa8\xdf\xa1\x16\x1e\x33\xaa\x28\x29\xe9\xff\xb0\xe8\xf5\x6b\xa9\xb6\xdb\xbf\xa9\x5a\x16\x82\x3c\xf7\x68\x91\xc1\x9f\x63\xa6\x7e\xfb\x75\x60\xc6\x99\xc1\xe7\xa2\x10\x28\xe5\x55\x3f\x94\xb9\xc5\x35\x97\x54\x79\x22\x8a\xef\x10\xf8\x17\x65\x0a\x0b\xaf\xbf\xe0\xdb\x71\x91\xc1\x57\x25\x28\x5b\x24\xc6\x75\xcd\xb7\x37\x02\x89\x16\x9b\xd9\xae\x5a\xf2\xef\x7f\xeb\xb7\xd3\x5e\x51\xa5\xb0\x80\xe7\x25\x32\x20\x5a\x00\xa8\x84\x92\xe7\x8f\x58\x0c\x60\x85\x84\x51\xb6\xd0\x30\xc2\x64\xae\x24\xe4\x84\x31\xae\x60\x86\x40\x8a\x02\x8b\x84\xbd\x7f\x1a\xd1\xa4\xb9\xb6\xdf\x3d\xdf\xde\xa2\x54\x82\xbf\x78\x13\xea\x3b\xeb\x31\x21\x2b\x2c\xe0\x0b\x51\x4b\x67\x51\x4a\xd4\x4b\x52\x96\x98\x2b\xca\xd9\x57\xc5\x05\x59\xa0\xee\xa3\x31\x68\x5e\xba\xfa\x7f\xd9\xcc\x4a\x9a\xdb\xee\xed\xb3\xdf\xfb\x73\xb1\xa2\x3b\x14\xdb\xce\x24\xcf\x51\xca\x9e\xc4\x72\xde\x87\x27\x22\x60\xc6\xb7\x28\x33\xf8\xf4\x6a\xe7\x9b\x69\x20\xde\x3a\xfa\xae\xcc\x32\x4e\x36\xab\x19\x8a\x2f\x28\xae\xf9\x36\x83\x46\xce\xfe\xfb\xe6\xae\xa4\x96\x61\xb8\x55\xd7\x2e\xa2\x0e\x50\xd3\x25\x82\xe2\x8a\x94\xc0\x8c\x4e\xe0\x73\xbb\x5e\x77\x53\x09\x6a\x49\x14\x2c\xc9\x13\xc2\x0c\x91\x55\xb6\x7d\xdd\x46\xf6\xeb\x66\xbd\x2e\x5f\xea\x75\x70\xcd\x0b\x94\x7c\x23\x72\x34\xae\xd1\x6c\x98\xca\xf6\x9f\x8c\xfe\x77\x83\x30\xbe\x85\x39\x17\xa0\x96\xa8\x91\x68\x7b\xd4\xa0\xce\xfc\xa1\x87\xcd\x8c\xac\xb0\x76\xe2\xb8\x75\x85\x8a\x14\x44\x91\x0c\x5e\x6d\x97\xba\xeb\x9b\xdf\x57\xcf\xc5\xfa\xad\x86\x9f\x97\x71\x6b\x80\xfc\xbd\x41\xbe\xd6\x19\x20\xaf\x7f\x94\x51\xd5\x73\x07\x37\xd8\x31\x98\xbe\x06\x07\x9c\xdf\x5a\x60\xf8\x49\xff\xb4\xbe\x61\x89\x6c\xa1\x96\xf0\x3b\x7c\xcc\xe0\x74\x82\xcf\x06\x5c\xdd\xe2\x6c\x30\x5c\xad\xd5\xcb\xa9\xaf\xe0\xcd\x7f\xd5\x4e\x35\x34\xe0\xc2\xc8\xa5\xba\x61\xe3\x2f\x89\xfe\xc6\xcc\xc8\x5a\x4b\x34\x5b\x08\x61\x04\x73\x52\x4a\x4c\x74\x88\x51\x84\x11\xbc\xa6\x46\x56\x83\x05\xa3\x06\x37\x17\xde\xca\x87\xc6\x2c\x17\xb8\xd2\xac\x50\xf9\xcf\xf8\x16\x24\xb7\x9e\x4b\x15\x50\xc9\x3e\x28\xd8\x48\x2c\x80\x2c\x08\x65\xbe\x7c\x72\xd2\x5d\x60\xc0\xcf\xd0\xfb\x05\x88\xf4\x59\x29\xa5\x2a\xde\xa3\x0f\x2d\xd6\xdf\x60\x04\x1f\xc3\x89\xe0\x8a\xa6\xe8\xb6\x95\x72\xac\xbd\x05\xbb\x48\x43\x2e\xcd\xec\xb5\x1b\xd4\x73\x67\x1c\x56\x5c\xa0\xc7\xbd\x0d\xf1\x82\xe2\x40\x95\xef\xe2\xf3\x0d\x33\xaa\x7a\x91\x2b\xd2\x39\x9c\xb8\x8b\x9b\x70\x4b\x7f\xed\x95\xd8\x60\xdc\xa7\x9e\xa3\x4f\xf1\xc9\x29\x82\xef\xac\xde\x8c\xeb\xb1\x6a\x90\xef\xf9\xb6\x27\x30\xa7\x6b\x8a\x4c\x65\x70\xf6\x1a\x85\xf5\x90\xbe\xdf\x82\xa8\x37\x00\x45\x51\xfc\xc8\x1d\xea\x42\x95\xc1\xe9\x8d\xdd\x91\x7a\xb4\x66\x8d\x84\xa6\x8d\xe9\x92\x4a\xed\xab\x6d\xb0\x8c\x77\x6a\xb4\x06\xbd\x8e\xfd\xf3\x20\x2a\xb7\x1a\x01\xa3\x65\xbf\x6b\x75\x76\x08\x6a\x7f\xec\x80\xfe\x20\xf1\xdd\x1d\x4e\x7e\xe0\xc6\x39\xbc\x73\xc2\x6a\xc4\x1d\x85\xcd\xa1\x0c\x4f\x30\xbb\x3a\xb5\x33\x7d\x90\x3a\xf4\xf2\x0d\xd3\xe4\xa1\x73\x18\xb5\x44\x2a\x40\xe0\x1c\x05\xb2\x3c\x70\xef\x46\x6c\x58\xa9\xec\x29\xed\x7d\x19\x5c\x9e\xe7\x66\x47\xeb\x70\x1a\x7b\xfc\x20\x5e\xaa\xfd\xbf\xca\x7d\xc5\xbb\x15\x58\x87\xd7\x7f\xdf\x25\xae\x61\xb7\xa0\x67\xfb\x16\xfe\x7d\xfa\x9b\x1d\x58\x3f\xf5\xa3\xb5\x33\x54\xe2\x24\xb4\xae\x5b\x38\x09\xc9\xc0\x03\xab\x7f\x7c\xf4\xd3\x4f\x95\x6b\xbf\xb9\xa9\xe2\xdd\xb4\x79\xfe\x6c\xf8\x32\xaf\x48\x63\x56\xa2\x76\x20\xc2\xda\x3e\x5e\x4e\x33\xb9\x9b\xc6\x65\xc1\x70\x3c\xb9\x9b\xba\xc4\xd0\x24\x59\x8f\xc8\x3e\x48\x18\xdf\xc6\x49\x4a\x9b\xc3\x86\x4c\x77\x40\xfe\xe3\xf1\x59\xdc\xec\xf2\x5b\x22\x3d\x72\x56\xb3\xcb\xc0\xae\x14\x2a\x48\x77\xbc\xa1\xee\xa3\xda\xc8\xf4\x77\xd1\x6f\x37\x8b\x38\x1e\x10\x50\x86\xdb\xf2\x33\x34\xec\xa0\x61\xef\x56\x6d\x9c\x9c\x86\x69\x81\xa3\x2a\xf4\x4e\x2f\xaf\x9a\x75\xe4\x51\xa2\x6a\x17\x1d\xed\x1a\x2b\x1d\x4a\x29\x8a\x0e\x36\xb6\xd8\xe9\xec\xa8\x79\x39\x34\x8b\xaa\x7b\x78\x0b\x58\xd8\x92\x2a\x8e\xff\x66\xb7\x45\x35\x57\x05\x8b\x9f\x98\x78\x4a\xbd\xbd\xa2\x37\xab\x98\x93\x1c\x2d\x8a\x7e\x54\x76\x2d\xd6\xf1\x3d\x60\xd2\x4f\xd1\x3e\x9b\xdc\x4d\xfb\xb1\xd8\x02\xd5\xf8\x56\xf6\xfa\x19\x3c\xd8\xa5\xfd\x16\xf7\x99\x71\x21\xf8\xb3\xa6\x64\xa7\x78\xcc\xe0\x2c\x65\xa2\x4b\xfa\x9e\x6f\x27\x73\x15\x28\x70\x1d\x64\x72\x37\xbd\x0a\x91\xd4\xf9\xea\xbc\x0a\x34\x72\x53\xd6\xe9\x29\xa3\xe5\xc0\x7c\xa5\x85\x2e\xbf\x6c\xbb\xda\x08\x86\x45\x57\xc4\xb9\xb8\x00\xb9\xe4\x9b\xb2\xd0\x39\x9d\x16\x90\x3a\x21\x27\x36\x0f\x24\x62\xb1\xb1\x29\x31\x37\xef\xf3\x0d\x33\x60\x07\xf9\x0b\x97\x2a\x95\xc0\xf4\xaa\xb1\x55\xf9\x04\xfc\xf5\x57\xfd\xe9\xca\x6c\x83\x11\xd0\xa2\x9f\xa5\xa9\xbd\x4e\x77\x2c\x46\x86\x4c\x9b\x09\x64\x86\x06\xc7\xb7\xdd\x53\xd4\xe9\x10\x65\x39\x17\x02\x73\xd5\x5d\xbb\xb8\x7e\x96\xf0\xb4\xd6\xb9\xb2\x94\xaf\x0d\x62\xc6\xfe\x22\xf8\x13\x2d\x50\x24\x9a\xee\x31\x47\xfa\x94\x6c\x4a\x39\x71\x5c\x35\xf2\x67\x86\x85\x2e\xa6\xeb\xfa\xfe\xb7\x5f\x13\x31\x63\x72\x37\x8d\xc9\x34\xda\x88\x66\xcb\x35\x0a\xe1\xf2\xdc\x2b\x9c\x92\x59\xf2\x73\x7d\xb4\x54\x3f\x8c\x6f\x1d\x87\x4d\x6e\xaa\xd0\xaa\x09\x22\xe6\xc0\xeb\xf2\x3c\x18\xc2\x50\xe0\x8a\x3f\x61\xef\x11\x5f\x32\x68\x2d\xf4\xe1\xea\x0a\xd6\x84\xd1\xbc\x77\xba\xa2\xd2\xe4\x4f\x93\xbb\xe9\x69\x3a\x8e\x7b\xa7\x5f\xc6\xd0\x90\x16\xf5\xf9\x57\x63\x4f\x5c\x0d\x89\x3d\xda\x8a\xb4\x58\x47\x82\xcb\x73\x23\xbc\x07\x90\x83\x68\x65\x27\x04\xf6\x81\xc8\x13\xf8\x14\xec\xf7\x70\x60\x7e\x68\xd7\x6c\x5e\xcd\x2e\xd5\x91\x97\xc5\x34\x8d\xf2\x03\x2d\xbe\x35\x86\x93\x10\xba\x87\x81\x1a\x3b\xc5\x0f\x43\xae\xa2\xfc\xc6\xf6\x1e\xec\x62\x6e\x0d\x81\xaa\x96\x22\xf0\x92\x47\x7c\x91\x7b\x54\x7f\x0f\x25\x77\x18\x3d\x4b\xa0\x46\xe4\x3e\x56\xdf\x31\x9a\x77\x51\x3c\x9d\xa7\x56\xef\xc4\x70\x69\x8a\x6d\x4d\x06\x87\x73\x18\x75\x8d\x9f\x6c\xd4\x72\xdf\x24\x02\x24\xb4\x3e\xed\x9f\xe1\x60\x03\x46\x05\x2c\x65\xb2\x84\xad\xd4\x30\x5a\x1e\x56\x92\x77\x66\x0e\xb5\x7f\xf9\x33\xdb\x9d\x31\x68\xfc\x6d\xd1\xf4\xc7\x6a\xad\x5e\x5a\x96\xed\x25\x09\xab\x6d\x77\x8d\x37\x94\x50\xa9\xf2\x52\x37\x57\x65\x5c\x0e\xcc\x51\xe5\xcb\xe6\xed\x1f\xa8\x80\x38\x11\x4a\x71\x20\x60\x1d\xc3\xde\x24\x10\x56\x17\x8a\x1f\xa4\x13\x7a\x06\xda\x11\xc8\x13\xa1\x25\x99\x95\x38\x6c\xf4\x8d\xe7\x8e\x04\x14\x1c\x25\xe8\x78\x69\xce\x58\x49\xc7\x28\x07\x96\x4b\x3d\x25\x54\xcb\x48\x20\x4d\xad\xc2\x19\xcc\x36\x8e\xc6\x9c\x33\x45\xaa\xaa\x96\x2a\x5c\x8d\x8b\x81\xb3\xae\x7b\x75\x11\x56\xd8\x73\x24\xe7\x5b\xa5\x52\xa6\x74\x06\x18\x69\xd1\xa1\xbf\xa6\x06\xd7\xde\x7f\xfc\x7b\x8d\x81\xd5\x73\x7b\xe8\x0e\xd3\xbb\xc5\x19\xd1\x48\x53\xd2\x67\x0b\x66\x4f\x2b\x0e\xce\x16\x86\x0b\x54\x37\x64\x4d\x66\xb4\xa4\xea\xa5\x97\x86\xb7\x3d\xcb\x0f\xa5\x2d\x0d\x5c\x9e\xa5\xe5\x5e\xdd\xcf\x89\x44\xe3\xed\xf7\x5e\xa0\xb0\x8d\x8a\x37\x3a\x75\xd3\xa9\xdf\xc2\x9b\xd0\x69\x3f\x72\xe1\xb6\x71\x18\xb1\x92\xc5\x2e\xf4\x61\x2f\x19\x32\x17\x12\x71\x66\x52\x1f\xa0\x5d\xf3\xed\xfb\x8f\xa8\xed\xd5\xc2\xf3\x35\xdf\x3a\x1b\xad\xd5\xa8\xff\x0e\x52\xe5\x7c\x77\xe5\x66\x2e\x42\x1e\xac\xce\xfa\xd0\xe7\xf2\xfc\xa4\xb2\x72\x10\x69\x6b\xfb\xfe\xed\x51\x06\x67\xd5\xe5\x83\x6b\xb6\xe3\xf4\x2e\x1e\x4d\x35\x0c\xcb\xe0\x59\x98\xe1\x5e\xdb\xe3\x3c\x7b\xf6\xaa\x37\x9f\x5e\x54\xdc\x52\xb9\x23\x7f\x85\xa8\xc4\xac\x23\x58\xa7\x75\x1d\xc7\xf6\x23\x60\x97\x60\x82\xcf\x66\xd5\x0d\x5f\x36\xeb\x9f\x30\xd7\x1c\x4e\x55\xdd\xf7\xf3\xf2\x02\xb5\xc7\x4c\xc8\x0a\x23\x8c\xad\x93\x5c\x25\x48\xb8\x6b\x52\x57\xe6\x2e\xa1\xc3\x12\x95\x5d\x97\x81\xf6\x7a\xe6\xfb\x0c\xd9\x33\xd6\xee\x49\xd9\xea\xd9\x1e\x28\xdd\xf3\xed\x98\xa5\xbc\xc8\x3e\xec\x33\x9c\x38\x95\xb4\xa3\x88\x23\xcd\xf9\x8f\xf9\x35\xfa\x9c\x61\x98\x02\xc2\xdc\x38\x13\x43\x94\x7e\x05\xf8\xe3\x6d\x1f\x1f\xfd\x14\x97\x2c\x26\xea\x27\xef\x5b\x61\x04\x17\xd2\xbe\x5e\x78\xcc\xd9\x29\xdc\x92\xb4\x96\x5d\x9b\xb7\x9d\xa2\xe1\x4d\x6c\x60\xd2\x34\xbb\x7b\xc8\x1e\xba\x78\x27\x47\x1f\x83\x56\xf7\x86\xe8\x97\xa0\xcd\xf8\x5b\x58\x91\xa5\x8e\x47\xaf\x9b\x0b\xaf\xce\xa8\x76\x79\xee\x79\x54\x47\x32\x14\x98\xa9\x52\x8a\xa1\x24\x4f\xd8\xbb\x3c\xcf\x9d\xec\x41\x57\x03\xe9\x10\xe6\xe0\xd3\xa5\xaf\xa4\xec\xb1\x33\x02\xee\xad\x89\x07\xb0\x3f\x48\xee\x8b\xca\x03\x50\x44\x2c\x50\x1d\x36\x09\x1f\x55\x62\xe8\xaf\x8d\x4e\x11\xd3\xa5\xb0\x33\x42\x4e\x11\x15\xba\x92\x67\xc5\xd4\x5f\x1d\xff\xcf\xa3\xda\xf0\xda\x23\x8e\x8f\xe0\xff\x01\x00\x00\xff\xff\x84\x14\xe6\xdb\x91\x22\x00\x00"

func roxcontractCdcBytes() ([]byte, error) {
	return bindataRead(
		_roxcontractCdc,
		"RoxContract.cdc",
	)
}

func roxcontractCdc() (*asset, error) {
	bytes, err := roxcontractCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "RoxContract.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x44, 0xa3, 0xea, 0x5f, 0xa9, 0xa8, 0x74, 0xef, 0x9e, 0x1a, 0xff, 0x69, 0x68, 0xe9, 0x3c, 0x7, 0x3e, 0xdd, 0x5b, 0x8d, 0x31, 0x5e, 0x4c, 0x43, 0xf9, 0xa0, 0x25, 0xe3, 0x40, 0xcc, 0xb3, 0xc5}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"NonFungibleToken.cdc": nonfungibletokenCdc,
	"RoxContract.cdc":      roxcontractCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"NonFungibleToken.cdc": {nonfungibletokenCdc, map[string]*bintree{}},
	"RoxContract.cdc": {roxcontractCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
