// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../contracts/NonFungibleToken.cdc (4.968kB)
// ../../../contracts/RoxContract.cdc (8.853kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _nonfungibletokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x41\x8f\xdb\xb8\x0e\x3e\x37\x40\xfe\x03\xdb\x02\xaf\x33\x45\x26\x79\x87\x87\x77\x08\x50\xbc\xbe\xed\x34\x40\x2e\xb3\xc5\x6c\x16\x7b\x28\x0a\x44\xb1\xe8\x44\xa8\x2c\xb9\x92\x9c\x34\x5b\xcc\x7f\x5f\x90\x92\x65\x3b\xc9\xcc\x4e\x4f\xbb\x87\xed\xc4\x96\xc8\x8f\x1f\xc9\x8f\xf4\xec\xed\xdb\xf1\x68\x3c\x7a\xfd\x1a\x56\x3b\x84\x85\xb6\x07\xb8\xb3\xe6\x66\xd1\x98\xad\xda\x68\x84\x95\xfd\x8a\x06\x7c\x10\x46\x0a\x27\xd3\xd1\xf5\x9d\x35\xed\x09\x3e\xb0\x86\xc2\x9a\xe0\x44\x11\x40\x99\x80\xae\x14\x05\xd2\x59\xb2\x99\x1f\x40\xd8\x89\x00\x42\x6b\x30\xd6\xdc\x94\xad\x87\xc0\x1e\xda\xfb\x1e\x0a\xdb\x68\x49\xbf\x4b\xeb\x2a\x08\x76\x3a\x1e\x2d\x4b\x10\xd0\x78\x74\x70\x10\x26\x78\x08\x16\x24\xd6\xda\x1e\x41\x80\xc1\x03\x98\x32\x64\x03\x13\x08\x3b\x54\xae\x03\x74\x60\x7b\x06\x51\x8e\x47\xc1\x82\xaa\x6a\x8d\x15\x9a\x40\xe7\xe0\x34\x90\x0e\xed\x34\xe1\x3f\x37\xb5\x13\x7b\x42\x0d\xa5\xd5\x44\x17\x05\x44\xa6\x5c\xa3\xd1\x83\x30\x12\x8c\xa8\x94\xd9\x8e\x47\x1c\x6f\x18\x50\xe0\x6b\x2c\x54\xa9\xd0\x4f\x33\x95\x8b\xd5\x1a\x1c\x7a\xdb\xb8\x8e\xb3\xc2\x3a\xcc\x0f\x21\x1c\xeb\x44\x9e\xc3\xda\xa1\x47\xe2\x40\x18\xb8\x5b\xac\x40\x19\xf6\xe0\x2b\xe1\x3a\x0e\xb2\xf1\x0f\x56\x6b\x2c\x82\xb2\x66\x0d\xf7\x27\x3e\x3a\xf3\x64\xd9\x07\xeb\x08\x3e\xd3\xfc\xc6\xb3\xed\x22\xdf\xa6\x1c\x50\x6a\x0b\xdd\x48\x3e\x55\xe2\x01\xca\xc6\xf0\x4b\xce\x87\x60\x2e\x08\x8a\x3d\x18\x74\xf4\x08\x85\x57\xfa\x38\x1e\x55\x76\x9f\xb2\xec\x09\x2e\x31\x64\x9b\x00\xb6\xe4\xe3\x03\x27\x11\xf5\x27\x67\xf7\x4a\xa2\x5b\xf3\xd9\xf5\x3d\x16\xa8\xf6\xf4\x33\x43\xce\x84\xfa\x14\x8d\xef\x3f\x03\x89\x85\x16\x0e\x7b\x08\x0f\x2a\xec\xc0\xdb\x0a\xa1\x76\xc8\x66\x6b\xeb\x99\x30\xa9\xf8\x44\xca\x96\xc3\x6f\x8d\x72\xc8\xc8\x3a\xf2\x7a\xd9\x2e\xd0\x05\xa1\x4c\xca\x31\x5b\xda\xe0\x4e\xec\x95\x75\xb9\x4b\x7c\x5b\x3b\x47\x20\x14\x1e\x6b\xe1\x44\x40\xd8\x60\x21\x1a\x42\x1a\x60\xab\xf6\xe8\xd9\x0b\x97\x35\xfd\x21\x36\x4a\xab\x70\x24\x5f\x7e\x47\xf7\x04\x38\x2c\xd1\xa1\xa1\x9c\x05\x9b\xea\xba\x8f\x8a\x10\x5b\xa3\x8f\x80\xdf\x6b\xeb\x93\xc1\x52\xa1\x96\xb1\x10\xbb\xf8\x95\x01\x6b\x10\xac\x83\xca\x3a\x1c\x8f\x12\xf9\x1d\x67\x53\x58\x52\x6f\x7a\x9b\xa0\x11\x2c\x7f\x8a\xab\x12\x5f\x11\x8a\xc6\x07\x5b\xe5\x5c\xb4\xcc\x0d\xfa\x6a\x98\x0e\x6a\x57\x0b\x7b\xe1\x94\x6d\xc8\xa6\x32\xdb\x94\x11\xb2\x1f\x2b\x83\x29\xfb\xe5\x08\x8d\x27\x5a\xb3\x71\x0e\xa3\x33\x35\x49\xb8\x6c\xc9\x05\x3a\xac\x7a\x0f\x85\x30\xe0\xd1\xc8\xf1\x88\xae\xb9\x58\x37\x6d\xe9\xd5\x88\xee\x26\xd8\x1b\xfa\x77\xc2\xee\xa9\x0a\x29\x75\x66\x4b\x10\xd9\x0b\x77\x39\x21\x13\x50\x20\x99\xd5\xa0\x51\x6e\xd1\x8d\x47\x17\x5a\x6c\x65\xd9\x5d\xdb\x8b\xd4\x06\xc6\x86\x1d\x3a\x86\x39\xc9\xa2\xc5\xb2\xe1\x89\xa1\x23\x5b\x97\x4e\xc4\x5e\xb9\x5b\xac\xc6\xa3\xd2\xd9\xea\x2c\xb9\x2c\x63\x06\x8a\x56\x5d\x24\xd6\xd6\xab\x90\x53\x0a\xd6\x0c\x9c\xbd\xf1\xe3\xd1\xb0\x60\x0b\x4b\x19\x09\xb1\x96\x83\x13\xc6\x97\xe8\x18\xf6\xdb\x19\xfd\x7f\x36\x63\xc9\xaf\xa8\x9a\x63\xb7\x9f\x2a\xf8\x14\x7e\x65\xfb\xfd\xb7\x94\x38\xad\xf9\xb6\xaa\x6a\xeb\x42\xcc\x50\x2f\xf9\xca\xf7\x67\xc0\x6c\x36\x1e\xd5\xcd\xe6\x82\xf5\x73\xed\xfd\x41\xb0\x00\x00\x12\xb4\x60\x83\xd0\x60\x9a\x6a\x83\x8e\xe5\x22\x26\x92\x6b\x57\xf9\x28\x8b\xca\x00\x7e\x57\x3e\xc4\x2e\xa1\xcb\xe4\x6d\x2f\x5c\xbc\xfd\x5b\x53\xd7\xfa\x38\x87\xdf\x97\x26\xfc\xf7\x3f\x3d\xfb\x1f\xf7\x11\xad\x08\x80\x95\x0a\x01\x25\x1c\x88\xf0\x94\x95\x1e\x5e\x0a\x47\x05\x25\xb4\xfa\x93\x46\x48\xbc\xdf\xb9\x42\x36\xf4\x21\x1d\x5f\x76\x47\xaf\xae\x2f\xbb\x53\x7e\xe8\x51\xa4\x09\xa8\x7c\xae\x0d\x33\xc9\x17\x95\x91\xaa\x10\x81\x6b\x34\x8b\xeb\x99\x74\x26\xcb\x01\x0e\xa2\x67\x05\xa8\xb2\xa6\x43\xc8\xb3\x19\x2c\xcf\x6e\x2b\x0f\xc6\x86\x28\xce\x20\x8a\xc2\x36\x26\xbc\xf1\x3c\x13\xc4\x16\x27\xb0\x26\x43\x6b\xce\x3c\x6c\x10\xd6\x46\xe9\xf5\xf4\x31\x2a\xfe\x48\xee\xaf\x94\x6c\x79\x9f\x30\x92\x39\xfc\x5f\x4a\x87\xde\xff\xef\x11\x66\x1e\xa3\x25\xd5\x3e\x4a\xee\xb0\xe1\xc4\x38\x8d\x2d\xb4\x8c\x25\x35\x7c\x0e\x61\x7d\xfb\x8f\x86\x75\x1b\x0f\x0d\xa2\x0a\xf6\x72\x4c\xcb\xe1\xca\x93\x6a\xca\xe7\xcd\xa1\x5b\x6e\xce\xbd\x9d\xcf\x38\x58\x52\x41\xfe\x88\x47\x7a\xed\xd1\x18\xf5\xad\x41\x58\xde\x26\xf6\x44\xb1\xe3\xd2\xdd\x09\xdf\x9d\x25\x93\x1a\x03\x74\xb0\xe3\xbb\x87\x1e\xdc\xfb\x38\xf4\xaa\x9c\x08\x12\x9d\x84\x91\x0a\xef\x92\xd4\x52\x28\xd9\x00\xef\x63\xa5\x32\x71\x66\x25\xfc\x24\x5d\x28\xa3\x30\x92\xd1\x64\x90\xc7\xc1\x92\x85\xef\x2c\xe4\xbb\xc5\x6a\x7e\x16\xed\x73\x22\xe8\x11\x6e\xa1\x42\xa9\x68\xdc\xb6\x7d\xe0\xa1\x55\xd8\x9e\xbe\x3e\x8b\xf8\x76\x11\x39\x21\x3f\x4b\xb8\x43\xda\x6d\xf2\x2e\x96\xdd\xf4\xea\x8c\xd4\x31\x1e\x52\x01\xe2\x10\x8f\xcc\xb8\x61\x84\x65\x63\xb2\xdd\xab\xf6\x8f\xe5\x6d\x1b\xf2\xf5\x1c\xde\x9f\xf0\xc2\x37\x69\x89\x39\x79\x46\xff\x39\xf4\x8d\x0e\x53\x25\xe1\xdd\x3b\xe8\x5b\x7b\x45\x85\xb3\xbc\x6d\x1b\xa2\x93\x8a\xd8\x6c\x55\xe3\x03\x75\x38\xaf\x94\xa2\x42\x10\xb1\x8b\x68\x2d\x42\x4f\x1d\xb2\xbc\x7d\x35\x74\xf7\xd0\xfd\x7c\x78\x66\x62\x52\xbf\xf9\x96\x8f\x9f\xcc\x4a\xbb\x0f\x76\xf3\x22\x39\x6b\x67\x64\x10\x5f\xbb\xa4\x08\xfe\x4b\xb8\x6d\xc3\xf5\x4d\xf9\x10\x52\xf6\xd3\x71\xea\xbe\x85\xf0\xe2\x45\x9b\x98\x64\xf8\x8a\x49\x8a\x99\xb8\x7e\x32\x56\x6e\xa2\x2c\xa5\x69\x01\x28\x6c\x55\xf1\xb6\x96\x6f\xd4\xcd\x46\x2b\xbf\x83\xd2\xba\xfc\xd5\x32\xc4\xf2\x08\x05\x1d\xe4\x4f\x64\xa2\x38\xed\x97\xa7\x41\xf7\x4f\x6d\x31\x2c\x6f\xfd\xd5\xf5\x1c\x3e\xc7\x4a\xfb\x72\x7e\x66\x63\x9d\xb3\x87\xbb\xc5\xaa\x27\x7e\xd7\x73\xf8\x57\x6e\xe2\xc7\xc4\x24\xc5\x95\x7a\xc2\x14\x8e\xd6\x91\xc1\x67\x4d\x5f\x42\x36\xd8\x2e\xee\xb2\xfd\xac\xc9\x7b\x05\xc9\x50\x2b\x3e\x4f\x14\x49\xc7\xcb\x3c\x37\xef\x24\x17\xcc\xe4\x22\x6f\x83\x12\xba\x55\xfc\x56\x38\xde\x77\x77\x56\xcb\x4e\xbd\x13\xa6\x4b\xe5\xd2\xee\x1c\x34\x6d\x24\x1d\x9e\xc3\xfb\x1f\x91\xa8\x39\x5d\x7e\x38\x71\xf3\xcf\x29\xc8\xd3\x2d\x13\x3b\xe6\xbc\x45\x3a\x38\x1e\x64\xa6\x68\x60\x29\xdf\x0a\x51\x61\xd2\x4d\x25\x41\x38\x27\x8e\xcf\xad\xcf\x81\xcd\x58\x9c\xe0\x30\x34\xce\xa4\x3e\x76\xe2\xd8\xaa\x17\xbd\x8b\xad\xe6\xb0\xcd\xce\x69\x03\xfd\x5d\xad\x0f\xfc\xdd\xb7\x8e\x52\xc9\xa3\xec\x3e\xc1\xe2\x76\xdf\xff\xe6\xbe\xe4\x6a\x36\x03\x6f\xbb\xa9\x1f\xf3\xc4\xdf\x25\x0e\x85\x04\x29\x82\x60\xa6\x78\xaf\xaf\x30\xec\xac\x4c\xe3\x49\x85\x9f\x6a\xbc\xb3\x49\xe0\xf0\xd2\x20\xf0\xa8\xcb\x69\xae\xca\xcf\x4a\x7e\x81\x97\xef\xc0\x28\x3d\x87\x57\x64\x45\x5a\x8c\xbb\x1f\x2f\xd1\xe7\x91\xbd\xfc\x29\xb5\x2f\x1c\x8a\x80\x1f\xab\x3a\x1c\x7b\xdf\x22\xf1\x29\xa7\x0f\xe9\xd5\x05\xbd\x87\xf8\xbd\x16\xd9\x3f\x2d\xf3\x3e\xa3\x47\xe6\xd2\x1e\x38\x11\xbe\x53\x00\x62\xeb\xa2\x77\xca\xf6\xfb\x1e\x98\xbe\x50\x5e\x18\x9e\x69\x70\xb6\x95\x32\xd5\x68\xb6\x61\x47\x53\xf4\xdf\x69\x78\x46\x2f\xb2\xdf\xa1\xed\xd4\xe4\xe8\xfa\x8c\x75\x14\x3d\xfc\x15\x00\x00\xff\xff\xd5\xbe\x00\xcf\x68\x13\x00\x00"

func nonfungibletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_nonfungibletokenCdc,
		"NonFungibleToken.cdc",
	)
}

func nonfungibletokenCdc() (*asset, error) {
	bytes, err := nonfungibletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "NonFungibleToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdb, 0xf, 0xd7, 0xfa, 0xf8, 0x7, 0xd8, 0xf7, 0xa, 0xb6, 0x12, 0xce, 0x79, 0x51, 0x18, 0xed, 0xc5, 0x9e, 0x39, 0xb8, 0xfc, 0x2c, 0x47, 0x69, 0x56, 0xfc, 0x55, 0x77, 0xfb, 0x35, 0xcf, 0x74}}
	return a, nil
}

var _roxcontractCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x5a\xcd\x6e\x1b\x39\x12\x3e\xc7\x80\xdf\xa1\xe2\x43\x22\x61\x64\x79\x66\x77\x30\x87\x86\x35\x4e\x6c\x8f\x17\x02\x76\x85\xc0\xd1\x60\x0f\x46\xb0\xa0\xba\x4b\x12\xe1\x6e\x52\x4b\x52\xb6\xbc\x1e\xbf\xfb\x82\x64\xff\xf0\xaf\x25\xc7\x88\x0e\x71\x77\x93\x55\x45\x7e\x2c\x7e\x55\x45\x86\x56\x1b\x2e\x14\xcc\x38\xbb\xd9\xb2\x15\x5d\x94\x38\xe7\xf7\xc8\x60\x29\x78\x05\x27\xe1\xe7\x71\x5e\xe4\x27\xc7\x47\xc7\x47\x9b\xed\x02\x72\xce\x94\x20\xb9\x82\x5b\xbe\xbb\xaa\x9f\xb3\x58\xd3\xb3\xee\x0f\x00\x70\x76\x06\x7f\x3c\x20\x53\xd2\xbe\x6a\x15\xa8\xdf\xa1\x11\x9e\x32\xaa\x28\x29\xe9\xff\xb0\x18\x0c\x1b\xa9\xae\xdb\xbf\xa9\x5a\x17\x82\x3c\x0e\x68\x91\xc1\x9f\x53\xa6\x7e\xfb\x75\x64\xc6\x99\xc1\xe7\xa2\x10\x28\xe5\xc5\x30\x94\xb9\xc6\x0d\x97\x54\x79\x22\x8a\xef\x11\xf8\x17\x65\x0a\x0b\xaf\xbf\xe0\xbb\x69\x91\xc1\x57\x25\x28\x5b\x25\xc6\x75\xc9\x77\x57\x02\x89\x16\x5b\xd8\xae\x5a\xf2\xef\x7f\x1b\x76\xd3\xae\xa8\x52\x58\xc0\xe3\x1a\x19\x10\x2d\x00\x54\x42\xc9\xf3\x7b\x2c\x46\x50\x21\x61\x94\xad\x34\x8c\x30\x5b\x2a\x09\x39\x61\x8c\x2b\x58\x20\x90\xa2\xc0\x22\x61\xef\x9f\x46\x34\x69\xae\xeb\x77\xcb\x77\xd7\x28\x95\xe0\x4f\xde\x84\x86\xce\x7a\xcc\x48\x85\x05\x7c\x21\x6a\xed\x2c\x4a\x89\x7a\x49\xca\x12\x73\x45\x39\xfb\xaa\xb8\x20\x2b\xd4\x7d\x34\x06\xed\x4b\x5f\xff\x2f\xdb\x45\x49\x73\xdb\xbd\x7b\xf6\x7b\x7f\x2e\x2a\xba\x47\xb1\xed\x4c\xf2\x1c\xa5\x1c\x48\x2c\x97\x43\x78\x20\x02\x16\x7c\x87\x32\x83\x4f\xcf\x76\xbe\x99\x06\xe2\xa5\xa7\x6f\x65\x96\x71\xb6\xad\x16\x28\xbe\xa0\xb8\xe4\xbb\x0c\x5a\x39\xfb\xf7\xc5\x5d\x49\x2d\xc3\x70\xa7\x2e\x5d\x44\x1d\xa0\xe6\x6b\x04\xc5\x15\x29\x81\x19\x9d\xc0\x97\x76\xbd\x6e\xe6\x12\xd4\x9a\x28\x58\x93\x07\x84\x05\x22\xab\x6d\xfb\xba\x8d\xec\xd7\xed\x66\x53\x3e\x35\xeb\xe0\x9a\x17\x28\xf9\x56\xe4\x68\x5c\xa3\xdd\x30\xb5\xed\x3f\x19\xfd\xef\x16\x61\x7a\x0d\x4b\x2e\x40\xad\x51\x23\xd1\xf5\x68\x40\x5d\xf8\x43\x0f\x9b\x19\xa9\xb0\x71\xe2\xb8\xb5\x42\x45\x0a\xa2\x48\x06\xcf\xb6\x4b\xd3\xf5\xc5\xef\xab\xe7\x62\xfd\x56\xc3\xcf\xcb\xb8\x35\x40\xfe\xd6\x20\xdf\xe8\x0c\x90\xd7\x3f\xca\xa8\x1a\xb8\x83\x1b\xed\x19\xcc\x50\x83\x03\xce\x6f\x23\x30\xfc\xa4\x7f\x5a\xdf\xb8\x44\xb6\x52\x6b\xf8\x1d\x7e\xce\xe0\x64\x86\x8f\x06\x5c\xdd\xe2\x6c\x30\xac\x36\xea\xe9\xc4\x57\xf0\xe2\xbf\x6a\xa7\x1a\x1b\x70\x61\xe2\x52\xdd\xb8\xf5\x97\x44\x7f\x63\x66\x62\xad\x25\x9a\x2d\x84\x30\x81\x25\x29\x25\x26\x3a\xc4\x28\xc2\x04\x9e\x53\x23\x6b\xc0\x82\x49\x8b\x9b\x0b\x6f\xed\x43\x53\x96\x0b\xac\x34\x2b\xd4\xfe\x33\xbd\x06\xc9\xad\xe7\x52\x05\x54\xb2\x8f\x0a\xb6\x12\x0b\x20\x2b\x42\x99\x2f\x9f\x9c\x74\x1f\x18\xf0\x13\x0c\x7e\x01\x22\x7d\x56\x4a\xa9\x8a\xf7\xe8\x5d\x87\xf5\x37\x98\xc0\xcf\xe1\x44\xb0\xa2\x29\xba\xed\xa4\x1c\x6b\x2f\xc1\x2e\xd2\x90\x4b\x33\x7b\xed\x06\xcd\xdc\x19\x87\x8a\x0b\xf4\xb8\xb7\x25\x5e\x50\x1c\xa8\xf2\x5d\x7c\xb9\x65\x46\xd5\x20\x72\x45\xba\x84\xf7\xee\xe2\x26\xdc\xd2\x5f\x7b\x25\xb6\x18\xf7\x69\xe6\xe8\x53\x7c\x72\x8a\xe0\x3b\xab\x37\xe3\x66\xac\x1a\xe4\x5b\xbe\x1b\x08\xcc\xe9\x86\x22\x53\x19\x7c\x78\x8e\xc2\x7a\x48\xdf\x2f\x23\x9f\x4e\x82\x20\x38\x02\x45\x51\xfc\xc8\x0d\xeb\x22\x97\xc1\xc9\x95\xdd\xa0\x7a\xf0\x66\xc9\x84\x66\x91\xf9\x9a\x4a\x3d\xac\x2e\x76\xc6\x1b\x37\x5a\x92\x41\xcf\x76\xba\x13\xb5\x97\x4d\x80\xd1\x72\xd8\xb7\x58\x7b\x04\xb5\x7b\xf6\xac\xc4\xab\xc4\xf7\x77\x78\xff\x03\xf7\xd1\x81\xce\x8b\x3e\x83\x11\x8b\x14\x36\x9b\x32\x8c\xc1\xec\xc2\x34\x6e\xf5\x51\xea\x20\xcc\xb7\x4c\xd3\x88\xce\x66\xd4\x1a\xa9\x00\x81\x4b\x14\xc8\xf2\xc0\xd1\x5b\xb1\x71\xad\x72\xa0\xb4\x1f\x66\x70\x7e\x9a\x9b\xbd\xad\x03\x6b\xe3\xfb\xe6\xcf\x28\x5e\xa0\xc3\xbf\xda\x69\xc5\x9b\x15\x58\x37\xd7\xff\xbe\x49\x5c\x83\x6d\xa1\xce\x0e\x2d\xf7\xdb\xf4\xb7\xfb\xae\x79\x1a\x46\xcb\x66\xf8\xc4\xc9\x6a\x5d\x67\x70\xb2\x92\x91\x07\xd6\xf0\xf8\xe8\xdd\xbb\xda\xa1\x5f\xdc\x7c\xf1\x66\xde\x3e\x7f\x36\xa4\x99\xd7\xcc\xb1\x28\x51\xfb\x0e\x61\x5d\x1f\x2f\xb1\x99\xdd\xcc\xe3\xda\x60\x3c\x9d\xdd\xcc\x5d\x3a\x68\x33\xad\x7b\x64\x1f\x25\x4c\xaf\xe3\x4c\xa5\x4b\x64\x43\xba\x7b\x45\x12\xe4\xb1\x58\xdc\xec\xb2\xda\xdb\x73\x24\xd3\xd7\x59\x79\x3f\x99\x84\x26\xe7\xf9\x2e\x82\x8d\xd4\x7d\x17\xe9\xf6\x73\x87\xe3\x01\x01\x51\xb8\x2d\x3f\x41\x4b\x0c\x1a\xf6\x7e\xd5\xc6\xc9\x69\x98\x1b\x38\xaa\x42\xef\xf4\x92\xab\x45\x4f\x32\x25\xea\x76\xd1\xd3\xae\xb1\xd2\xf1\x94\xa2\xe8\xe1\x60\x8b\x9d\x4e\x91\xda\x97\xd7\xa6\x52\x4d\x0f\x2f\xb8\x14\xb6\xae\x8a\x93\x00\xb3\xdb\xa2\xc2\xab\x86\xc5\xcf\x4e\x3c\xa5\xde\x5e\xd1\x9b\x55\x2c\x49\x8e\x16\x45\x3f\x34\xbb\x16\x9b\x20\x1f\x90\xe8\xa7\x68\x9f\xcd\x6e\xe6\xc3\x58\x6c\x85\x6a\x7a\x2d\x07\xc3\x0c\xee\xec\xd2\x7e\x8b\xfb\x2c\xb8\x10\xfc\x51\xb3\xb1\x53\x41\x66\xf0\x21\x65\xa2\x4f\xfa\x96\xef\x66\x4b\x15\x28\x70\x1d\x64\x76\x33\xbf\x08\x91\xd4\x49\xeb\xb2\x8e\x31\x72\x5b\x36\x39\x2a\xa3\xe5\xc8\x7c\xa5\x85\xae\xc1\x6c\xbb\xda\x0a\x86\x45\x5f\xb0\x39\x3b\x03\xb9\xe6\xdb\xb2\xd0\x89\x9d\x16\x90\x3a\x2b\x27\x36\x19\x24\x62\xb5\xb5\x79\x31\x37\xef\xcb\x2d\x33\x60\x07\x59\x0b\x97\x2a\x95\xb6\x0c\xea\xb1\xd5\x59\x04\xfc\xf5\x57\xf3\xe9\xc2\x6c\x83\x09\xd0\x62\x98\xa5\xa9\xbd\x49\x72\x2c\x46\x86\x4c\xdb\x09\x64\x86\x06\xa7\xd7\xfd\x53\xd4\x49\x10\x65\x39\x17\x02\x73\xd5\x5f\xc0\xb8\x7e\x96\xf0\xb4\xce\xb9\xb2\x94\xaf\x8d\x62\xc6\xfe\x22\xf8\x03\x2d\x50\x24\x9a\x6e\x31\x47\xfa\x90\x6c\x4a\x39\x71\x5c\x3a\xf2\x47\x86\x85\xae\xa8\x9b\x22\xff\xb7\x5f\x13\x31\x63\x76\x33\x8f\x0b\xc8\x68\x23\x9a\x2d\xd7\x2a\x84\xf3\x53\xaf\x7a\x4a\xa6\xca\x8f\xcd\xf9\x52\xf3\x30\xbd\x76\x1c\x36\xb9\xa9\x42\xab\x26\x88\x98\x53\xaf\xf3\xd3\x60\x08\x63\x81\x15\x7f\xc0\xc1\x3d\x3e\x65\xd0\x59\x18\xc2\xc5\x05\x6c\x08\xa3\xf9\xe0\xa4\xa2\xd2\xa4\x4e\xb3\x9b\xf9\x49\x3a\x8e\x7b\x47\x60\xc6\xd0\x98\x16\xcd\x21\x58\x6b\x4f\x5c\x8c\x89\x3d\xdf\x8a\xb4\x58\x47\x82\xf3\x53\x23\x7c\x00\x90\x57\xd1\xca\x5e\x08\xec\x03\x91\xef\xe1\x53\xb0\xdf\xc3\x81\xf9\xa1\x5d\xb3\x79\x3d\xbb\x54\x47\x5e\x16\xf3\x34\xca\x77\xb4\xf8\xd6\x1a\x4e\x42\xe8\x9e\x08\x6a\xec\x14\x7f\x1d\x72\x35\xe5\xb7\xb6\x0f\x60\x17\x73\x6b\x08\x54\xbd\x14\x81\x97\xdc\xe3\x93\x3c\xa0\xfa\x7b\x28\xb9\xc7\xe8\x87\x04\x6a\x44\x1e\x62\xf5\x3d\xa3\x79\x13\xc5\xd3\x65\x6a\xf5\xde\x1b\x2e\x4d\xb1\xad\xc9\xe0\x70\x09\x93\xbe\xf1\x93\xad\x5a\x1f\x9a\x44\x80\x84\xd6\xa7\xfd\x33\x1c\x6c\xc0\xa8\x80\xa5\x4c\x16\xae\xb5\x1a\x46\xcb\xd7\xd5\xe5\xbd\x99\x43\xe3\x5f\xfe\xcc\xf6\x67\x0c\x1a\x7f\x5b\x2f\xfd\x51\x6d\xd4\x53\xc7\xb2\x83\x24\x61\x75\xed\xae\xf1\x96\x12\x6a\x55\x5e\xea\xe6\xaa\x8c\xcb\x81\x25\xaa\x7c\xdd\xbe\xfd\x03\x15\x10\x27\x42\x29\x0e\x04\xac\x63\xd8\xeb\x04\xc2\x9a\x1a\xf1\xa3\x74\x42\xcf\x48\x3b\x02\x79\x20\xb4\x24\x8b\x12\xc7\xad\xbe\xe9\xd2\x91\x80\x82\xa3\x04\x1d\x2f\xcd\x41\x2b\xe9\x19\xe5\xc8\x72\xa9\xa7\x84\x6a\x19\x09\xa4\xad\x55\x38\x83\xc5\xd6\xd1\x98\x73\xa6\x48\x5d\xd0\x52\x85\xd5\xb4\x18\x39\xeb\x7a\x50\x17\x61\x85\x3d\x4c\x72\xbe\xd5\x2a\x65\x4a\x67\x80\x91\x16\x1d\xfb\x6b\x6a\x70\x1d\xfc\xc7\xbf\xdc\x18\x59\x3d\xd7\xaf\xdd\x61\x7a\xb7\x38\x23\x9a\x68\x4a\xfa\x6c\xc1\x1c\x68\xc5\xc1\x89\xc2\x78\x85\xea\x8a\x6c\xc8\x82\x96\x54\x3d\x0d\xd2\xf0\x76\x07\xfa\xa1\xb4\xa5\x81\xf3\x0f\x69\xb9\x67\xf7\x73\x22\xd1\x78\xf9\x7d\x10\x28\xec\xa2\xe2\x95\x4e\xdd\x74\xea\xb7\xf2\x26\x74\x32\x8c\x5c\xb8\x6b\x1c\x47\xac\x64\xb1\x0b\x7d\xd8\x4b\x86\xcc\xad\x44\x9c\x99\x74\x9b\xec\x92\xef\xde\x7e\x52\x6d\x6f\x18\x1e\x2f\xf9\xce\xd9\x6a\x9d\x46\xfd\xef\x28\x55\xd0\xf7\xd7\x6e\xe6\x3e\xe4\xce\xea\x6c\x0e\x7b\xce\x4f\xdf\xd7\x56\x5e\x45\xdb\xda\xbe\x7f\x89\x94\xc1\x87\xfa\x0e\xc2\x35\xdb\x73\x6a\x17\x8f\xa6\x1e\x86\xe5\xf0\x2c\xcc\x71\x2f\xed\x31\x9e\x3d\x82\xd5\xdb\x4f\x2f\x2b\xee\xa8\xdc\x93\xc1\x42\x54\x64\x36\x31\xac\xd7\xba\x8e\x64\x87\x11\xb0\x4b\x30\xc3\x47\xb3\xee\x86\x31\x5b\x0f\x48\x98\x6b\x4f\xa6\xea\xee\x87\x99\x79\x85\xea\x92\xef\x66\xa4\xc2\x08\x63\xeb\x24\x17\x09\x1a\xee\x9b\xd4\x85\xb9\x52\xe8\xb1\x44\x65\xdf\x9d\xa0\xbd\xa5\xf9\x3e\x43\xf6\x6c\xb5\x7f\x52\xb6\x7e\xb6\x47\x4a\xb7\x7c\x37\x65\x29\x2f\xb2\x0f\x87\x0c\xf7\x9e\x46\xc6\xb1\xe6\xf4\xc7\xfc\x5a\x7d\xce\x30\x4c\x09\x61\x2e\x9e\x89\xa1\x4a\xbf\x06\xfc\xf1\xb6\x8f\x8f\xde\xc5\x45\x8b\x89\xfb\xc9\x6b\x57\x98\xc0\x99\xb4\xaf\x67\x1e\x77\xf6\x0a\x77\x34\xad\x65\x37\xe6\x6d\xaf\x68\x78\x21\x1b\x98\x34\xcd\xee\x1e\xb2\xc7\x2e\xde\xd9\xd1\xcf\x41\xab\x7b\x51\xf4\x4b\xd0\x66\xfc\x2d\xac\xc9\x52\x07\xa4\x97\xed\xbd\x57\x6f\x5c\x3b\x3f\xf5\x3c\xaa\x27\x1d\x0a\xcc\xd4\x49\xc5\x58\x92\x07\x1c\x9c\x9f\xe6\x4e\xfe\xa0\xeb\x81\x74\x10\x73\xf0\xe9\xd3\x57\x52\x76\xdf\x1b\x03\x0f\x56\xc5\x23\x38\x1c\x26\x0f\xc5\xe5\x11\x28\x22\x56\xa8\x5e\x37\x09\x1f\x55\x62\xe8\xaf\x8b\x4e\x11\xd3\xa5\xb0\x33\x42\x4e\x19\x15\xba\x92\x67\xc5\x54\x60\x3d\xff\xdd\xe3\xdd\xcb\xf1\x91\x76\x87\xe3\x23\xf8\x7f\x00\x00\x00\xff\xff\x81\x78\x94\xb7\x95\x22\x00\x00"

func roxcontractCdcBytes() ([]byte, error) {
	return bindataRead(
		_roxcontractCdc,
		"RoxContract.cdc",
	)
}

func roxcontractCdc() (*asset, error) {
	bytes, err := roxcontractCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "RoxContract.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf7, 0x19, 0x48, 0xdb, 0x47, 0x62, 0x1b, 0x49, 0x65, 0x65, 0x74, 0xdc, 0x71, 0x42, 0x2e, 0xdf, 0x6b, 0x97, 0xd3, 0xb1, 0xa4, 0x74, 0x27, 0xce, 0x31, 0x69, 0x22, 0xa6, 0x95, 0xe, 0xb, 0xbe}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"NonFungibleToken.cdc": nonfungibletokenCdc,
	"RoxContract.cdc":      roxcontractCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"NonFungibleToken.cdc": {nonfungibletokenCdc, map[string]*bintree{}},
	"RoxContract.cdc": {roxcontractCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
