// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../contracts/NonFungibleToken.cdc (4.968kB)
// ../../../contracts/RoxContract.cdc (8.862kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _nonfungibletokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x41\x8f\xdb\xb8\x0e\x3e\x37\x40\xfe\x03\xdb\x02\xaf\x33\x45\x26\x79\x87\x87\x77\x08\x50\xbc\xbe\xed\x34\x40\x2e\xb3\xc5\x6c\x16\x7b\x28\x0a\x44\xb1\xe8\x44\xa8\x2c\xb9\x92\x9c\x34\x5b\xcc\x7f\x5f\x90\x92\x65\x3b\xc9\xcc\x4e\x4f\xbb\x87\xed\xc4\x96\xc8\x8f\x1f\xc9\x8f\xf4\xec\xed\xdb\xf1\x68\x3c\x7a\xfd\x1a\x56\x3b\x84\x85\xb6\x07\xb8\xb3\xe6\x66\xd1\x98\xad\xda\x68\x84\x95\xfd\x8a\x06\x7c\x10\x46\x0a\x27\xd3\xd1\xf5\x9d\x35\xed\x09\x3e\xb0\x86\xc2\x9a\xe0\x44\x11\x40\x99\x80\xae\x14\x05\xd2\x59\xb2\x99\x1f\x40\xd8\x89\x00\x42\x6b\x30\xd6\xdc\x94\xad\x87\xc0\x1e\xda\xfb\x1e\x0a\xdb\x68\x49\xbf\x4b\xeb\x2a\x08\x76\x3a\x1e\x2d\x4b\x10\xd0\x78\x74\x70\x10\x26\x78\x08\x16\x24\xd6\xda\x1e\x41\x80\xc1\x03\x98\x32\x64\x03\x13\x08\x3b\x54\xae\x03\x74\x60\x7b\x06\x51\x8e\x47\xc1\x82\xaa\x6a\x8d\x15\x9a\x40\xe7\xe0\x34\x90\x0e\xed\x34\xe1\x3f\x37\xb5\x13\x7b\x42\x0d\xa5\xd5\x44\x17\x05\x44\xa6\x5c\xa3\xd1\x83\x30\x12\x8c\xa8\x94\xd9\x8e\x47\x1c\x6f\x18\x50\xe0\x6b\x2c\x54\xa9\xd0\x4f\x33\x95\x8b\xd5\x1a\x1c\x7a\xdb\xb8\x8e\xb3\xc2\x3a\xcc\x0f\x21\x1c\xeb\x44\x9e\xc3\xda\xa1\x47\xe2\x40\x18\xb8\x5b\xac\x40\x19\xf6\xe0\x2b\xe1\x3a\x0e\xb2\xf1\x0f\x56\x6b\x2c\x82\xb2\x66\x0d\xf7\x27\x3e\x3a\xf3\x64\xd9\x07\xeb\x08\x3e\xd3\xfc\xc6\xb3\xed\x22\xdf\xa6\x1c\x50\x6a\x0b\xdd\x48\x3e\x55\xe2\x01\xca\xc6\xf0\x4b\xce\x87\x60\x2e\x08\x8a\x3d\x18\x74\xf4\x08\x85\x57\xfa\x38\x1e\x55\x76\x9f\xb2\xec\x09\x2e\x31\x64\x9b\x00\xb6\xe4\xe3\x03\x27\x11\xf5\x27\x67\xf7\x4a\xa2\x5b\xf3\xd9\xf5\x3d\x16\xa8\xf6\xf4\x33\x43\xce\x84\xfa\x14\x8d\xef\x3f\x03\x89\x85\x16\x0e\x7b\x08\x0f\x2a\xec\xc0\xdb\x0a\xa1\x76\xc8\x66\x6b\xeb\x99\x30\xa9\xf8\x44\xca\x96\xc3\x6f\x8d\x72\xc8\xc8\x3a\xf2\x7a\xd9\x2e\xd0\x05\xa1\x4c\xca\x31\x5b\xda\xe0\x4e\xec\x95\x75\xb9\x4b\x7c\x5b\x3b\x47\x20\x14\x1e\x6b\xe1\x44\x40\xd8\x60\x21\x1a\x42\x1a\x60\xab\xf6\xe8\xd9\x0b\x97\x35\xfd\x21\x36\x4a\xab\x70\x24\x5f\x7e\x47\xf7\x04\x38\x2c\xd1\xa1\xa1\x9c\x05\x9b\xea\xba\x8f\x8a\x10\x5b\xa3\x8f\x80\xdf\x6b\xeb\x93\xc1\x52\xa1\x96\xb1\x10\xbb\xf8\x95\x01\x6b\x10\xac\x83\xca\x3a\x1c\x8f\x12\xf9\x1d\x67\x53\x58\x52\x6f\x7a\x9b\xa0\x11\x2c\x7f\x8a\xab\x12\x5f\x11\x8a\xc6\x07\x5b\xe5\x5c\xb4\xcc\x0d\xfa\x6a\x98\x0e\x6a\x57\x0b\x7b\xe1\x94\x6d\xc8\xa6\x32\xdb\x94\x11\xb2\x1f\x2b\x83\x29\xfb\xe5\x08\x8d\x27\x5a\xb3\x71\x0e\xa3\x33\x35\x49\xb8\x6c\xc9\x05\x3a\xac\x7a\x0f\x85\x30\xe0\xd1\xc8\xf1\x88\xae\xb9\x58\x37\x6d\xe9\xd5\x88\xee\x26\xd8\x1b\xfa\x77\xc2\xee\xa9\x0a\x29\x75\x66\x4b\x10\xd9\x0b\x77\x39\x21\x13\x50\x20\x99\xd5\xa0\x51\x6e\xd1\x8d\x47\x17\x5a\x6c\x65\xd9\x5d\xdb\x8b\xd4\x06\xc6\x86\x1d\x3a\x86\x39\xc9\xa2\xc5\xb2\xe1\x89\xa1\x23\x5b\x97\x4e\xc4\x5e\xb9\x5b\xac\xc6\xa3\xd2\xd9\xea\x2c\xb9\x2c\x63\x06\x8a\x56\x5d\x24\xd6\xd6\xab\x90\x53\x0a\xd6\x0c\x9c\xbd\xf1\xe3\xd1\xb0\x60\x0b\x4b\x19\x09\xb1\x96\x83\x13\xc6\x97\xe8\x18\xf6\xdb\x19\xfd\x7f\x36\x63\xc9\xaf\xa8\x9a\x63\xb7\x9f\x2a\xf8\x14\x7e\x65\xfb\xfd\xb7\x94\x38\xad\xf9\xb6\xaa\x6a\xeb\x42\xcc\x50\x2f\xf9\xca\xf7\x67\xc0\x6c\x36\x1e\xd5\xcd\xe6\x82\xf5\x73\xed\xfd\x41\xb0\x00\x00\x12\xb4\x60\x83\xd0\x60\x9a\x6a\x83\x8e\xe5\x22\x26\x92\x6b\x57\xf9\x28\x8b\xca\x00\x7e\x57\x3e\xc4\x2e\xa1\xcb\xe4\x6d\x2f\x5c\xbc\xfd\x5b\x53\xd7\xfa\x38\x87\xdf\x97\x26\xfc\xf7\x3f\x3d\xfb\x1f\xf7\x11\xad\x08\x80\x95\x0a\x01\x25\x1c\x88\xf0\x94\x95\x1e\x5e\x0a\x47\x05\x25\xb4\xfa\x93\x46\x48\xbc\xdf\xb9\x42\x36\xf4\x21\x1d\x5f\x76\x47\xaf\xae\x2f\xbb\x53\x7e\xe8\x51\xa4\x09\xa8\x7c\xae\x0d\x33\xc9\x17\x95\x91\xaa\x10\x81\x6b\x34\x8b\xeb\x99\x74\x26\xcb\x01\x0e\xa2\x67\x05\xa8\xb2\xa6\x43\xc8\xb3\x19\x2c\xcf\x6e\x2b\x0f\xc6\x86\x28\xce\x20\x8a\xc2\x36\x26\xbc\xf1\x3c\x13\xc4\x16\x27\xb0\x26\x43\x6b\xce\x3c\x6c\x10\xd6\x46\xe9\xf5\xf4\x31\x2a\xfe\x48\xee\xaf\x94\x6c\x79\x9f\x30\x92\x39\xfc\x5f\x4a\x87\xde\xff\xef\x11\x66\x1e\xa3\x25\xd5\x3e\x4a\xee\xb0\xe1\xc4\x38\x8d\x2d\xb4\x8c\x25\x35\x7c\x0e\x61\x7d\xfb\x8f\x86\x75\x1b\x0f\x0d\xa2\x0a\xf6\x72\x4c\xcb\xe1\xca\x93\x6a\xca\xe7\xcd\xa1\x5b\x6e\xce\xbd\x9d\xcf\x38\x58\x52\x41\xfe\x88\x47\x7a\xed\xd1\x18\xf5\xad\x41\x58\xde\x26\xf6\x44\xb1\xe3\xd2\xdd\x09\xdf\x9d\x25\x93\x1a\x03\x74\xb0\xe3\xbb\x87\x1e\xdc\xfb\x38\xf4\xaa\x9c\x08\x12\x9d\x84\x91\x0a\xef\x92\xd4\x52\x28\xd9\x00\xef\x63\xa5\x32\x71\x66\x25\xfc\x24\x5d\x28\xa3\x30\x92\xd1\x64\x90\xc7\xc1\x92\x85\xef\x2c\xe4\xbb\xc5\x6a\x7e\x16\xed\x73\x22\xe8\x11\x6e\xa1\x42\xa9\x68\xdc\xb6\x7d\xe0\xa1\x55\xd8\x9e\xbe\x3e\x8b\xf8\x76\x11\x39\x21\x3f\x4b\xb8\x43\xda\x6d\xf2\x2e\x96\xdd\xf4\xea\x8c\xd4\x31\x1e\x52\x01\xe2\x10\x8f\xcc\xb8\x61\x84\x65\x63\xb2\xdd\xab\xf6\x8f\xe5\x6d\x1b\xf2\xf5\x1c\xde\x9f\xf0\xc2\x37\x69\x89\x39\x79\x46\xff\x39\xf4\x8d\x0e\x53\x25\xe1\xdd\x3b\xe8\x5b\x7b\x45\x85\xb3\xbc\x6d\x1b\xa2\x93\x8a\xd8\x6c\x55\xe3\x03\x75\x38\xaf\x94\xa2\x42\x10\xb1\x8b\x68\x2d\x42\x4f\x1d\xb2\xbc\x7d\x35\x74\xf7\xd0\xfd\x7c\x78\x66\x62\x52\xbf\xf9\x96\x8f\x9f\xcc\x4a\xbb\x0f\x76\xf3\x22\x39\x6b\x67\x64\x10\x5f\xbb\xa4\x08\xfe\x4b\xb8\x6d\xc3\xf5\x4d\xf9\x10\x52\xf6\xd3\x71\xea\xbe\x85\xf0\xe2\x45\x9b\x98\x64\xf8\x8a\x49\x8a\x99\xb8\x7e\x32\x56\x6e\xa2\x2c\xa5\x69\x01\x28\x6c\x55\xf1\xb6\x96\x6f\xd4\xcd\x46\x2b\xbf\x83\xd2\xba\xfc\xd5\x32\xc4\xf2\x08\x05\x1d\xe4\x4f\x64\xa2\x38\xed\x97\xa7\x41\xf7\x4f\x6d\x31\x2c\x6f\xfd\xd5\xf5\x1c\x3e\xc7\x4a\xfb\x72\x7e\x66\x63\x9d\xb3\x87\xbb\xc5\xaa\x27\x7e\xd7\x73\xf8\x57\x6e\xe2\xc7\xc4\x24\xc5\x95\x7a\xc2\x14\x8e\xd6\x91\xc1\x67\x4d\x5f\x42\x36\xd8\x2e\xee\xb2\xfd\xac\xc9\x7b\x05\xc9\x50\x2b\x3e\x4f\x14\x49\xc7\xcb\x3c\x37\xef\x24\x17\xcc\xe4\x22\x6f\x83\x12\xba\x55\xfc\x56\x38\xde\x77\x77\x56\xcb\x4e\xbd\x13\xa6\x4b\xe5\xd2\xee\x1c\x34\x6d\x24\x1d\x9e\xc3\xfb\x1f\x91\xa8\x39\x5d\x7e\x38\x71\xf3\xcf\x29\xc8\xd3\x2d\x13\x3b\xe6\xbc\x45\x3a\x38\x1e\x64\xa6\x68\x60\x29\xdf\x0a\x51\x61\xd2\x4d\x25\x41\x38\x27\x8e\xcf\xad\xcf\x81\xcd\x58\x9c\xe0\x30\x34\xce\xa4\x3e\x76\xe2\xd8\xaa\x17\xbd\x8b\xad\xe6\xb0\xcd\xce\x69\x03\xfd\x5d\xad\x0f\xfc\xdd\xb7\x8e\x52\xc9\xa3\xec\x3e\xc1\xe2\x76\xdf\xff\xe6\xbe\xe4\x6a\x36\x03\x6f\xbb\xa9\x1f\xf3\xc4\xdf\x25\x0e\x85\x04\x29\x82\x60\xa6\x78\xaf\xaf\x30\xec\xac\x4c\xe3\x49\x85\x9f\x6a\xbc\xb3\x49\xe0\xf0\xd2\x20\xf0\xa8\xcb\x69\xae\xca\xcf\x4a\x7e\x81\x97\xef\xc0\x28\x3d\x87\x57\x64\x45\x5a\x8c\xbb\x1f\x2f\xd1\xe7\x91\xbd\xfc\x29\xb5\x2f\x1c\x8a\x80\x1f\xab\x3a\x1c\x7b\xdf\x22\xf1\x29\xa7\x0f\xe9\xd5\x05\xbd\x87\xf8\xbd\x16\xd9\x3f\x2d\xf3\x3e\xa3\x47\xe6\xd2\x1e\x38\x11\xbe\x53\x00\x62\xeb\xa2\x77\xca\xf6\xfb\x1e\x98\xbe\x50\x5e\x18\x9e\x69\x70\xb6\x95\x32\xd5\x68\xb6\x61\x47\x53\xf4\xdf\x69\x78\x46\x2f\xb2\xdf\xa1\xed\xd4\xe4\xe8\xfa\x8c\x75\x14\x3d\xfc\x15\x00\x00\xff\xff\xd5\xbe\x00\xcf\x68\x13\x00\x00"

func nonfungibletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_nonfungibletokenCdc,
		"NonFungibleToken.cdc",
	)
}

func nonfungibletokenCdc() (*asset, error) {
	bytes, err := nonfungibletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "NonFungibleToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdb, 0xf, 0xd7, 0xfa, 0xf8, 0x7, 0xd8, 0xf7, 0xa, 0xb6, 0x12, 0xce, 0x79, 0x51, 0x18, 0xed, 0xc5, 0x9e, 0x39, 0xb8, 0xfc, 0x2c, 0x47, 0x69, 0x56, 0xfc, 0x55, 0x77, 0xfb, 0x35, 0xcf, 0x74}}
	return a, nil
}

var _roxcontractCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x5a\x5f\x4f\x23\x39\x12\x7f\x1e\x24\xbe\x43\xc1\x03\x93\x68\x43\x98\xbd\x5b\xed\x43\x8b\x2c\x3b\xc0\x72\x8a\x74\x17\x8d\x98\xac\xee\x01\x8d\x4e\x4e\x77\x25\xb1\xe8\xb6\x73\xb6\x03\xe1\x58\xbe\xfb\xc9\x76\xff\xf1\xbf\x26\x0c\x9a\x3c\x0c\xdd\x6d\x57\x95\xfd\x73\xf9\x57\x55\xf6\xd0\x6a\xc3\x85\x82\x19\x67\x37\x5b\xb6\xa2\x8b\x12\xe7\xfc\x1e\x19\x2c\x05\xaf\xe0\x38\xfc\x3c\xce\x8b\xfc\xf8\xf0\xe0\xf0\x60\xb3\x5d\x40\xce\x99\x12\x24\x57\x70\xcb\x77\x57\xf5\x73\x16\x6b\x7a\xd6\xfd\x01\x00\xce\xce\xe0\x8f\x07\x64\x4a\xda\x57\xad\x02\xf5\x3b\x34\xc2\x53\x46\x15\x25\x25\xfd\x1f\x16\x83\x61\x23\xd5\x75\xfb\x37\x55\xeb\x42\x90\xc7\x01\x2d\x32\xf8\x73\xca\xd4\xaf\xbf\x8c\xcc\x38\x33\xf8\x5c\x14\x02\xa5\xbc\x18\x86\x32\xd7\xb8\xe1\x92\x2a\x4f\x44\xf1\x57\x04\xfe\x45\x99\xc2\xc2\xeb\x2f\xf8\x6e\x5a\x64\xf0\x55\x09\xca\x56\x89\x71\x5d\xf2\xdd\x95\x40\xa2\xc5\x16\xb6\xab\x96\xfc\xfb\xdf\x86\xdd\xb4\x2b\xaa\x14\x16\xf0\xb8\x46\x06\x44\x0b\x00\x95\x50\xf2\xfc\x1e\x8b\x11\x54\x48\x18\x65\x2b\x0d\x23\xcc\x96\x4a\x42\x4e\x18\xe3\x0a\x16\x08\xa4\x28\xb0\x48\xd8\xfb\xa7\x11\x4d\x9a\xeb\xfa\xdd\xf2\xdd\x35\x4a\x25\xf8\x93\x37\xa1\xa1\xb3\x1e\x33\x52\x61\x01\x5f\x88\x5a\x3b\x8b\x52\xa2\x5e\x92\xb2\xc4\x5c\x51\xce\xbe\x2a\x2e\xc8\x0a\x75\x1f\x8d\x41\xfb\xd2\xd7\xff\xcb\x76\x51\xd2\xdc\x76\xef\x9e\xfd\xde\x9f\x8b\x8a\xbe\xa2\xd8\x76\x26\x79\x8e\x52\x0e\x24\x96\xcb\x21\x3c\x10\x01\x0b\xbe\x43\x99\xc1\xef\xcf\x76\xbe\x99\x06\xe2\xa5\xa7\x2f\xdb\x56\x0b\x14\x76\x31\xbf\xa0\xb8\xe4\xbb\x0c\x5a\x39\xfb\xf7\xc5\x5d\x49\x23\x83\x3b\x75\xe9\x22\xea\x00\x35\x5f\x23\x28\xae\x48\x59\x6b\x06\xbe\xb4\xeb\x75\x33\x97\xa0\xd6\x44\xc1\x9a\x3c\x20\x2c\x10\x19\x54\xc6\xaa\xaf\xdb\xc8\x7e\xdd\x6e\x36\xe5\x53\xb3\x0e\xae\x79\x81\x92\x6f\x45\x8e\xc6\x35\xda\x0d\x53\xdb\xfe\x93\xd1\xff\x6e\x11\xa6\xd7\xb0\xe4\x02\xd4\x1a\x35\x12\x5d\x8f\x06\xd4\x85\x3f\xf4\xb0\x99\x91\x0a\x1b\x27\x8e\x5b\x2b\x54\xa4\x20\x8a\x64\xf0\x6c\xbb\x34\x5d\x5f\xfc\xbe\x7a\x2e\xd6\x6f\x35\xfc\xbc\x8c\x5b\x03\xe4\x6f\x0d\xf2\x8d\xce\x00\x79\xfd\xa3\x8c\xaa\x81\x3b\xb8\xd1\x2b\x83\x19\x6a\x70\xc0\xf9\x6d\x04\x86\x9f\xf4\x4f\xeb\x1b\x97\xc8\x56\x6a\x0d\xbf\xc1\xa7\x0c\x8e\x67\xf8\x68\xc0\xd5\x2d\xce\x06\xc3\x6a\xa3\x9e\x8e\x7d\x05\x2f\xfe\xab\x76\xaa\xb1\x01\x17\x26\x2e\xd5\x8d\x5b\x7f\x49\xf4\x37\x66\x26\xd6\x5a\xa2\xd9\x42\x08\x13\x58\x92\x52\x62\x4a\x3e\x42\x11\x26\xf0\x9c\x1a\x59\x03\x16\x4c\x5a\xdc\x5c\x78\x6b\x1f\x9a\xb2\x5c\x60\xa5\x59\xa1\xf6\x9f\xe9\x35\x48\x6e\x3d\x97\x2a\xa0\x92\x7d\x54\xb0\x95\x58\x00\x59\x11\xca\x7c\xf9\xe4\xa4\xfb\xc0\x80\x9f\x60\xf0\x33\x10\xe9\xb3\x52\x52\x55\xb4\x47\xef\x3a\xac\xbf\xc1\x04\x3e\x85\x13\xc1\x8a\xa6\xe8\xb6\x93\x72\xac\xbd\x04\xbb\x48\x43\x2e\xcd\xec\xb5\x1b\x34\x73\x67\x1c\x2a\x2e\xd0\xe3\xde\x96\x78\x41\x71\xa0\xca\x77\xf1\xe5\x96\x19\x55\x83\xc8\x15\xe9\x12\x8e\xdc\xc5\x4d\xb8\xa5\xbf\xf6\x4a\x6c\x31\xee\xd3\xcc\xd1\xa7\xf8\xe4\x14\xc1\x77\x56\x6f\xc6\xcd\x58\x35\x19\xdd\xf2\xdd\x40\x60\x4e\x37\x14\x99\xca\xe0\xe4\x39\x0a\xeb\x21\x7d\xbf\x8c\x7c\x3a\x09\x82\xe0\x08\x14\x45\xf1\x23\x37\xac\x8b\x5c\x06\xc7\x57\x76\x83\xea\xc1\x9b\x25\x13\x9a\x45\xe6\x6b\x2a\xf5\xb0\xba\xd8\x19\x6f\x5c\xff\x83\xe6\x23\xcb\xc6\x33\xcb\xda\x93\xbe\xdd\x75\x67\xe6\xf7\x2d\x5a\xd1\x81\x2f\x3e\x01\x46\xcb\x61\x62\xfc\x81\x95\x4f\xfb\x19\xa5\x77\x0c\x7a\x23\x3b\xda\x8e\x7e\xe0\x86\xda\xd3\xd9\xf6\x4b\x18\x8c\xe8\xa4\xb0\x69\x95\xa1\x0e\x66\x57\xa8\xf1\xaf\x8f\x52\x47\x63\xbe\x65\x9a\x4f\x74\x5a\xa3\xd6\x48\x05\x08\x5c\xa2\x40\x96\x07\x1e\xdf\x8a\x8d\x6b\x95\x03\xa5\x1d\x32\x83\xf3\xd3\xdc\x6c\x72\x1d\x61\x9b\x4d\x60\xfe\x8c\x62\xf0\xf7\xff\x6a\xef\x15\xef\x56\x60\xfd\x5d\xff\xfb\x2e\x71\xbd\xa0\x76\x39\xb3\x3d\xab\x7f\xf4\x3e\xfd\xed\x06\x6c\x9e\x86\xd1\xb2\x19\x62\x71\xd2\x5b\xd7\x19\x9c\xf4\x64\xe4\x81\x35\x3c\x3c\xf8\xf0\xa1\x76\xdf\x17\x37\x71\xbc\x99\xb7\xcf\x9f\x0d\x7b\xe6\x35\x85\x2c\x4a\xd4\xbe\x43\x58\xd7\xc7\xcb\x70\x66\x37\xf3\xb8\x48\x18\x4f\x67\x37\x73\x97\x17\xda\x94\xeb\x1e\xd9\x47\x09\xd3\xeb\x38\x65\xe9\x32\xda\x90\xf7\xde\x90\x0d\x79\x74\x16\x37\xbb\xf4\xf6\xfe\x64\xc9\xf4\x75\x56\xde\xcf\x2a\xa1\x49\x7e\xbe\x8b\x69\x23\x75\xdf\xc5\xbe\xfd\xdc\xe1\x78\x40\x40\x14\x6e\xcb\x4f\xd0\x12\x83\x86\xbd\x5f\xb5\x71\x72\x1a\x26\x09\x8e\xaa\xd0\x3b\xbd\x2c\x6b\xd1\x93\x55\x89\xba\x5d\xf4\xb4\x6b\xac\x74\x60\xa5\x28\x52\x99\x52\x8b\x5d\x4d\xb1\xf6\xe5\xad\x39\x55\xd3\xc3\x8b\x32\x85\x2d\xb0\xe2\x6c\xc0\xec\xb6\xa8\x02\xab\x61\xf1\xd3\x14\x4f\xa9\xb7\x57\xf4\x66\x15\x4b\x92\xa3\x45\xd1\x8f\xd1\xae\xc5\x26\xda\x07\x24\xfa\x7b\xb4\xcf\x66\x37\xf3\x61\x2c\xb6\x42\x35\xbd\x96\x83\x61\x06\x77\x76\x69\xbf\xc5\x7d\x16\x5c\x08\xfe\xa8\xd9\xd8\x29\x25\x33\x38\x49\x99\xe8\x93\xbe\xe5\xbb\xd9\x52\x05\x0a\x5c\x07\x99\xdd\xcc\x2f\x42\x24\x75\xf6\xba\xac\x63\x8c\xdc\x96\x4d\xb2\xca\x68\x39\x32\x5f\x69\xa1\x8b\x31\xdb\xae\xb6\x82\x61\xd1\x17\x6c\xce\xce\x40\xae\xf9\xb6\x2c\x74\x86\xa7\x05\xa4\x4e\xcf\x89\xcd\x0a\x89\x58\x6d\x6d\x82\xcc\xcd\xfb\x72\xcb\x0c\xd8\x41\xfa\xc2\xa5\x4a\xe5\x2f\x83\x7a\x6c\x75\x86\x00\x7f\xfd\xd5\x7c\xba\x30\xdb\x60\x02\xb4\x18\x66\x69\x6a\x6f\xb2\x1d\x8b\x91\x21\xd3\x76\x02\x99\xa1\xc1\xe9\x75\xff\x14\x75\x36\x44\x59\xce\x85\xc0\x5c\xf5\x57\x32\xae\x9f\x25\x3c\xad\x73\xae\x2c\xe5\x6b\xa3\x98\xb1\xbf\x08\xfe\x40\x0b\x14\x89\xa6\x5b\xcc\x91\x3e\x24\x9b\x52\x4e\x1c\xd7\x90\xfc\x91\x61\xa1\x4b\xeb\xa6\xda\xff\xf5\x97\x44\xcc\x98\xdd\xcc\xe3\x4a\x32\xda\x88\x66\xcb\xb5\x0a\xe1\xfc\xd4\x2b\xa3\x92\x39\xf3\x63\x73\xd0\xd4\x3c\x4c\xaf\x1d\x87\x4d\x6e\xaa\xd0\xaa\x09\x22\xe6\xf8\xeb\xfc\x34\x18\xc2\x58\x60\xc5\x1f\x70\x70\x8f\x4f\x19\x74\x16\x86\x70\x71\x01\x1b\xc2\x68\x3e\x38\xae\xa8\x34\xa9\xd3\xec\x66\x7e\x9c\x8e\xe3\xde\x59\x98\x31\x34\xa6\x45\x73\x1a\xd6\xda\x13\x17\x63\x62\x0f\xba\x22\x2d\xd6\x91\xe0\xfc\xd4\x08\xef\x01\xe4\x4d\xb4\xf2\x2a\x04\xf6\x81\xc8\x23\xf8\x3d\xd8\xef\xe1\xc0\xfc\xd0\xae\xd9\xbc\x9e\x5d\xaa\x23\x2f\x8b\x79\x1a\xe5\x3b\x5a\x7c\x6b\x0d\x27\x21\x74\x8f\x06\x35\x76\x8a\xbf\x0d\xb9\x9a\xf2\x5b\xdb\x7b\xb0\x8b\xb9\x35\x04\xaa\x5e\x8a\xc0\x4b\xee\xf1\x49\xee\x51\xfd\x3d\x94\xdc\x63\xf4\x24\x81\x1a\x91\xfb\x58\xfd\x95\xd1\xbc\x8b\xe2\xe9\x32\xb5\x7a\x47\x86\x4b\x53\x6c\x6b\x32\x38\x5c\xc2\xa4\x6f\xfc\x64\xab\xd6\xfb\x26\x11\x20\xa1\xf5\x69\xff\x0c\x07\x1b\x30\x2a\x60\x29\x93\x15\x6c\xad\x86\xd1\xf2\x6d\x05\x7a\x6f\xe6\xd0\xf8\x97\x3f\xb3\xd7\x33\x06\x8d\xbf\xad\x97\xfe\xa8\x36\xea\xa9\x63\xd9\x41\x92\xb0\xba\x76\xd7\x78\x4b\x09\xb5\x2a\x2f\x75\x73\x55\xc6\xe5\xc0\x12\x55\xbe\x6e\xdf\xfe\x81\x0a\x88\x13\xa1\x14\x07\x02\xd6\x31\xec\xbd\x02\x61\x4d\x8d\xf8\x51\x3a\xa1\x67\xa4\x1d\x81\x3c\x10\x5a\x92\x45\x89\xe3\x56\xdf\x74\xe9\x48\x40\xc1\x51\x82\x8e\x97\xe6\xc4\x95\xf4\x8c\x72\x64\xb9\xd4\x53\x42\xb5\x8c\x04\xd2\xd6\x2a\x9c\xc1\x62\xeb\x68\xcc\x39\x53\xa4\x2e\x68\xa9\xc2\x6a\x5a\x8c\x9c\x75\xdd\xab\x8b\xb0\xc2\x9e\x2a\x39\xdf\x6a\x95\x32\xa5\x33\xc0\x48\x8b\x8e\xfd\x35\x35\xb8\x0e\xfe\xe3\xdf\x72\x8c\xac\x9e\xeb\xb7\xee\x30\xbd\x5b\x9c\x11\x4d\x34\x25\x7d\xb6\x60\x0e\xb4\xe2\xe0\x44\x61\xbc\x42\x75\x45\x36\x64\x41\x4b\xaa\x9e\x06\x69\x78\xbb\x93\xfd\x50\xda\xd2\xc0\xf9\x49\x5a\xee\xd9\xfd\x9c\x48\x34\x5e\x7e\x1b\x04\x0a\xbb\xa8\x78\xa5\x53\x37\x9d\xfa\xad\xbc\x09\x1d\x0f\x23\x17\xee\x1a\xc7\x11\x2b\x59\xec\x42\x1f\xf6\x92\x21\x73\x3d\x11\x67\x26\xdd\x26\xbb\xe4\xbb\xf7\x1f\x59\xdb\xab\x86\xc7\x4b\xbe\x73\xb6\x5a\xa7\x51\xff\x3b\x4a\x15\xf4\xfd\xb5\x9b\xb9\x18\xb9\xb3\x3a\x9b\xc3\x9e\xf3\xd3\xa3\xda\xca\x9b\x68\x5b\xdb\xf7\x6f\x93\x32\x38\xa9\x2f\x23\x5c\xb3\x3d\xc7\x77\xf1\x68\xea\x61\x58\x0e\xcf\xc2\x1c\xf7\xd2\x9e\xe7\xd9\xb3\x58\xbd\xfd\xf4\xb2\xe2\x8e\xca\x57\x32\x58\x88\x8a\xcc\x26\x86\xf5\x5a\xd7\x91\x6c\x3f\x02\x76\x09\x66\xf8\x68\xd6\xdd\x30\x66\xeb\x01\x09\x73\xed\xc9\x54\xdd\x7d\x3f\x33\xaf\x50\x5d\xf2\xdd\x8c\x54\x18\x61\x6c\x9d\xe4\x22\x41\xc3\x7d\x93\xba\x30\x77\x0b\x3d\x96\xa8\xec\xbb\x1c\xb4\xd7\x35\xdf\x67\xc8\x1e\xb2\xf6\x4f\x6a\xe6\x1c\x62\xdd\xf2\xdd\x94\xa5\xbc\xc8\x3e\xec\x33\xdc\x7b\x1a\x19\xc7\x9a\xd3\x1f\xf3\x6b\xf5\x39\xc3\x30\x25\x84\xb9\x81\x26\x86\x2a\xfd\x1a\xf0\xc7\xdb\x3e\x3c\xf8\x10\x17\x2d\x26\xee\x27\xef\x5f\x61\x02\x67\xd2\xbe\x9e\x79\xdc\xd9\x2b\xdc\xd1\xb4\x96\xdd\x98\xb7\x57\x45\xc3\x9b\xd9\xc0\xa4\x69\x76\xf7\x90\x3d\x76\xf1\xce\x8e\x3e\x05\xad\xee\x8d\xd1\xcf\x41\x9b\xf1\xb7\xb0\x26\x4b\x1d\x90\x5e\xb6\x17\x60\xbd\x71\xed\xfc\xd4\xf3\xa8\x9e\x74\x28\x30\x53\x27\x15\x63\x49\x1e\x70\x70\x7e\x9a\x3b\xf9\x83\xae\x07\xd2\x41\xcc\xc1\xa7\x4f\x5f\x49\xd9\x7d\x6f\x0c\xdc\x5b\x15\x8f\x60\x7f\x98\xdc\x17\x97\x47\xa0\x88\x58\xa1\x7a\xdb\x24\x7c\x54\x89\xa1\xbf\x2e\x3a\x45\x4c\x97\xc2\xce\x08\x39\x65\x54\xe8\x4a\x9e\x15\x53\x81\xf5\xfc\xbf\x8f\x0f\x2f\x87\x07\xda\x1d\x0e\x0f\xe0\xff\x01\x00\x00\xff\xff\x8e\x7c\x97\xd9\x9e\x22\x00\x00"

func roxcontractCdcBytes() ([]byte, error) {
	return bindataRead(
		_roxcontractCdc,
		"RoxContract.cdc",
	)
}

func roxcontractCdc() (*asset, error) {
	bytes, err := roxcontractCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "RoxContract.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe6, 0x7, 0x12, 0x86, 0x77, 0x84, 0xf8, 0x17, 0xbf, 0x9d, 0x2b, 0x16, 0x5e, 0x21, 0x2a, 0x97, 0x12, 0xa2, 0x3, 0xd6, 0x72, 0xaf, 0x7b, 0x3d, 0x3, 0x97, 0x38, 0x99, 0x20, 0xeb, 0xbf, 0x2f}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"NonFungibleToken.cdc": nonfungibletokenCdc,
	"RoxContract.cdc":      roxcontractCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"NonFungibleToken.cdc": {nonfungibletokenCdc, map[string]*bintree{}},
	"RoxContract.cdc": {roxcontractCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
